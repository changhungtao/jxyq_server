'use strict';var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return !goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('<script type="text/javascript" src="' + src + '"></' + "script>");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return !!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return (fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return +new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ = 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("jxmgrsec.main.db_operation.Ctrl");
jxmgrsec.main.db_operation.Ctrl = function() {
  this.label = "some label from db operation controller";
};
jxmgrsec.main.db_operation.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxmgrsec.main.db_operation.device_type.Ctrl");
jxmgrsec.main.db_operation.device_type.Ctrl.$inject = ["$scope", "$http", "$modal", "$state", "$filter", "$q", "$window", "i18nService", "ModalService", "constants", "db_operation"];
jxmgrsec.main.db_operation.device_type.Ctrl = function($scope, $http, $modal, $state, $filter, $q, $window, i18nService, ModalService, constants, db_operation) {
  var QUERY_STATUS = "QUERY_STATUS";
  var SEARCH_STATUS = "SEARCH_STATUS";
  $scope.searchStatus = QUERY_STATUS;
  $scope.page_param = {page_size:30, current_page:0, query_date:undefined};
  var ctrl = this;
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, enableFiltering:false, enableCellEdit:false};
  i18nService.setCurrentLang("zh-CN");
  $scope.gridOptions.columnDefs = [{field:"device_type_id", name:"\u8bbe\u5907\u7c7b\u578b\u540d\u79f0", width:"25%", cellFilter:"mapDeviceType", pinnedLeft:true}, {field:"product_type_id", name:"\u96b6\u5c5e\u4ea7\u54c1\u7c7b\u522b", width:"25%", cellFilter:"mapProductType"}, {field:"registered_at", name:"\u6ce8\u518c\u65f6\u95f4", width:"25%", cellFilter:"unixTodate"}, {name:"\u64cd\u4f5c", width:"25%", cellTemplate:'<div class="row"><div class="col-md-offset-1 col-md-2 text-center"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.checkManufacturies(row.entity)" >\u67e5\u770b\u751f\u4ea7\u5382\u5546</button></div><div class="col-md-offset-2 col-md-2 text-center"><button class="btn btn-primary btn-xs" ng-disabled="true" ng-click="grid.appScope.modifyDeviceType(row.entity)">\u7f16\u8f91\u8bbe\u5907\u7c7b\u578b</button></div></div>'}];
  $scope.gridOptions.enableFiltering = false;
  $scope.gridOptions.enableCellEdit = false;
  $scope.gridOptions.onRegisterApi = function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      if ($scope.searchStatus == QUERY_STATUS) {
        $scope.page_param.current_page = newPage - 1;
        $scope.page_param.page_size = pageSize;
        $scope.queryFile();
      } else {
        $scope.page_param.current_page = newPage - 1;
        $scope.page_param.page_size = pageSize;
        $scope.searchFile();
      }
    });
  };
  ctrl.device_types = constants.gotDEVICETYPES();
  ctrl.device_types_selected = [];
  ctrl.registered_from = new Date("2014-01-01");
  ctrl.registered_to = new Date;
  ctrl.registered_to.setHours(23);
  ctrl.registered_to.setMinutes(59);
  ctrl.registered_to.setSeconds(59);
  ctrl.label = "some other label from main.db_operation.product_type controller";
  $scope.queryFile = function() {
    $scope.searchStatus = QUERY_STATUS;
    ctrl.jsonData = {device_type_ids:ctrl.device_types_selected, registered_from:$filter("dateTounix")($filter("date")(ctrl.registered_from, "yyyy-M-dd H:mm:ss")), registered_to:$filter("dateTounix")($filter("date")(ctrl.registered_to, "yyyy-M-dd H:mm:ss")), page_size:$scope.page_param.page_size, current_page:$scope.page_param.current_page};
    if (ctrl.jsonData.registered_from > ctrl.jsonData.registered_to) {
      $scope.addAlert("danger", "\u5f00\u59cb\u65f6\u95f4\u4e0d\u80fd\u65e9\u4e8e\u7ed3\u675f\u65f6\u95f4");
      return;
    }
    db_operation.postDBDeviceTypes(ctrl.jsonData).then(function(data) {
      $scope.gridOptions.data = data.device_types;
      $scope.gridOptions.totalItems = data.total_count;
    });
  };
  ctrl.devicekeyWord = "";
  $scope.searchFile = function() {
    $scope.searchStatus = SEARCH_STATUS;
    ctrl.jsonData1 = {name:ctrl.devicekeyWord, registered_from:$filter("dateTounix")($filter("date")(ctrl.registered_from, "yyyy-M-dd H:mm:ss")), registered_to:$filter("dateTounix")($filter("date")(ctrl.registered_to, "yyyy-M-dd H:mm:ss")), page_size:$scope.page_param.page_size, current_page:$scope.page_param.current_page, query_date:undefined};
    db_operation.fuzzySearchDeviceTypes(ctrl.jsonData1).then(function(data) {
      $scope.gridOptions.data = data.device_types;
      $scope.gridOptions.totalItems = data.total_count;
    });
  };
  $scope.checkManufacturies = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/check_manufacturers_modal/check_manufacturers_modal.html", controller:"CheckManufacturersModalCtrl", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
    }, function() {
    });
  };
  $scope.modifyDeviceType = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/modify_device_type_modal/modify_device_type_modal.html", controller:"ModifyDeviceTypeModalCtrl", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
    }, function() {
      $scope.queryFile();
    });
  };
  ctrl.addDeviceType = function() {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/add_device_type_modal/add_device_type_modal.html", controller:"AddDeviceTypeModalCtrl"});
    modalInstance.result.then(function() {
    }, function() {
      $window.location.reload();
    });
  };
  $scope.dt = new Date;
  $scope.disabled = function(date, mode) {
    return mode === "day" && (date.getDay() === 0 || date.getDay() === 6);
  };
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.open_form_1 = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.form1_opened = true;
  };
  $scope.open_form_2 = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.form2_opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.searchFile();
};
goog.provide("jxmgrsec.main.db_operation.doctor.Ctrl");
jxmgrsec.main.db_operation.doctor.Ctrl.$inject = ["$scope", "$http", "$modal", "$state", "$filter", "$q", "i18nService", "ModalService", "constants", "db_operation"];
jxmgrsec.main.db_operation.doctor.Ctrl = function($scope, $http, $modal, $state, $filter, $q, i18nService, ModalService, constants, db_operation) {
  $scope.searchData = {full_name:undefined, registered_from:undefined, registered_to:undefined, page_size:10, current_page:0, query_date:undefined};
  var ctrl = this;
  $scope.online_count = 0;
  $scope.member_count = 0;
  i18nService.setCurrentLang("zh-CN");
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"login_name", name:"\u767b\u5f55\u540d", width:"15%", pinnedLeft:true}, {field:"full_name", name:"\u533b\u751f\u540d\u79f0", width:"15%", pinnedLeft:true}, {field:"registered_at", name:"\u6ce8\u518c\u65f6\u95f4", width:"20%", cellFilter:"unixTodate"}, {field:"status", name:"\u8d26\u6237\u72b6\u6001", width:"20%", cellFilter:"mapDoctorStatus"}, {name:"\u64cd\u4f5c", 
  width:"30%", cellTemplate:'<div class="row"><div class="col-md-3 text-center"><button class="btn btn-warning btn-sm" ng-if="row.entity.status==1" ng-click="grid.appScope.changeStatus(row.entity)" >\u7981\u7528\u8d26\u6237</button><button class="btn btn-primary btn-sm" ng-if="row.entity.status==2" ng-click="grid.appScope.changeStatus(row.entity)" >\u542f\u7528\u8d26\u6237</button></div><div class="col-md-3 text-center"><button class="btn btn-primary btn-sm" ng-click="grid.appScope.showDoctorDetail(row.entity.doctor_id)" >\u67e5\u770b\u8be6\u60c5</button></div><div class="col-md-3 text-center"><button class="btn btn-primary btn-sm" ng-click="grid.appScope.editDoctor(row.entity.doctor_id)" >\u7f16\u8f91\u533b\u751f</button></div></div>', 
  pinnedRight:true}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.searchData.current_page = newPage - 1;
      $scope.searchData.page_size = pageSize;
      $scope.getDoctors();
    });
  }};
  ctrl.label = "some other label from main.db_operation.terminal controller";
  $scope.dt = new Date;
  $scope.query_date = {from:new Date("2014-01-01"), to:new Date};
  $scope.query_date.to.setHours(23);
  $scope.query_date.to.setMinutes(59);
  $scope.query_date.to.setSeconds(59);
  $scope.open_form_from = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.from_opened = true;
  };
  $scope.open_form_to = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.to_opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.getDoctors = function() {
    if ($scope.query_date.from > $scope.query_date.to) {
      $scope.addAlert("danger", "\u7ed3\u675f\u65e5\u671f\u4e0d\u80fd\u5c0f\u4e8e\u5f00\u59cb\u65e5\u671f");
      return;
    }
    $scope.searchData.registered_from = $filter("dateTounix")($filter("date")($scope.query_date.from, "yyyy-M-dd H:mm:ss"));
    $scope.searchData.registered_to = $filter("dateTounix")($filter("date")($scope.query_date.to, "yyyy-M-dd H:mm:ss"));
    console.log($scope.searchData);
    return db_operation.getDoctors($scope.searchData).then(function(res) {
      console.log(res);
      $scope.gridOptions.data = res.doctors;
      $scope.gridOptions.totalItems = res.total_count;
      $scope.searchData.query_date = res.query_date;
      $scope.online_count = res.online_count;
      $scope.member_count = res.member_count;
    });
  };
  $scope.addDoctor = function() {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/add_doctor_modal/add_doctor_modal.html", controller:"AddDoctorModalCtrl", size:"lg"});
    modalInstance.result.then(function() {
    }, function() {
      console.log("close modal:");
      $scope.searchData.query_date = undefined;
      console.log($scope.searchDatas);
      $scope.getDoctors();
    });
  };
  $scope.changeStatus = function(entity) {
    entity.status = entity.status == 1 ? 2 : 1;
    var reqData = {status:""};
    reqData.status = entity.status;
    console.log(entity);
    db_operation.modifyDoctorStatus(entity.doctor_id, reqData).then(function(data) {
    });
  };
  $scope.showDoctorDetail = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/show_doctor_modal/show_doctor_modal.html", controller:"ShowDoctorModalCtrl", size:"lg", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
      console.log("Modal closed at: " + new Date);
    }, function() {
      console.log("Modal dismissed at: " + new Date);
    });
  };
  $scope.editDoctor = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/modify_doctor_modal/modify_doctor_modal.html", controller:"ModifyDoctorModalCtrl", size:"lg", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
      console.log("Modal closed at: " + new Date);
      $scope.getDoctors();
    }, function() {
      console.log("Modal dismissed at: " + new Date);
      $scope.getDoctors();
    });
  };
  $scope.deleteDoctor = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/delete_doctor_modal/delete_doctor_modal.html", controller:"DeleteDoctorModalCtrl", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
      console.log("Modal closed at: " + new Date);
      $scope.getDoctors();
    }, function() {
      console.log("Modal dismissed at: " + new Date);
      $scope.getDoctors();
    });
  };
  activate();
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  function activate() {
    var promises = [$scope.getDoctors()];
    return $q.all(promises).then(function() {
    });
  }
};
goog.provide("jxmgrsec.main.db_operation.manufactory.Ctrl");
jxmgrsec.main.db_operation.manufactory.Ctrl.$inject = ["$scope", "$http", "$modal", "$state", "$filter", "$q", "i18nService", "ModalService", "constants", "db_operation", "$timeout"];
jxmgrsec.main.db_operation.manufactory.Ctrl = function($scope, $http, $modal, $state, $filter, $q, i18nService, ModalService, constants, db_operation, $timeout) {
  var ctrl = this;
  ctrl.label = "some other label from main.db_operation.manufactory controller";
  var NAME_STATUS = "NAME_STATUS";
  var TYPE_STATUS = "TYPE_STATUS";
  $scope.searchStatus = NAME_STATUS;
  $scope.online_count = 1;
  $scope.member_count = 1;
  $scope.gridOptions = {useExternalPagination:true, paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10};
  i18nService.setCurrentLang("zh-CN");
  $scope.gridOptions.columnDefs = [{field:"login_name", name:"\u767b\u5f55\u540d", width:"10%", pinnedLeft:true}, {field:"manufactory_name", name:"\u5382\u5546\u540d\u79f0", width:"15%", pinnedLeft:true}, {field:"device_type_ids", name:"\u8bbe\u5907\u7c7b\u578b", width:"20%", cellFilter:"mapDeviceTypeArray"}, {field:"registered_at", name:"\u6ce8\u518c\u65f6\u95f4", width:"15%", cellFilter:"unixTodate"}, {field:"status", name:"\u8d26\u6237\u72b6\u6001", width:"15%", cellFilter:"mapManufactoryStatus"}, 
  {name:"\u64cd\u4f5c", width:"30%", cellTemplate:'<div class="row"><div class="col-md-3 text-center"><button class="btn btn-primary btn-sm" ng-click="grid.appScope.changeStatus(row.entity)" >{{(row.entity.status == 1 ? "\u7981\u7528\u8d26\u6237": "\u542f\u7528\u8d26\u6237" )}}</button></div><div class="col-md-3 text-center"><button class="btn btn-primary btn-sm" ng-click="grid.appScope.showManuDetail(row.entity.manufactory_id)" >\u67e5\u770b\u8be6\u60c5</button></div><div class="col-md-3 text-center"><button class="btn btn-primary btn-sm" ng-click="grid.appScope.editManu(row.entity.manufactory_id)" >\u7f16\u8f91\u5382\u5546</button></div></div>', 
  pinnedRight:true}];
  $scope.gridOptions.onRegisterApi = function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      if ($scope.searchStatus == NAME_STATUS) {
        $scope.manuSearchNameData.current_page = newPage - 1;
        $scope.manuSearchNameData.page_size = pageSize;
        $scope.getManusByName();
      } else {
        $scope.manuSearchTypeData.current_page = newPage - 1;
        $scope.manuSearchTypeData.page_size = pageSize;
        $scope.getManusByType();
      }
    });
  };
  $scope.manuSearchNameData = {full_name:"", page_size:10, current_page:0, query_date:undefined};
  $scope.manuSearchTypeData = {manufactory_ids:undefined, device_type_ids:undefined, registered_from:undefined, registered_to:undefined, page_size:10, current_page:0, query_date:undefined};
  $scope.manufactory = {manufactory_id:"", manufactory_name:"", device_type_ids:"", registered_at:"", status:""};
  $scope.manufacturers = constants.gotMANUFACTORIES();
  $scope.device_types = constants.gotDEVICETYPES();
  $scope.device_type_id = {selected:undefined};
  $scope.clearDeviceType = function() {
    $scope.device_type_id.selected = undefined;
  };
  console.log($scope.manufacturers);
  console.log($scope.device_types);
  $scope.dt = new Date;
  $scope.query_date = {from:new Date("2014-01-01"), to:new Date};
  $scope.query_date.to.setHours(23);
  $scope.query_date.to.setMinutes(59);
  $scope.query_date.to.setSeconds(59);
  $scope.open_form_from = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.from_opened = true;
  };
  $scope.open_form_to = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.to_opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.getManusByName = function() {
    db_operation.getManusByName($scope.manuSearchNameData).then(function(res) {
      console.log(res);
      $scope.searchStatus = NAME_STATUS;
      $scope.gridOptions.data = res.manufactories;
      $scope.manuSearchNameData.query_date = res.query_date;
      $scope.gridOptions.totalItems = res.total_count;
      $scope.online_count = res.online_count;
      $scope.member_count = res.member_count;
    });
  };
  $scope.regetManusByName = function() {
    $scope.manuSearchNameData.current_page = 0;
    $scope.manuSearchNameData.page_size = 10;
    $scope.gridOptions.paginationCurrentPage = 1;
    $scope.getManusByName();
  };
  $scope.getManusByType = function() {
    if ($scope.device_type_id.selected === undefined) {
      $scope.manuSearchTypeData.device_type_ids = undefined;
    } else {
      $scope.manuSearchTypeData.device_type_ids = [];
      $scope.manuSearchTypeData.device_type_ids.push($scope.device_type_id.selected);
    }
    console.log($scope.manuSearchTypeData);
    $scope.manuSearchTypeData.registered_from = $filter("dateTounix")($filter("date")($scope.query_date.from, "yyyy-M-dd H:mm:ss"));
    $scope.manuSearchTypeData.registered_to = $filter("dateTounix")($filter("date")($scope.query_date.to, "yyyy-M-dd H:mm:ss"));
    if ($scope.manuSearchTypeData.registered_from > $scope.manuSearchTypeData.registered_to) {
      $scope.addAlert("danger", "\u5f00\u59cb\u65f6\u95f4\u4e0d\u80fd\u65e9\u4e8e\u7ed3\u675f\u65f6\u95f4");
      return;
    }
    console.log($scope.manuSearchTypeData);
    db_operation.getManusByType($scope.manuSearchTypeData).then(function(res) {
      console.log(res);
      $scope.searchStatus = TYPE_STATUS;
      $scope.gridOptions.data = res.manufactories;
      $scope.manuSearchTypeData.query_date = res.query_date;
      $scope.gridOptions.totalItems = res.total_count;
      $scope.online_count = res.online_count;
      $scope.member_count = res.member_count;
    });
  };
  $scope.regetManusByType = function() {
    $scope.manuSearchTypeData.current_page = 0;
    $scope.manuSearchTypeData.page_size = 10;
    $scope.gridOptions.paginationCurrentPage = 1;
    $scope.getManusByType();
  };
  $scope.changeStatus = function(entity) {
    entity.status = entity.status == 1 ? 2 : 1;
    var reqData = {status:""};
    reqData.status = entity.status;
    console.log(reqData);
    db_operation.modifyManuStatus(entity.manufactory_id, reqData).then(function(data) {
    });
  };
  $scope.addManu = function() {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/add_manufacturers_modal/add_manufactory_modal.html", controller:"AddManufactoryModal", size:"lg"});
    modalInstance.result.then(function() {
    }, function() {
      $scope.manuSearchNameData.query_date = undefined;
      $scope.regetManusByName();
    });
  };
  $scope.showManuDetail = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/manufacturer_detail_modal/manufacturer_detail.html", controller:"ManugfacturerDetailModal", size:"lg", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
    }, function() {
      $scope.regetManusByName();
    });
  };
  $scope.editManu = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/modify_manufactory_modal/modify_manufactory_modal.html", controller:"ModifyManufactoryModal", size:"lg", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
    }, function() {
      $scope.regetManusByName();
    });
  };
  $scope.deleteManu = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/delete_manufactory_modal/delete_manufactory_modal.html", controller:"DeleteManufactoryModal", size:"lg", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
    }, function() {
      $scope.regetManusByName();
    });
  };
  activate();
  function activate() {
    var promises = [$scope.regetManusByName()];
    return $q.all(promises).then(function() {
    });
  }
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxmgrsec.main.db_operation.product_type.Ctrl");
jxmgrsec.main.db_operation.product_type.Ctrl.$inject = ["$scope", "$http", "$modal", "$state", "$filter", "$q", "i18nService", "ModalService", "constants", "db_operation"];
jxmgrsec.main.db_operation.product_type.Ctrl = function($scope, $http, $modal, $state, $filter, $q, i18nService, ModalService, constants, db_operation) {
  var QUERY_STATUS = "QUERY_STATUS";
  var SEARCH_STATUS = "SEARCH_STATUS";
  $scope.searchStatus = QUERY_STATUS;
  $scope.page_param = {page_size:10, current_page:0, query_date:undefined};
  var ctrl = this;
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, enableFiltering:false, enableCellEdit:false};
  i18nService.setCurrentLang("zh-CN");
  $scope.gridOptions.columnDefs = [{field:"product_type_name", name:"\u4ea7\u54c1\u7c7b\u578b\u540d\u79f0", width:"33%", pinnedLeft:true}, {field:"registered_at", name:"\u6ce8\u518c\u65f6\u95f4", width:"33%", cellFilter:"unixTodate"}, {name:"\u64cd\u4f5c", width:"34%", cellTemplate:'<div class="row"><div class="col-md-offset-1 col-md-2 text-center"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.checkDevices(row.entity)" >\u67e5\u770b\u65d7\u4e0b\u8bbe\u5907\u7c7b\u578b</button></div><div class="col-md-offset-2 col-md-2 text-center"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.modifyProductType(row.entity)">\u7f16\u8f91\u4ea7\u54c1\u7c7b\u578b</button></div></div>'}];
  $scope.gridOptions.onRegisterApi = function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      if ($scope.searchStatus == QUERY_STATUS) {
        $scope.page_param.current_page = newPage - 1;
        $scope.page_param.page_size = pageSize;
        $scope.queryFile();
      } else {
        $scope.page_param.current_page = newPage - 1;
        $scope.page_param.page_size = pageSize;
        $scope.searchFile();
      }
    });
  };
  ctrl.registered_from = new Date("2014-01-01");
  ctrl.registered_to = new Date;
  ctrl.registered_to.setHours(23);
  ctrl.registered_to.setMinutes(59);
  ctrl.registered_to.setSeconds(59);
  ctrl.product_types = constants.gotPRODUCTTYPES();
  ctrl.product_types_selected = [];
  ctrl.label = "some other label from main.db_operation.product_type controller";
  $scope.queryFile = function() {
    $scope.searchStatus = QUERY_STATUS;
    ctrl.jsonData = {product_type_ids:ctrl.product_types_selected, registered_from:$filter("dateTounix")($filter("date")(ctrl.registered_from, "yyyy-M-dd H:mm:ss")), registered_to:$filter("dateTounix")($filter("date")(ctrl.registered_to, "yyyy-M-dd H:mm:ss")), page_size:$scope.page_param.page_size, current_page:$scope.page_param.current_page};
    db_operation.postDBProductTypes(ctrl.jsonData).then(function(data) {
      $scope.gridOptions.data = data.product_types;
      $scope.gridOptions.totalItems = data.total_count;
    });
  };
  ctrl.productkeyWord = "";
  $scope.searchFile = function() {
    $scope.searchStatus = SEARCH_STATUS;
    ctrl.jsonData1 = {name:ctrl.productkeyWord, registered_from:$filter("dateTounix")($filter("date")(ctrl.registered_from, "yyyy-M-dd H:mm:ss")), registered_to:$filter("dateTounix")($filter("date")(ctrl.registered_to, "yyyy-M-dd H:mm:ss")), page_size:$scope.page_param.page_size, current_page:$scope.page_param.current_page, query_date:undefined};
    db_operation.fuzzySearchProductTypes(ctrl.jsonData1).then(function(data) {
      $scope.gridOptions.data = data.product_types;
      $scope.gridOptions.totalItems = data.total_count;
    });
  };
  $scope.checkDevices = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/product_type_check_devices_modal/check_devices_modal.html", controller:"CheckDevicesModalCtrl", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
    }, function() {
    });
  };
  $scope.modifyProductType = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/modify_product_type_modal/modify_product_type_modal.html", controller:"ModifyProductTypeModalCtrl", size:"lg", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
    }, function() {
      $scope.queryFile();
    });
  };
  ctrl.addProductType = function() {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/add_product_type_modal/add_product_type_modal.html", controller:"AddProductTypeModalCtrl", size:"lg"});
    modalInstance.result.then(function() {
    }, function() {
      $scope.page_param.query_date = undefined;
      $scope.queryFile();
    });
  };
  $scope.dt = new Date;
  $scope.disabled = function(date, mode) {
    return mode === "day" && (date.getDay() === 0 || date.getDay() === 6);
  };
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.open_form_1 = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.form1_opened = true;
  };
  $scope.open_form_2 = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.form2_opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.queryFile();
};
goog.provide("jxmgrsec.main.db_operation.terminal.Ctrl");
jxmgrsec.main.db_operation.terminal.Ctrl.$inject = ["$scope", "$http", "$modal", "$state", "$filter", "$q", "i18nService", "ModalService", "constants", "db_operation"];
jxmgrsec.main.db_operation.terminal.Ctrl = function($scope, $http, $modal, $state, $filter, $q, i18nService, ModalService, constants, db_operation) {
  var QUERY_STATUS = "QUERY_STATUS";
  var SEARCH_STATUS = "SEARCH_STATUS";
  $scope.searchStatus = QUERY_STATUS;
  $scope.page_param = {page_size:30, current_page:0, query_date:undefined};
  var ctrl = this;
  $scope.gridOptions = {paginationPageSizes:[10, 20, 30], paginationPageSize:30, useExternalPagination:true};
  i18nService.setCurrentLang("zh-CN");
  $scope.gridOptions.columnDefs = [{field:"terminal_name", name:"\u7ec8\u7aef\u540d\u79f0", width:"22%", pinnedLeft:true}, {field:"device_type_id", name:"\u8bbe\u5907\u7c7b\u578b", width:"10%", cellFilter:"mapDeviceType"}, {field:"manufactory_name", name:"\u96b6\u5c5e\u5382\u5546", width:"24%"}, {field:"activated_at", name:"\u6fc0\u6d3b\u65f6\u95f4", width:"20%", cellFilter:"unixTodate"}, {field:"status", name:"\u72b6\u6001", width:"8%", cellFilter:"mapTerminalStatus"}, {name:"\u64cd\u4f5c", width:"16%", 
  cellTemplate:'<div class="row ui-grid-cell-contents"><div class="col-md-offset-1 col-md-2 text-center"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.checkTerminal(row.entity)" >\u67e5\u770b\u8be6\u60c5</button></div><div class="col-md-offset-3 col-md-2 text-center"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.checkUsers(row.entity)" >\u7528\u6237\u5217\u8868</button></div></div>'}];
  $scope.gridOptions.enableFiltering = false;
  $scope.gridOptions.enableCellEdit = false;
  $scope.gridOptions.onRegisterApi = function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      if ($scope.searchStatus == QUERY_STATUS) {
        $scope.page_param.current_page = newPage - 1;
        $scope.page_param.page_size = pageSize;
        $scope.queryFile();
      } else {
        $scope.page_param.current_page = newPage - 1;
        $scope.page_param.page_size = pageSize;
        $scope.searchFile();
      }
    });
  };
  ctrl.label = "some other label from main.db_operation.terminal controller";
  ctrl.device_types = [];
  ctrl.device_types_selected = [];
  ctrl.device_states = [];
  ctrl.device_state_selected = undefined;
  ctrl.manufacturers = [];
  ctrl.manufacturer_selected = [];
  $scope.checkTerminal = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/check_terminal_modal/check_terminal_modal.html", controller:"CheckTerminalModalCtrl", size:"lg", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
    }, function() {
    });
  };
  $scope.checkUsers = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/check_users_modal/check_users_modal.html", controller:"CheckUsersModalCtrl", size:"lg", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
    }, function() {
    });
  };
  $scope.queryFile = function() {
    $scope.searchStatus = QUERY_STATUS;
    ctrl.jsonData = {manufactory_ids:ctrl.manufacturer_selected, device_type_ids:ctrl.device_types_selected, status:ctrl.device_state_selected, page_size:$scope.page_param.page_size, current_page:$scope.page_param.current_page, query_date:undefined};
    db_operation.postTerminals(ctrl.jsonData).then(function(data) {
      $scope.gridOptions.data = data.terminals;
      $scope.gridOptions.totalItems = data.total_count;
    });
  };
  ctrl.fuzzy_search = "";
  $scope.searchFile = function() {
    console.log(ctrl.fuzzy_search);
    $scope.searchStatus = SEARCH_STATUS;
    ctrl.jsonData1 = {full_name:ctrl.fuzzy_search, page_size:$scope.page_param.page_size, current_page:$scope.page_param.current_page, query_date:undefined};
    db_operation.fuzzySearchTerminals(ctrl.jsonData1).then(function(data) {
      $scope.gridOptions.data = data.terminals;
      $scope.gridOptions.totalItems = data.total_count;
    });
  };
  activate();
  function activate() {
    var promises = [getDeviceTypes(), getTerminalStatusList(), getManufacturers()];
    return $q.all(promises).then(function() {
    });
  }
  function getManufacturers() {
    return constants.getManufactories().then(function(data) {
      ctrl.manufacturers = data.manufactories;
      console.log(data.manufactories);
      return ctrl.manufacturers;
    });
  }
  function getDeviceTypes() {
    return constants.getDeviceTypes().then(function(data) {
      ctrl.device_types = data.device_types;
      console.log(data.device_types);
      return ctrl.device_types;
    });
  }
  function getTerminalStatusList() {
    return constants.getTerminalStatus().then(function(data) {
      ctrl.device_states = data.terminal_status_list;
      console.log(data.terminal_status_list);
      return ctrl.device_states;
    });
  }
  $scope.searchFile();
};
goog.provide("jxmgrsec.main.db_operation.terminal_category.Ctrl");
jxmgrsec.main.db_operation.terminal_category.Ctrl.$inject = ["$scope", "$http", "$modal", "$state", "$filter", "$q", "i18nService", "ModalService", "constants", "db_operation"];
jxmgrsec.main.db_operation.terminal_category.Ctrl = function($scope, $http, $modal, $state, $filter, $q, i18nService, ModalService, constants, db_operation) {
  i18nService.setCurrentLang("zh-CN");
  $scope.device_types = constants.gotDEVICETYPES();
  $scope.terminal_catelogry = {manufactory_name:undefined, device_type_id:undefined, terminal_catagory_name:undefined, page_size:10, current_page:0, query_date:undefined};
  $scope.getTerminalLists = function() {
    if ($scope.terminal_catelogry.terminal_catagory_name == "") {
      $scope.terminal_catelogry.terminal_catagory_name = undefined;
    }
    if ($scope.terminal_catelogry.manufactory_name == "") {
      $scope.terminal_catelogry.manufactory_name = undefined;
    }
    return db_operation.postTerminalCatagorise($scope.terminal_catelogry).then(function(data) {
      console.log(data);
      $scope.gridOptions.data = data.catagories;
      $scope.gridOptions.totalItems = data.total_count;
      $scope.terminal_catelogry.query_date = data.query_date;
    }, function(error) {
      console.log(error);
    });
  };
  $scope.getTerminalLists();
  $scope.defaultPic = "../../img/default.png";
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"terminal_catagory_name", name:"\u7ec8\u7aef\u578b\u53f7\u540d\u79f0", width:"15%", pinnedLeft:true}, {field:"manufactory_name", name:"\u5382\u5546\u540d\u79f0", width:"10%"}, {field:"code", name:"\u7ec8\u7aef\u578b\u53f7\u7f16\u7801", width:"10%"}, {field:"device_type_id", name:"\u8bbe\u5907\u7c7b\u578b", width:"8%", cellFilter:"mapDeviceType"}, {field:"price", name:"\u4ef7\u683c", 
  width:"8%"}, {name:"\u7ec8\u7aef\u578b\u53f7\u56fe\u7247", width:"10%", cellTemplate:'<div><a  href={{row.entity.picture}} target="_blank" ng-if="row.entity.picture"><span style="color: royalblue">\u67e5\u770b</span></a></div>'}, {field:"profile", name:"\u7ec8\u7aef\u578b\u53f7\u63cf\u8ff0", width:"10%"}, {field:"created_at", name:"\u6dfb\u52a0\u65f6\u95f4", width:"10%", cellFilter:"unixTodate"}, {field:"status", name:"\u7ec8\u7aef\u578b\u53f7\u72b6\u6001", width:"10%", cellFilter:"mapTerminalStatus"}, 
  {name:"\u64cd\u4f5c", width:"20%", cellTemplate:'<div class="row ui-grid-cell-contents"><div class="col-md-offset-1 col-md-4"><button  class="btn col-md-12 btn-primary btn-xs" ng-click="grid.appScope.updateStatus(row.entity)">{{row.entity.status == 1 ? "\u7981\u7528" : "\u542f\u7528"}}</button></div></div>'}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.terminal_catelogry.current_page = newPage - 1;
      $scope.terminal_catelogry.page_size = pageSize;
      $scope.getTerminalLists();
    });
  }};
  $scope.updateStatus = function(entity) {
    if ($scope.validParam(entity.status)) {
      if (entity.status == 1) {
        return db_operation.updateTerCatSataus(entity.manufactory_id, entity.terminal_catagory_id, {status:2}).then(function() {
          $scope.getTerminalLists();
        });
      } else {
        if (entity.status == 2) {
          return db_operation.updateTerCatSataus(entity.manufactory_id, entity.terminal_catagory_id, {status:1}).then(function() {
            $scope.getTerminalLists();
          });
        }
      }
    }
  };
};
goog.provide("jxmgrsec.main.db_operation.terminal_category.module");
goog.require("jxmgrsec.main.db_operation.terminal_category.Ctrl");
jxmgrsec.main.db_operation.terminal_category.module = angular.module("main.db_operation.terminal_category", ["ui.router", "ngResource", "ui.select", "ngSanitize", "ui.bootstrap", "angularModalService"]);
jxmgrsec.main.db_operation.terminal_category.module.configuration = function($stateProvider) {
  $stateProvider.state("main.db_operation.terminal_category", {url:"/terminal_category", templateUrl:"states/main/db_operation/terminal_category/terminal_category.html", controller:"TerminalCategoryCtrl as terminalcategory", resolve:{"DEVICETYPESPromise":function(constants) {
    return constants.DEVICETYPESPromise;
  }, "PRODUCTTYPESPromise":function(constants) {
    return constants.PRODUCTTYPESPromise;
  }, "TERMINALSTATUSPromise":function(constants) {
    return constants.TERMINALSTATUSPromise;
  }}});
};
jxmgrsec.main.db_operation.terminal_category.module.config(jxmgrsec.main.db_operation.terminal_category.module.configuration).controller("TerminalCategoryCtrl", jxmgrsec.main.db_operation.terminal_category.Ctrl);
goog.provide("jxmgrsec.main.db_operation.user.Ctrl");
jxmgrsec.main.db_operation.user.Ctrl.$inject = ["$scope", "$http", "$modal", "$state", "$filter", "$q", "i18nService", "ModalService", "constants", "db_operation"];
jxmgrsec.main.db_operation.user.Ctrl = function($scope, $http, $modal, $state, $filter, $q, i18nService, ModalService, constants, db_operation) {
  var ctrl = this;
  i18nService.setCurrentLang("zh-CN");
  $scope.online_count = 0;
  $scope.member_count = 0;
  ctrl.label = "some other label from main.db_operation.user controller";
  var NAME_SEARCH_STATUS = "NAME_SEARCH_STATUS";
  var OTHER_SEARCH_STATUS = "OTHER_SEARCH_STATUS";
  $scope.searchStatus = NAME_SEARCH_STATUS;
  $scope.page_param = {page_size:10, current_page:0, query_date:undefined};
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"full_name", name:"\u7528\u6237\u540d", width:"10%", pinnedLeft:true}, {field:"phone", name:"\u6ce8\u518c\u624b\u673a", width:"10%"}, {field:"device_type_ids", name:"\u8bbe\u5907\u7c7b\u578b", width:"20%", cellFilter:"mapDeviceTypeArray"}, {field:"registered_at", name:"\u6ce8\u518c\u65f6\u95f4", width:"15%", cellFilter:"unixTodate"}, {field:"status", name:"\u72b6\u6001", 
  width:"15%", cellFilter:"mapUserStatus"}, {name:"\u64cd\u4f5c", width:"30%", cellTemplate:'<div class="row"><div class="col-md-offset-1 col-md-2 text-center"><button class="btn btn-primary btn-sm" ng-click="grid.appScope.changeStatus(row.entity)" >{{(row.entity.status == 1 ? "\u7981\u7528\u8d26\u6237": "\u542f\u7528\u8d26\u6237" )}}</button></div><div class="col-md-offset-1 col-md-2 text-center"><button class="btn btn-primary btn-sm" ng-click="grid.appScope.showUserDetail(row.entity.user_id)" >\u67e5\u770b\u8be6\u60c5</button></div><div class="col-md-offset-1 col-md-2 text-center"><button class="btn btn-primary btn-sm" ng-click="grid.appScope.editUser(row.entity.user_id)" >\u7f16\u8f91\u7528\u6237</button></div></div>'}], 
  onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      if ($scope.searchStatus == NAME_SEARCH_STATUS) {
        $scope.page_param.current_page = newPage - 1;
        $scope.page_param.page_size = pageSize;
        $scope.regetUsersByName();
      } else {
        $scope.page_param.current_page = newPage - 1;
        $scope.page_param.page_size = pageSize;
        $scope.regetUsersByOther();
      }
    });
  }};
  $scope.device_types = [];
  $scope.ages = [];
  for (var i = 0;i <= 120;i++) {
    $scope.ages[i] = i;
  }
  $scope.userSearchNameData = {full_name:"", page_size:10, current_page:0, query_date:undefined};
  $scope.device_type_id = {selected:undefined};
  $scope.clearDeviceType = function() {
    $scope.device_type_id.selected = undefined;
  };
  $scope.userSearchOtherData = {phone:undefined, device_type_ids:undefined, registered_from:undefined, registered_to:undefined, begin_age:undefined, end_age:undefined, page_size:10, current_page:0, query_date:undefined};
  $scope.dt = new Date;
  $scope.query_date = {from:new Date("2014-01-01"), to:new Date};
  $scope.query_date.to.setHours(23);
  $scope.query_date.to.setMinutes(59);
  $scope.query_date.to.setSeconds(59);
  $scope.open_form_from = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.from_opened = true;
  };
  $scope.open_form_to = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.to_opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.getDeviceTypes = function() {
    return constants.getDeviceTypes().then(function(data) {
      $scope.device_types = data.device_types;
      return $scope.device_types;
    });
  };
  $scope.changeStatus = function(entity) {
    entity.status = entity.status == 1 ? 2 : 1;
    var reqData = {status:""};
    reqData.status = entity.status;
    console.log(entity);
    db_operation.putUserStatus(entity.user_id, reqData).then(function(data) {
    });
  };
  $scope.showUserDetail = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/show_user_modal/show_user_modal.html", controller:"ShowUserModalCtrl", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
      console.log("Modal closed at: " + new Date);
    }, function() {
      console.log("Modal dismissed at: " + new Date);
    });
  };
  $scope.editUser = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/modify_user_modal/modify_user_modal.html", controller:"ModifyUserModalCtrl", size:"lg", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
      console.log("Modal closed at: " + new Date);
    }, function() {
      console.log("Modal dismissed at: " + new Date);
    });
  };
  $scope.getUsersByName = function() {
    console.log($scope.userSearchNameData);
    db_operation.getUsersByName($scope.userSearchNameData).then(function(res) {
      console.log(res);
      $scope.searchStatus = NAME_SEARCH_STATUS;
      $scope.gridOptions.data = res.users;
      $scope.userSearchNameData.query_date = res.query_date;
      $scope.gridOptions.totalItems = res.total_count;
      $scope.online_count = res.online_count;
      $scope.member_count = res.member_count;
    });
  };
  $scope.regetUsersByName = function() {
    $scope.userSearchNameData.current_page = $scope.page_param.current_page;
    $scope.userSearchNameData.page_size = $scope.page_param.page_size;
    $scope.getUsersByName();
  };
  $scope.getUsersByOther = function() {
    if ($scope.device_type_id.selected === undefined) {
      $scope.userSearchOtherData.device_type_ids = undefined;
    } else {
      $scope.userSearchOtherData.device_type_ids = [];
      $scope.userSearchOtherData.device_type_ids.push($scope.device_type_id.selected);
    }
    $scope.userSearchOtherData.registered_from = $filter("dateTounix")($filter("date")($scope.query_date.from, "yyyy-M-dd H:mm:ss"));
    $scope.userSearchOtherData.registered_to = $filter("dateTounix")($filter("date")($scope.query_date.to, "yyyy-M-dd H:mm:ss"));
    console.log($scope.userSearchOtherData);
    db_operation.getUsers($scope.userSearchOtherData).then(function(res) {
      console.log(res);
      $scope.searchStatus = OTHER_SEARCH_STATUS;
      $scope.gridOptions.data = res.users;
      $scope.userSearchOtherData.query_date = res.query_date;
      $scope.gridOptions.totalItems = res.total_count;
      $scope.online_count = res.online_count;
      $scope.member_count = res.member_count;
    });
  };
  $scope.regetUsersByOther = function() {
    $scope.userSearchOtherData.current_page = $scope.page_param.current_page;
    $scope.userSearchOtherData.page_size = $scope.page_param.page_size;
    $scope.getUsersByOther();
  };
  $scope.activate = function() {
    var promises = [$scope.getDeviceTypes(), $scope.regetUsersByName()];
    return $q.all(promises).then(function() {
    });
  };
  $scope.activate();
};
goog.provide("jxmgrsec.main.health_data.Ctrl");
jxmgrsec.main.health_data.Ctrl.$inject = ["$scope", "$http", "$modal", "$state", "$filter", "$q", "i18nService", "ModalService", "constants", "health_data"];
jxmgrsec.main.health_data.Ctrl = function($scope, $http, $modal, $state, $filter, $q, i18nService, ModalService, constants, health_data) {
  var ctrl = this;
  $scope.query_date = {measured_from:new Date("2014-01-01"), measured_to:new Date};
  $scope.query_date.measured_to.setHours(23);
  $scope.query_date.measured_to.setMinutes(59);
  $scope.query_date.measured_to.setSeconds(59);
  $scope.measurement = {data_type_ids:[1], status:1, measured_from:$scope.query_date.created_from, measured_to:$scope.query_date.created_to, phone:undefined, page_size:10, current_page:0, query_date:undefined};
  $scope.data_types = constants.gotDATATYPES();
  $scope.evaluated_status = constants.gotHEALTHDATASTATUS();
  $scope.getMeasurements = function() {
    if ($scope.validParam($scope.measurement)) {
      $scope.measurement.measured_from = $filter("dateTounix")($filter("date")($scope.query_date.measured_from, "yyyy-M-dd H:mm:ss"));
      $scope.measurement.measured_to = $filter("dateTounix")($filter("date")($scope.query_date.measured_to, "yyyy-M-dd H:mm:ss"));
      if ($scope.measurement.phone == "") {
        $scope.measurement.phone = undefined;
      }
      if ($scope.measurement.data_type_ids[0] == undefined) {
        var arry = [$scope.measurement.data_type_ids];
        $scope.measurement.data_type_ids = arry;
      }
      return health_data.getMeasurements($scope.measurement).then(function(res) {
        $scope.gridOptions.data = res.measurements;
        $scope.gridOptions.totalItems = res.total_count;
        $scope.measurement.query_date = res.query_date;
      });
    }
  };
  $scope.getMeasurements();
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"data_type", name:"\u6570\u636e\u7c7b\u578b", width:"10%", cellFilter:"mapDataType", pinnedLeft:true}, {field:"user_full_name", name:"\u7528\u6237\u540d\u79f0", width:"10%", pinnedLeft:true}, {field:"user_nick_name", name:"\u7528\u6237\u6635\u79f0", width:"10%", pinnedLeft:true}, {field:"user_phone", name:"\u7528\u6237\u624b\u673a", width:"10%", pinnedLeft:true}, {field:"terminal_name", 
  name:"\u7ec8\u7aef\u540d\u79f0", width:"15%"}, {field:"manufactory_name", name:"\u5382\u5546\u540d\u79f0", width:"15%"}, {field:"measured_at", name:"\u6570\u636e\u6536\u96c6\u65f6\u95f4", width:"15%", cellFilter:"unixTodate"}, {field:"status", name:"\u8bc4\u6d4b\u72b6\u6001", width:"10%", cellFilter:"mapHalthDataStatus"}, {name:"\u64cd\u4f5c", width:"15%", cellTemplate:'<div class="row"><div class="col-md-offset-1 col-md-2 text-center"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.modifyHealData(row.entity)" >\u7f16\u8f91\u5065\u5eb7\u6570\u636e</button></div></div>', 
  pinnedRight:true}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.measurement.current_page = newPage - 1;
      $scope.measurement.page_size = pageSize;
      $scope.getMeasurements();
    });
  }};
  i18nService.setCurrentLang("zh-CN");
  var templateUrls = ["components/tpls/health_data_modals/wristband_modal/wristband_modal.html", "components/tpls/health_data_modals/sphygmomanometer_modal/sphygmomanometer_modal.html", "components/tpls/health_data_modals/oximeter_modal/oximeter_modal.html", "components/tpls/health_data_modals/glucosemeter_modal/glucosemeter_modal.html", "components/tpls/health_data_modals/thermometer_modal/thermometer_modal.html", "components/tpls/health_data_modals/fat_modal/fat_modal.html"];
  var terminal_types = ["wristband", "sphygmomanometer", "oximeter", "glucosemeter", "thermometer", "fat"];
  var controller_list = ["WristbandModalCtrl", "SphygmomanometerModalCtrl", "OximeterModalCtrl", "GlucosemeterModalCtrl", "ThermometerModalCtrl", "FatModalCtrl"];
  $scope.modifyHealData = function(entity) {
    var type = entity.data_type;
    var modalInstance = $modal.open({animation:true, templateUrl:templateUrls[type - 1], controller:controller_list[type - 1], resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
    }, function() {
    });
  };
  $scope.dt = new Date;
  $scope.minDate = new Date("1900/01/01");
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.open1 = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened1 = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[2];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
};
jxmgrsec.main.health_data.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxmgrsec.main.home_security.button.Ctrl");
jxmgrsec.main.home_security.button.Ctrl.$inject = ["$scope", "$http", "$q", "i18nService", "constants", "home_security"];
jxmgrsec.main.home_security.button.Ctrl = function($scope, $http, $q, i18nService, constants, $modal, home_security) {
  this.label = "some other label from main.home_security.button controller";
  var ctrl = this;
  i18nService.setCurrentLang("zh-CN");
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"touch_button_id", name:"\u89e6\u6478\u6309\u94ae\u7f16\u53f7", width:"16%", pinnedLeft:true}, {field:"name", name:"\u89e6\u6478\u6309\u94ae\u540d\u79f0", width:"16%"}, {field:"uid", name:"\u89e6\u6478\u6309\u94aeuid", width:"16%"}, {field:"user_phone", name:"\u7528\u6237\u624b\u673a", width:"16%"}, {field:"user_name", name:"\u7528\u6237\u6635\u79f0", width:"16%"}, 
  {name:"\u64cd\u4f5c", width:"20%", cellTemplate:'<div class="row"><div class="col-md-offset-1 col-md-2 text-center"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.popup(row.entity)" >\u67e5\u770b\u4e8b\u4ef6</button></div></div>'}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.buttonPhone.current_page = newPage - 1;
      $scope.buttonPhone.page_size = pageSize;
      $scope.getTouchButtons();
    });
  }};
  var query_date = -1;
  $scope.buttonPhone = {user_phone:undefined, page_size:10, current_page:0, query_date:query_date};
  $scope.getTouchButtons = function() {
    home_security.getTouchButtons($scope.buttonPhone).then(function(res) {
      console.log(res);
      $scope.gridOptions.data = res.touch_buttons;
      $scope.gridOptions.totalItems = res.total_count;
      $scope.buttonPhone.query_date = res.query_date;
    }, function(error) {
      console.log(error);
    });
  };
  $scope.getTouchButtons();
  $scope.popup = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/show_touch_button_modal/show_touch_button_modal.html", controller:"ShowTouchButtonModalCtrl", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
    }, function() {
    });
  };
};
jxmgrsec.main.home_security.button.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxmgrsec.main.home_security.camera.Ctrl");
jxmgrsec.main.home_security.camera.Ctrl.$inject = ["$scope", "$http", "$q", "i18nService", "constants", "home_security"];
jxmgrsec.main.home_security.camera.Ctrl = function($scope, $http, $q, i18nService, constants, home_security) {
  this.label = "some other label from main.home_security.camera controller";
  var ctrl = this;
  i18nService.setCurrentLang("zh-CN");
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"dev_nickname", name:"\u7528\u6237\u540d\u79f0", width:"20%", pinnedLeft:true}, {field:"user_name", name:"\u7528\u6237\u6635\u79f0", width:"20%"}, {field:"user_phone", name:"\u7528\u6237\u624b\u673a", width:"25%"}, {field:"dev_uid", name:"UID", width:"20%"}, {field:"dev_pwd", name:"\u5bc6\u7801", width:"20%"}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.cameraPhone.current_page = newPage - 1;
      $scope.cameraPhone.page_size = pageSize;
      $scope.getCameras();
    });
  }};
  var query_date = -1;
  $scope.cameraPhone = {user_phone:undefined, page_size:10, current_page:0, query_date:query_date};
  $scope.getCameras = function() {
    console.log("00000000000");
    home_security.getCameras($scope.cameraPhone).then(function(res) {
      console.log(res);
      $scope.gridOptions.data = res.cameras;
      $scope.gridOptions.totalItems = res.total_count;
      $scope.cameraPhone.query_date = res.query_date;
    }, function(error) {
      console.log(error);
    });
  };
  $scope.getCameras();
};
jxmgrsec.main.home_security.camera.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxmgrsec.main.home_security.camera.module");
goog.require("jxmgrsec.main.home_security.camera.Ctrl");
jxmgrsec.main.home_security.camera.module = angular.module("main.home_security.camera", ["ui.router", "ui.grid", "ui.grid.pinning", "ui.grid.resizeColumns", "ui.grid.saveState", "ui.grid.edit", "ui.grid.pagination", "ui.select", "ui.bootstrap", "ngSanitize"]);
jxmgrsec.main.home_security.camera.module.configuration = function($stateProvider) {
  $stateProvider.state("main.home_security.camera", {url:"/camera", templateUrl:"states/main/home_security/camera/camera.html", controller:"CameraCtrl as camera"});
};
jxmgrsec.main.home_security.camera.module.config(jxmgrsec.main.home_security.camera.module.configuration).controller("CameraCtrl", jxmgrsec.main.home_security.camera.Ctrl);
goog.provide("jxmgrsec.main.home_security.Ctrl");
jxmgrsec.main.home_security.Ctrl = function() {
  this.label = "some label from home security controller";
};
jxmgrsec.main.home_security.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxmgrsec.main.Ctrl");
jxmgrsec.main.Ctrl.$inject = ["$scope", "$window", "$timeout", "basic"];
jxmgrsec.main.Ctrl = function($scope, $window, $timeout, basic) {
  var ctrl = this;
  ctrl.label = "some label from main controller";
  ctrl.animationsEnabled = true;
  ctrl.db_operation_submenus = [{name:"\u4ea7\u54c1\u7c7b\u578b", link:"main.db_operation.product_type"}, {name:"\u8bbe\u5907\u7c7b\u578b", link:"main.db_operation.device_type"}, {name:"\u7ec8\u7aef\u578b\u53f7", link:"main.db_operation.terminal_category"}, {name:"\u7ec8\u7aef", link:"main.db_operation.terminal"}, {name:"\u5382\u5bb6", link:"main.db_operation.manufactory"}, {name:"\u533b\u751f", link:"main.db_operation.doctor"}, {name:"\u7528\u6237", link:"main.db_operation.user"}];
  ctrl.home_security_submenus = [{name:"\u6444\u50cf\u5934", link:"main.home_security.camera"}, {name:"\u7d27\u6025\u6309\u94ae", link:"main.home_security.button"}];
  ctrl.permission_submenus = [{name:"\u5382\u5546\u6743\u9650", link:"main.permission.manufactory_permission"}, {name:"\u533b\u751f\u6743\u9650", link:"main.permission.doctor_permission"}];
  ctrl.page_submenus = [{name:"\u4ea7\u54c1\u9875\u9762", link:"main.page.category_system_template"}, {name:"\u5ba2\u6237\u7aef\u5ba3\u4f20\u9875\u9762", link:"main.page.exhibition"}, {name:"\u5ba2\u6237\u7aef\u65b0\u95fb\u9875\u9762", link:"main.page.news"}];
  ctrl.twatch_submenus = [{name:"\u53f7\u7801\u8bbe\u7f6e", link:"main.twatch.number"}, {name:"\u6a21\u5f0f\u8bbe\u7f6e", link:"main.twatch.mode"}, {name:"\u63d0\u9192\u8bbe\u7f6e", link:"main.twatch.alarm"}, {name:"\u8f68\u8ff9\u8bbe\u7f6e", link:"main.twatch.route_setting"}, {name:"\u56f4\u680f\u8bbe\u7f6e", link:"main.twatch.pen"}, {name:"\u4f4d\u7f6e\u67e5\u8be2", link:"main.twatch.loc"}, {name:"\u8fd0\u52a8\u8f68\u8ff9", link:"main.twatch.route"}, {name:"\u4fe1\u606f\u67e5\u8be2", link:"main.twatch.command"}];
  ctrl.user_center_submenus = [{name:"\u4fee\u6539\u8d44\u6599", link:"main.user_center.basics"}, {name:"\u4fee\u6539\u5934\u50cf", link:"main.user_center.avatar"}, {name:"\u4fee\u6539\u5bc6\u7801", link:"main.user_center.password"}];
  $scope.avatarurl = "../../img/shangbiaokuang.png";
  $scope.managerName = "\u7ba1\u7406\u5458\u59d3\u540d";
  $scope.getManagerBasics = function() {
    console.log("\u7ba1\u7406\u5458\u57fa\u672c\u4fe1\u606f\uff01");
    basic.getManagerBasics().then(function(data) {
      if ($scope.validParam(data.success_message.avatar_url)) {
        $scope.avatarurl = data.success_message.avatar_url;
        console.log($scope.avatarurl);
      }
      if ($scope.validParam(data.success_message.full_name)) {
        $scope.managerName = data.success_message.full_name;
      }
      console.log(data);
    }, function(error) {
      $scope.addAlert("danger", "\u6570\u636e\u52a0\u8f7d\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.getManagerBasics();
  $scope.signOut = function() {
    basic.signOut().then(function(data) {
      $window.location.href = "/manager/open";
    }, function(error) {
      console.log(error);
      $window.location.href = "/manager/open";
    });
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  $scope.validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
};
jxmgrsec.main.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxmgrsec.main.page.category_system_template.Ctrl");
jxmgrsec.main.page.category_system_template.Ctrl.$inject = ["$scope", "$http", "$q", "$timeout", "i18nService", "constants", "page", "basic"];
jxmgrsec.main.page.category_system_template.Ctrl = function($scope, $http, i18nService, $q, $timeout, constants, $modal, ModalService, page, basic) {
  this.label = "some label from category template controller";
  var ctrl = this;
  $scope.web = {template:""};
  $scope.getSystemTemplate = function() {
    page.getWebTemplates().then(function(res) {
      console.log(res);
      $scope.web.template = res.template;
    }, function(error) {
      console.log(error);
    });
  };
  $scope.getSystemTemplate();
  $scope.templatefile = undefined;
  var uploadtemplatefile = function() {
    if (validParam($scope.templatefile)) {
      return basic.fileUpload($scope.templatefile).then(function(res) {
        $scope.web.template = res.success_message[0];
        return res;
      }, function(error) {
        console.log(error);
        return error;
      });
    } else {
      return $q.when(0);
    }
  };
  $scope.disabledBtn = false;
  $scope.modifySystemTemplate = function() {
    if (validParam($scope.templatefile)) {
      if (validPic($scope.templatefile, "png|jpg|jpeg|bmp|gif")) {
        $scope.disabledBtn = true;
        var promise = [uploadtemplatefile()];
        return $q.all(promise).then(function() {
          page.modifyWebTemplates($scope.web).then(function(res) {
            $scope.addAlert("success", "\u4fee\u6539\u6210\u529f\uff01");
            $timeout(function() {
              $scope.disabledBtn = false;
            }, 3E3);
          }, function(error) {
            console.log(error);
            $scope.addAlert("danger", "\u4fdd\u5b58\u5931\u8d25,\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
            $scope.disabledBtn = false;
          });
        });
      } else {
        $scope.addAlert("warning", "\u8bf7\u4e0a\u4f20png\u3001jpg\u3001gif\u7c7b\u578b\u7684\u6587\u4ef6\uff01");
      }
    } else {
      $scope.addAlert("warning", "\u8bf7\u9009\u62e9\u6587\u4ef6\uff01");
    }
  };
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  function validPic(file, str) {
    if (file != undefined && file.type != undefined && str != undefined && str != "" && str.length != 0) {
      var suffixs = str.split("|");
      var fileSuf = file.type.split("/");
      var res = suffixs.filter(function(item) {
        return item == fileSuf[1];
      });
      if (res.length != 0) {
        return true;
      }
      return false;
    }
  }
};
jxmgrsec.main.page.category_system_template.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxmgrsec.main.page.exhibition.Ctrl");
jxmgrsec.main.page.exhibition.Ctrl.$inject = ["$scope", "$http", "$q", "i18nService", "constants", "page"];
jxmgrsec.main.page.exhibition.Ctrl = function($scope, $http, i18nService, $q, constants, $modal, ModalService, page) {
  this.label = "some label from category template controller";
  var ctrl = this;
  i18nService.setCurrentLang("zh-CN");
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"exhibition_resource_id", name:"\u5ba3\u4f20\u9875\u8d44\u6e90\u7f16\u53f7", width:"20%", pinnedLeft:true}, {name:"\u56fe\u7247\u94fe\u63a5", width:"50%", cellTemplate:'<a target="_blank" href="{{row.entity.pic_url}}"><img ng-src="{{row.entity.pic_url}}" style="width: 50px"></a>'}, {name:"\u64cd\u4f5c", width:"30%", cellTemplate:'<div class="row"><div class="col-md-offset-1 col-md-2 text-center"><button class="btn btn-primary btn-sm" ng-click="grid.appScope.popup(row.entity)" >\u7f16\u8f91\u5730\u5740</button></div><div class="col-md-offset-2 col-md-2 text-center"><button class="btn btn-primary btn-sm" ng-click="grid.appScope.deleteExhibition(row.entity)">\u5220\u9664\u5ba3\u4f20\u9875</button></div></div>'}], 
  onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.exhibition.current_page = newPage - 1;
      $scope.exhibition.page_size = pageSize;
      $scope.getExhibition();
    });
  }};
  $scope.gridOptions.data = [{"category":"\u624b\u73af", "terminal_number":"01234567", "model_category":"\u7cfb\u7edf\u7c7b\u578b"}, {"category":"\u8840\u538b\u4eea", "terminal_number":"01234567", "model_category":"\u7cfb\u7edf\u7c7b\u578b"}, {"category":"\u624b\u73af", "terminal_number":"01234567", "model_category":"\u81ea\u5b9a\u4e49\u7c7b\u578b"}, {"category":"\u8840\u7cd6\u4eea", "terminal_number":"01234567", "model_category":"\u81ea\u5b9a\u4e49\u7c7b\u578b"}];
  var query_date = -1;
  $scope.exhibition = {page_size:10, current_page:0, query_date:query_date};
  $scope.getExhibition = function() {
    page.getExhibitionResources($scope.exhibition).then(function(res) {
      console.log(res);
      $scope.gridOptions.data = res.resources;
      $scope.gridOptions.totalItems = res.total_count;
      $scope.exhibition.query_date = res.query_date;
    }, function(error) {
      console.log(error);
    });
  };
  $scope.getExhibition();
  var refreshExhibition = {page_size:10, current_page:0, query_date:query_date};
  var refresh = function() {
    page.getExhibitionResources(refreshExhibition).then(function(res) {
      console.log(res);
      $scope.gridOptions.data = res.resources;
      $scope.gridOptions.totalItems = res.total_count;
      $scope.exhibition.query_date = res.query_date;
    }, function(error) {
      console.log(error);
    });
  };
  $scope.deleteExhibition = function(entity) {
    page.deleteExhibitionResources(entity.exhibition_resource_id).then(function(res) {
      console.log(res);
      refresh();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.popup = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/edit_exhi_address_modal/edit_exhi_address_modal.html", controller:"EditExhiAddressModalCtrl", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
      console.log("Modal closed at: " + new Date);
    }, function() {
      console.log("Modal dismissed at: " + new Date);
      refresh();
    });
  };
  ctrl.add = function() {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/add_page_modal/add_page_modal.html", controller:"AddPageModalCtrl"});
    modalInstance.result.then(function() {
    }, function() {
      refresh();
    });
  };
};
jxmgrsec.main.page.exhibition.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxmgrsec.main.page.news.Ctrl");
jxmgrsec.main.page.news.Ctrl.$inject = ["$scope", "$http", "$q", "i18nService", "constants", "page"];
jxmgrsec.main.page.news.Ctrl = function($scope, $http, i18nService, $q, constants, $modal, ModalService, page) {
  this.label = "some label from category template controller";
  var ctrl = this;
  i18nService.setCurrentLang("zh-CN");
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{name:"\u56fe\u7247\u94fe\u63a5", width:"20%", cellTemplate:'<a target="_blank" href="{{row.entity.pic_url}}"><img ng-src="{{row.entity.pic_url}}" style="width: 50px"></a>', pinnedLeft:true}, {name:"\u65b0\u95fb\u94fe\u63a5", width:"45%", cellTemplate:'<a target="_blank" href="{{row.entity.news_link}}"style="font-size: 12px">{{row.entity.news_link}}</a>'}, {name:"\u64cd\u4f5c", 
  width:"30%", cellTemplate:'<div class="row"><div class="col-md-offset-1 col-md-2 text-center"><button class="btn btn-primary btn-sm" ng-click="grid.appScope.popup(row.entity)" >\u7f16\u8f91</button></div><div class="col-md-offset-2 col-md-2 text-center"><button class="btn btn-primary btn-sm" ng-click="grid.appScope.deleteNews(row.entity)">\u5220\u9664\u5ba3\u4f20\u9875</button></div></div>'}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.news.current_page = newPage - 1;
      $scope.news.page_size = pageSize;
      $scope.getNews();
    });
  }};
  var query_date = -1;
  $scope.news = {page_size:10, current_page:0, query_date:query_date};
  $scope.getNews = function() {
    page.getNewResources($scope.news).then(function(res) {
      console.log(res);
      $scope.gridOptions.data = res.news_resources;
      $scope.gridOptions.totalItems = res.total_count;
      $scope.news.query_date = res.query_date;
    }, function(error) {
      console.log(error);
    });
  };
  $scope.getNews();
  var refreshnews = {page_size:10, current_page:0, query_date:query_date};
  var refresh = function() {
    page.getNewResources(refreshnews).then(function(res) {
      console.log(res);
      $scope.gridOptions.data = res.news_resources;
      $scope.gridOptions.totalItems = res.total_count;
      $scope.news.query_date = res.query_date;
    }, function(error) {
      console.log(error);
    });
  };
  $scope.deleteNews = function(entity) {
    page.deleteNewResources(entity.news_resource_id).then(function(res) {
      console.log(res);
      refresh();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.popup = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/edit_news_modal/edit_news_modal.html", controller:"EditNewsModalCtrl", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
      console.log("Modal closed at: " + new Date);
    }, function() {
      console.log("Modal dismissed at: " + new Date);
      refresh();
    });
  };
  ctrl.addNews = function() {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/add_news_modal/add_news_modal.html", controller:"AddNewsModalCtrl"});
    modalInstance.result.then(function() {
    }, function() {
      refresh();
    });
  };
};
jxmgrsec.main.page.news.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxmgrsec.main.page.Ctrl");
jxmgrsec.main.page.Ctrl.$inject = ["$window", "basic"];
jxmgrsec.main.page.Ctrl = function($scope, $window, basic, $timeout) {
  var ctrl = this;
  this.label = "some label from page controller";
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  $scope.validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
};
jxmgrsec.main.page.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxmgrsec.main.permission.doctor_permission.Ctrl");
jxmgrsec.main.permission.doctor_permission.Ctrl.$inject = ["$scope", "$http", "$q", "$filter", "$state", "i18nService", "constants", "doctor"];
jxmgrsec.main.permission.doctor_permission.Ctrl = function($scope, $http, $q, $filter, $state, i18nService, constants, doctor) {
  var ctrl = this;
  ctrl.label = "some label from db operation controller";
  $scope.query_date = {registered_from:new Date("2014/01/01"), registered_to:new Date};
  $scope.query_date.registered_to.setHours(23);
  $scope.query_date.registered_to.setMinutes(59);
  $scope.query_date.registered_to.setSeconds(59);
  $scope.doctor = {full_name:"", registered_from:$scope.query_date.registered_from, registered_to:$scope.query_date.registered_to, page_size:10, current_page:0, query_date:undefined};
  $scope.queryDoctors = function() {
    $scope.doctor.registered_from = $filter("dateTounix")($filter("date")($scope.query_date.registered_from, "yyyy-M-dd H:mm:ss"));
    $scope.doctor.registered_to = $filter("dateTounix")($filter("date")($scope.query_date.registered_to, "yyyy-M-dd H:mm:ss"));
    doctor.getDoctors($scope.doctor).then(function(data) {
      $scope.gridOptions.data = data.doctors;
      $scope.gridOptions.totalItems = data.total_count;
      $scope.doctor.query_date = data.query_date;
    }, function(error) {
      console.log(error);
    });
  };
  i18nService.setCurrentLang("zh-CN");
  $scope.queryDoctors();
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"full_name", name:"\u533b\u751f\u59d3\u540d", width:"25%", pinnedLeft:true}, {field:"registered_at", name:"\u6ce8\u518c\u65f6\u95f4", width:"25%", cellFilter:"unixTodate"}, {field:"status", name:"\u72b6\u6001", width:"25%", cellFilter:"mapDoctorStatus"}, {name:"\u64cd\u4f5c", width:"25%", cellTemplate:'<div class="row ui-grid-cell-contents"><div class="col-md-offset-1 col-md-2"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.editPermission(row.entity)" >\u7f16\u8f91\u6743\u9650</button></div></div>'}], 
  onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.doctor.current_page = newPage - 1;
      $scope.doctor.page_size = pageSize;
      $scope.queryDoctors();
    });
  }};
  $scope.editPermission = function(entity) {
    console.log("\u7f16\u8f91\u6743\u9650");
    console.log(entity);
    var params = {"doctor_id":entity.doctor_id, "full_name":entity.full_name};
    $state.go("main.permission.doctor_permission_list", params);
  };
  $scope.dt = new Date;
  $scope.minDate = new Date("1900/01/01");
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.open1 = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened1 = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[2];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
};
jxmgrsec.main.permission.doctor_permission.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxmgrsec.main.permission.doctor_permission.module");
goog.require("jxmgrsec.main.permission.doctor_permission.Ctrl");
jxmgrsec.main.permission.doctor_permission.module = angular.module("main.permission.doctor_permission", ["ui.router", "ui.grid", "ui.grid.pinning", "ui.grid.resizeColumns", "ui.grid.saveState", "ui.grid.edit", "ui.grid.pagination", "ui.select", "ui.bootstrap", "ngSanitize"]);
jxmgrsec.main.permission.doctor_permission.module.configuration = function($stateProvider) {
  $stateProvider.state("main.permission.doctor_permission", {url:"/doctor_permission", templateUrl:"states/main/permission/doctor_permission/doctor_permission.html", controller:"DoctorPermissionCtrl as doctorPermission"});
};
jxmgrsec.main.permission.doctor_permission.module.config(jxmgrsec.main.permission.doctor_permission.module.configuration).controller("DoctorPermissionCtrl", jxmgrsec.main.permission.doctor_permission.Ctrl);
goog.provide("jxmgrsec.main.permission.doctor_permission_list.Ctrl");
jxmgrsec.main.permission.doctor_permission_list.Ctrl.$inject = ["$scope", "$http", "$q", "$modal", "$stateParams", "$window", "i18nService", "constants", "doctor"];
jxmgrsec.main.permission.doctor_permission_list.Ctrl = function($scope, $http, $q, $stateParams, $modal, $window, i18nService, constants, doctor) {
  var ctrl = this;
  ctrl.label = "some label from db operation controller";
  $scope.doctor_id = $stateParams.doctor_id;
  $scope.full_name = $stateParams.full_name;
  console.log($scope.doctor_id);
  console.log($scope.full_name);
  $scope.pageParams = {page_size:10, current_page:0, query_date:undefined};
  $scope.getDoctorPermissions = function() {
    if ($scope.validParam($scope.doctor_id) && $scope.validParam($scope.pageParams)) {
      doctor.getDoctorPermissions($scope.doctor_id, $scope.pageParams).then(function(data) {
        if ($scope.validParam(data)) {
          $scope.gridOptions.data = data.permission_list;
          $scope.gridOptions.totalItems = data.total_count;
          $scope.pageParams.query_date = data.query_date;
        }
      }, function(error) {
        alert(error);
      });
    } else {
      alert("\u533b\u751fID\u4e0d\u80fd\u4e3a\u7a7a\uff01");
    }
  };
  i18nService.setCurrentLang("zh-CN");
  $scope.getDoctorPermissions();
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"permission_name", name:"\u6743\u9650\u540d\u79f0", width:"15%", pinnedLeft:true}, {field:"district_id", name:"\u533a\u57df\u7f16\u53f7", width:"15%", cellFilter:"mapDistrict"}, {field:"province_id", name:"\u7701\u4efd", width:"15%", cellFilter:"mapProvince"}, {field:"city_id", name:"\u57ce\u5e02", width:"15%", cellFilter:"mapCity"}, {field:"zone_id", name:"\u533a\u53bf", 
  width:"15%", cellFilter:"mapZone"}, {field:"data_type", name:"\u6570\u636e\u7c7b\u578b", width:"15%", cellFilter:"mapDataType"}, {name:"\u7b5b\u9009\u6761\u4ef6", width:"10%", cellTemplate:'<div class="row ui-grid-cell-contents"><div class="col-md-offset-1 col-md-2"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.editPermission(row.entity)" >\u7f16\u8f91</button></div></div>'}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.pageParams.current_page = newPage - 1;
      $scope.pageParams.page_size = pageSize;
      $scope.getDoctorPermissions();
    });
  }};
  $scope.editPermission = function(entity) {
    var modalInstance = $modal.open({animation:$scope.animationsEnabled, templateUrl:"components/tpls/doctor_permission_modal/edit_doctor_permission_modal/edit_doctor_permission_modal.html", controller:"EditDoctorPermissionModalCtrl as editDocPermissionModalCtrl", size:"lg", resolve:{entity:function() {
      return entity;
    }, doctor_id:function() {
      return $scope.doctor_id;
    }}});
    modalInstance.result.then(function() {
      console.log("Modal closed at: " + new Date);
    }, function() {
    });
  };
  $scope.openAddPermissionModal = function() {
    var modalInstance = $modal.open({animation:$scope.animationsEnabled, templateUrl:"components/tpls/doctor_permission_modal/add_doctor_permission_modal/add_doctor_permission_modal.html", controller:"AddDoctorPermissionModalCtrl as addDocPermissionModalCtrl", size:"lg", resolve:{doctor_id:function() {
      return $scope.doctor_id;
    }}});
    modalInstance.result.then(function() {
      console.log("Modal closed at: " + new Date);
    }, function() {
      $scope.getDoctorPermissions();
    });
  };
};
jxmgrsec.main.permission.doctor_permission_list.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxmgrsec.main.permission.manufactory_permission.Ctrl");
jxmgrsec.main.permission.manufactory_permission.Ctrl.$inject = ["$scope", "$http", "$q", "$filter", "$modal", "i18nService", "constants", "manufactory"];
jxmgrsec.main.permission.manufactory_permission.Ctrl = function($scope, $http, $q, $filter, $modal, i18nService, constants, manufactory) {
  var ctrl = this;
  ctrl.label = "some label from manufactory permission controller";
  $scope.query_date = {registered_from:new Date("2014/01/01"), registered_to:new Date};
  $scope.query_date.registered_to.setHours(23);
  $scope.query_date.registered_to.setMinutes(59);
  $scope.query_date.registered_to.setSeconds(59);
  $scope.manufactory = {manufactory_name:undefined, device_type_ids:undefined, registered_from:$scope.query_date.registered_from, registered_to:$scope.query_date.registered_to, page_size:10, current_page:0, query_date:undefined};
  $scope.device_types = constants.gotDEVICETYPES();
  $scope.queryManufactory = function() {
    $scope.manufactory.registered_from = $filter("dateTounix")($filter("date")($scope.query_date.registered_from, "yyyy-M-dd H:mm:ss"));
    $scope.manufactory.registered_to = $filter("dateTounix")($filter("date")($scope.query_date.registered_to, "yyyy-M-dd H:mm:ss"));
    manufactory.getManufactories($scope.manufactory).then(function(data) {
      if ($scope.validParam(data.manufactories.length)) {
        for (var j = 0;j < data.manufactories.length;j++) {
          if ($scope.validParam(data.manufactories[j].device_type_ids.length && data.manufactories[j].device_type_ids.length != 0)) {
            var device_types = data.manufactories[j].device_type_ids;
            var device_types_str = "";
            for (var i = 0;i < device_types.length;i++) {
              device_types_str += $filter("mapDeviceType")(device_types[i]) + ", ";
            }
            data.manufactories[j].device_type_str = device_types_str;
          } else {
            if (data.manufactories[j].device_type_ids.length == 0) {
              data.manufactories[j].device_type_str = "\u65e0";
            }
          }
        }
      }
      $scope.gridOptions.data = data.manufactories;
      $scope.gridOptions.totalItems = data.total_count;
      $scope.manufactory.query_date = data.query_date;
      console.log(data);
    }, function(error) {
      console.log(error);
    });
  };
  $scope.queryManufactory();
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"manufactory_name", name:"\u5382\u5546\u540d\u79f0", width:"20%", pinnedLeft:true}, {field:"registered_at", name:"\u6ce8\u518c\u65f6\u95f4", width:"25%", cellFilter:"unixTodate"}, {field:"device_type_str", name:"\u8bbe\u5907\u7c7b\u578b", width:"20%", cellFilter:""}, {field:"status", name:"\u72b6\u6001", width:"20%", cellFilter:"mapManufactoryStatus"}, {name:"\u64cd\u4f5c", 
  width:"20%", cellTemplate:'<div class="row ui-grid-cell-contents"><div class="col-md-offset-1 col-md-2"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.editManufactory(row.entity)" >\u7f16\u8f91</button></div></div>'}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.manufactory.current_page = newPage - 1;
      $scope.manufactory.page_size = pageSize;
      $scope.queryManufactory();
    });
  }};
  $scope.editManufactory = function(entity) {
    var modalInstance = $modal.open({animation:$scope.animationsEnabled, templateUrl:"components/tpls/manufactory_permission_modal/edit_manufactory_permission_modal/edit_manufactory_permission_modal.html", controller:"EditManufactoryPermissionModalCtrl as editManPermissionModalCtrl", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
      console.log("Modal closed at: " + new Date);
    }, function() {
      $scope.queryManufactory();
    });
  };
  $scope.dt = new Date;
  $scope.minDate = new Date("1900/01/01");
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.open1 = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened1 = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[2];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
};
jxmgrsec.main.permission.manufactory_permission.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxmgrsec.main.permission.Ctrl");
jxmgrsec.main.permission.Ctrl = function() {
  this.label = "some label from db operation controller";
};
jxmgrsec.main.permission.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxmgrsec.main.push_message.Ctrl");
jxmgrsec.main.push_message.Ctrl.$inject = ["$scope", "$http", "$q", "i18nService", "constants", "push_message"];
jxmgrsec.main.push_message.Ctrl = function($scope, $http, $q, $timeout, i18nService, constants, $modal, push_message) {
  this.label = "some other label from main.push_message controller";
  var ctrl = this;
  $scope.device_types = constants.gotDEVICETYPES();
  i18nService.setCurrentLang("zh-CN");
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"terminal_catagory_name", name:"\u7ec8\u7aef\u578b\u53f7\u540d\u79f0", width:"25%"}, {field:"device_type_id", name:"\u8bbe\u5907\u7c7b\u578b", width:"20%", cellFilter:"mapDeviceType"}, {field:"manufactory_name", name:"\u5382\u5546\u540d\u79f0", width:"30%", pinnedLeft:true}, {name:"\u64cd\u4f5c", width:"25%", cellTemplate:'<div class="row"><div class="col-md-offset-1 col-md-2 text-center"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.popup(row.entity)" >\u63a8\u9001</button></div></div>'}], 
  onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.catagoryList.current_page = newPage - 1;
      $scope.catagoryList.page_size = pageSize;
      $scope.queryCatagoryList();
    });
  }};
  var query_date = -1;
  $scope.catagoryList = {manufactory_name:undefined, device_type_id:undefined, terminal_catagory_name:undefined, page_size:10, current_page:0, query_date:query_date};
  $scope.queryCatagoryList = function() {
    push_message.getCatagoryList($scope.catagoryList).then(function(res) {
      $scope.gridOptions.data = res.catagories;
      $scope.gridOptions.totalItems = res.total_count;
      $scope.catagoryList.query_date = res.query_date;
    }, function(error) {
      console.log(error);
    });
  };
  $scope.queryCatagoryList();
  $scope.popup = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/show_push_message_modal/show_push_message_modal.html", controller:"ShowPushMessageModalCtrl", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
    }, function() {
    });
  };
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
jxmgrsec.main.push_message.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxmgrsec.main.twatch.alarm.Ctrl");
jxmgrsec.main.twatch.alarm.Ctrl.$inject = ["$rootScope", "$scope", "$http", "$modal", "$timeout", "$state", "$filter", "$q", "i18nService", "constants", "twatch"];
jxmgrsec.main.twatch.alarm.Ctrl = function($rootScope, $scope, $timeout, $http, $modal, $state, $filter, $q, i18nService, constants, twatch) {
  this.label = "some other label from main.twatch.alarm controller";
  var ctrl = this;
  i18nService.setCurrentLang("zh-CN");
  $scope.gridOptions = {paginationPageSizes:[25, 50, 75], paginationPageSize:25, columnDefs:[{field:"eventname", name:"\u63d0\u9192\u4e8b\u4ef6", width:"15%", cellFilter:"mapTwatchAlarmEvent", pinnedLeft:true}, {field:"start", name:"\u5f00\u59cb\u65f6\u95f4", width:"15%", pinnedLeft:true}, {field:"msg", name:"\u5185\u5bb9", width:"15%", pinnedLeft:true}, {field:"times", name:"\u95f4\u9694", width:"10%", pinnedLeft:true}, {field:"interval", name:"\u6b21\u6570", width:"10%", pinnedLeft:true}, {field:"weeks", 
  name:"\u661f\u671f\u51e0", width:"10%", cellFilter:"mapWeekDays", pinnedLeft:true}, {field:"playvoice_en", name:"\u6fc0\u6d3b\u72b6\u6001", width:"10%", cellFilter:"mapTwatchPeriodState", pinnedLeft:true}, {name:"\u64cd\u4f5c", width:"15%", cellTemplate:'<div class="row ui-grid-cell-contents"><div class="col-md-offset-1 col-md-2 text-center"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.modifyAlarm(row.entity)">\u4fee\u6539</button><button class="btn btn-primary btn-xs" ng-click="grid.appScope.removeAlarm(row.entity)">\u5220\u9664</button></div></div>', 
  pinnedRight:true}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
  }};
  $scope.query = {imei:$rootScope.imei};
  $scope.jsonImei = {imei:undefined};
  $scope.queryImei = function() {
    $scope.jsonImei.imei = $scope.query.imei;
    $scope.queryPlayVoice();
  };
  $scope.queryPlayVoice = function() {
    twatch.getPlayVoices($scope.jsonImei).then(function(res) {
      console.log(res);
      if (res == "" || res == undefined || res == null) {
        $scope.addAlert("danger", "\u6682\u65e0\u63d0\u9192\u8bbe\u7f6e\uff0c\u8bf7\u70b9\u51fb\u6dfb\u52a0\u63d0\u9192");
      } else {
        $scope.gridOptions.data = res;
      }
      $rootScope.imeiChanged($scope.jsonImei.imei);
    }, function(error) {
      console.log(error);
    });
  };
  $scope.modifyAlarm = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/voice_modal/modify_voice_pieroid_modal.html", controller:"ModifyVoicePieroidModalCtrl", resolve:{entity:function() {
      return entity;
    }, imei:function() {
      return $scope.jsonImei.imei;
    }}});
    modalInstance.result.then(function() {
    }, function() {
      $scope.queryPlayVoice();
    });
  };
  $scope.removeAlarm = function(entity) {
    var deleteperiod = {imei:$scope.jsonImei.imei, eventname:entity.eventname, eventid:entity.eventid};
    twatch.deletePlayVoices(deleteperiod).then(function(res) {
      console.log(res);
      $scope.queryPlayVoice();
    }, function(error) {
      console.log(error);
    });
  };
  ctrl.addAlert = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/voice_modal/add_voice_pieroid_modal.html", controller:"AddVoicePieroidModalCtrl", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
    }, function() {
      $scope.queryPlayVoice();
    });
  };
};
goog.provide("jxmgrsec.main.twatch.command.Ctrl");
jxmgrsec.main.twatch.command.Ctrl.$inject = ["$rootScope", "$scope", "$http", "$modal", "$timeout", "i18nService", "ModalService", "$filter", "twatch"];
jxmgrsec.main.twatch.command.Ctrl = function($rootScope, $scope, $http, $modal, $filter, i18nService, ModalService, twatch, $timeout) {
  this.label = "some other label from main.twatch.command controller";
  var ctrl = this;
  console.log($rootScope.imei);
  i18nService.setCurrentLang("zh-CN");
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"number", name:"\u672c\u673a\u53f7\u7801", width:"25%", pinnedLeft:true}, {field:"happended_at", name:"\u53d1\u9001\u65f6\u95f4", width:"25%"}, {field:"content", name:"\u53d1\u9001\u5185\u5bb9", width:"25%"}, {field:"command", name:"\u529f\u80fd\u8bf4\u660e", width:"25%"}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.commandparam.current_page = newPage - 1;
      $scope.commandparam.page_size = pageSize;
      $scope.queryCommand();
    });
  }};
  $scope.query_date = {begin_date:new Date("2014-01-01"), end_date:new Date};
  $scope.query_date.end_date.setHours(23);
  $scope.query_date.end_date.setMinutes(59);
  $scope.query_date.end_date.setSeconds(59);
  var query_date = -1;
  $scope.commandparam = {imei:$rootScope.imei, begin_date:$scope.query_date.begin_date, end_date:$scope.query_date.end_date, page_size:10, current_page:0, query_date:query_date};
  $scope.queryCommand = function() {
    $scope.commandparam.begin_date = $filter("dateTounix")($filter("date")($scope.query_date.begin_date, "yyyy-M-dd H:mm:ss"));
    $scope.commandparam.end_date = $filter("dateTounix")($filter("date")($scope.query_date.end_date, "yyyy-M-dd H:mm:ss"));
    if ($scope.validParam($rootScope.imei)) {
      $scope.commandparam.imei = $rootScope.imei;
    }
    if ($scope.validParam($scope.commandparam.imei)) {
      twatch.getCommands($scope.commandparam).then(function(res) {
        console.log(res);
        if (res.commands == "" || res.commands == undefined || res.commands == null) {
          $scope.addAlert("danger", "\u6240\u9009\u65e5\u671f\u8303\u56f4\u5185\u6682\u65e0\u6307\u4ee4\u6d88\u606f");
        } else {
          $scope.gridOptions.data = res.commands;
          $scope.gridOptions.totalItems = res.total_count;
          $scope.commandparam.query_date = res.query_date;
        }
        $rootScope.imeiChanged($scope.commandparam.imei);
      }, function(error) {
        console.log(error);
      });
    } else {
      $scope.addAlert("danger", "\u8bf7\u5148\u8f93\u5165IMEI\u53f7\u518d\u67e5\u8be2\uff01");
    }
  };
  $scope.dt = new Date;
  $scope.minDate = new Date("1900/01/01");
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.open1 = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened1 = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[2];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxmgrsec.main.twatch.command.module");
goog.require("jxmgrsec.main.twatch.command.Ctrl");
jxmgrsec.main.twatch.command.module = angular.module("main.twatch.command", ["ui.router"]);
jxmgrsec.main.twatch.command.module.configuration = function($stateProvider) {
  $stateProvider.state("main.twatch.command", {url:"/command", templateUrl:"states/main/twatch/command/command.html", controller:"CommandCtrl as command"});
};
jxmgrsec.main.twatch.command.module.config(jxmgrsec.main.twatch.command.module.configuration).controller("CommandCtrl", jxmgrsec.main.twatch.command.Ctrl);
goog.provide("jxmgrsec.main.twatch.loc.Ctrl");
jxmgrsec.main.twatch.loc.Ctrl.$inject = ["$rootScope", "$scope", "$http", "$modal", "$state", "$filter", "$q", "$ocLazyLoad", "i18nService", "ModalService", "constants", "twatch", "$timeout"];
jxmgrsec.main.twatch.loc.Ctrl = function($rootScope, $scope, $http, $modal, $state, $filter, $q, $ocLazyLoad, i18nService, ModalService, constants, twatch, $timeout) {
  this.label = "some other label from main.twatch.loc controller";
  var ctrl = this;
  i18nService.setCurrentLang("zh-CN");
  $scope.locSearchData = {imei:$rootScope.imei, begin_date:undefined, end_date:undefined, page_size:10, current_page:0, query_date:undefined};
  $scope.tempArray = [];
  $scope.phones = [];
  $scope.monitorData = {imei:"", rec_number:undefined};
  $scope.gridOptions = {useExternalPagination:true, paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10};
  $scope.gridOptions.columnDefs = [{field:"date", name:"\u5b9a\u4f4d\u65e5\u671f", width:"20%", pinnedLeft:true, cellFilter:"unixTodate"}, {field:"sub_mode", name:"\u4e0a\u4f20\u65b9\u5f0f", width:"20%"}, {field:"count", name:"\u603b\u5b9a\u4f4d\u6570\u91cf", width:"15%"}, {field:"inner_count", name:"\u5b89\u5168\u533a\u57df\u5185", width:"15%"}, {field:"outer_count", name:"\u5b89\u5168\u533a\u57df\u5916", width:"15%"}, {filed:"locations", name:"\u4f4d\u7f6e\u4fe1\u606f\u961f\u5217", width:"15%"}, 
  {name:"\u64cd\u4f5c", width:"15%", cellTemplate:'<div class="row ui-grid-cell-contents"><div class="col-md-offset-1 col-md-2"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.showOnMap(row.entity)" >\u5728\u5730\u56fe\u4e0a\u542b\u67e5\u770b</button></div></div>', pinnedRight:true}];
  $scope.gridOptions.onRegisterApi = function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.locSearchData.current_page = newPage - 1;
      $scope.locSearchData.page_size = pageSize;
      $scope.getLocations();
    });
  };
  $scope.getLocations = function() {
    console.log($scope.locSearchData);
    if (!validParam($scope.locSearchData.imei)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165IMEI\u53f7\u7801");
      return;
    }
    $scope.locSearchData.begin_date = $filter("dateTounix")($filter("date")($scope.query_date.from, "yyyy-M-dd H:mm:ss"));
    $scope.locSearchData.end_date = $filter("dateTounix")($filter("date")($scope.query_date.to, "yyyy-M-dd H:mm:ss"));
    if ($scope.locSearchData.begin_date > $scope.locSearchData.end_date) {
      $scope.addAlert("danger", "\u5f00\u59cb\u65f6\u95f4\u4e0d\u80fd\u65e9\u4e8e\u7ed3\u675f\u65f6\u95f4");
      return;
    }
    $scope.monitorData.imei = $scope.locSearchData.imei;
    $rootScope.imeiChanged($scope.locSearchData.imei);
    twatch.getLocations($scope.locSearchData).then(function(res) {
      console.log(res);
      $scope.gridOptions.data = res.day_locations;
      $scope.query_date.query_date = res.query_date;
      $scope.gridOptions.totalItems = res.total_count;
      if (validParam($scope.monitorData.imei)) {
        $scope.getPhones();
      }
    });
  };
  $scope.unique = function(input) {
    input.sort();
    var re = [input[0]];
    for (var i = 1;i < input.length;i++) {
      if (this[i] !== re[re.length - 1]) {
        re.push(input[i]);
      }
    }
    return re;
  };
  function getArray(array) {
    var hash = {}, len = array.length, result = [];
    for (var i = 0;i < len;i++) {
      if (!hash[array[i]]) {
        hash[array[i]] = true;
        result.push(array[i]);
      }
    }
    return result;
  }
  $scope.getPhones = function() {
    var reqData = {imei:undefined};
    reqData.imei = $scope.monitorData.imei;
    console.log(reqData);
    twatch.getWhiteList(reqData).then(function(res) {
      console.log(res);
      if (!validParam(res.whitelist)) {
        return;
      }
      for (var i = 0;i < res.whitelist.length;i++) {
        $scope.tempArray.push(res.whitelist[i].number);
      }
    });
    twatch.getNumbers(reqData).then(function(res) {
      console.log(res);
      if (validParam(res.qing1)) {
        $scope.tempArray.push(res.qing1);
      }
      if (validParam(res.qing2)) {
        $scope.tempArray.push(res.qing2);
      }
      if (validParam(res.qing3)) {
        $scope.tempArray.push(res.qing3);
      }
      if (validParam(res.qing4)) {
        $scope.tempArray.push(res.qing4);
      }
      if (validParam(res.sos)) {
        $scope.tempArray.push(res.sos);
      }
      $scope.phones = getArray($scope.tempArray);
    });
  };
  $scope.getCurentLocation = function() {
    var reqData = {imei:undefined};
    reqData.imei = $scope.monitorData.imei;
    if (validParam(reqData.imei)) {
      twatch.getCurLocation(reqData).then(function(res) {
        $scope.addAlert("success", "\u83b7\u53d6\u5f53\u524d\u4f4d\u7f6e\u6210\u529f");
      });
    }
  };
  $scope.monitor = function() {
    if (!validParam($scope.monitorData.imei)) {
      return;
    }
    if (!validParam($scope.monitorData.rec_number)) {
      $scope.addAlert("danger", "\u8bf7\u9009\u62e9\u63a5\u53d7\u53f7\u7801");
      return;
    }
    twatch.getMonitor($scope.monitorData).then(function(res) {
      $scope.addAlert("success", "\u5b9e\u65f6\u76d1\u542c\u6210\u529f");
    });
  };
  var map;
  var marker;
  var circle;
  var polygon;
  var count = 0;
  var longLans = [];
  function onload() {
    map = new BMap.Map("map_canvas");
    var point = new BMap.Point(118.784406, 31.98078);
    map.centerAndZoom(point, 14);
    map.addControl(new BMap.NavigationControl);
    map.addControl(new BMap.MapTypeControl);
    map.setDefaultCursor("crosshair");
    map.enableScrollWheelZoom();
    var myCity = new BMap.LocalCity;
    function iploac(result) {
      console.log("result");
      console.log(result);
      var cityName = result.name;
      map.setCenter(cityName);
    }
    myCity.get(iploac);
  }
  $ocLazyLoad.load([{files:["js!http://api.map.baidu.com/getscript?v=2.0&ak=1ioiKRqWB1EeDjtyka2fSfQ3"], cache:true}]).then(function(data) {
    onload();
  }, function(data) {
  });
  var drawMarker = function(lng, lat) {
    if ($scope.validParam(lng) && $scope.validParam(lat)) {
      var point = new BMap.Point(lng, lat);
      longLans.push(point);
      var marker = new BMap.Marker(point);
      map.addOverlay(marker);
      marker.addEventListener("click", attribute);
    }
  };
  function attribute(e) {
    var p = e.target;
    console.log(p.getPosition());
  }
  $scope.showOnMap = function(entity) {
    console.log(entity);
    if ($scope.validParam(entity.locations) && entity.locations.length != 0) {
      for (var i = 0;i < entity.locations.length;i++) {
        drawMarker(entity.locations[i].longitute, entity.locations[i].latitude);
      }
      map.setViewport(longLans);
    } else {
      alert("\u5750\u6807\u70b9\u4e0d\u53ef\u7528\uff01");
    }
  };
  $scope.dt = new Date;
  $scope.query_date = {from:new Date("2014-01-01"), to:new Date};
  $scope.query_date.to.setHours(23);
  $scope.query_date.to.setMinutes(59);
  $scope.query_date.to.setSeconds(59);
  $scope.open_form_from = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.from_opened = true;
  };
  $scope.open_form_to = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.to_opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  function activate() {
    var promises = [$scope.regetManusByName()];
    return $q.all(promises).then(function() {
    });
  }
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
};
goog.provide("jxmgrsec.main.twatch.loc.module");
goog.require("jxmgrsec.main.twatch.loc.Ctrl");
jxmgrsec.main.twatch.loc.module = angular.module("main.twatch.loc", ["ui.router", "oc.lazyLoad"]);
jxmgrsec.main.twatch.loc.module.configuration = function($stateProvider) {
  $stateProvider.state("main.twatch.loc", {url:"/loc", templateUrl:"states/main/twatch/loc/loc.html", controller:"LocCtrl as loc"});
};
jxmgrsec.main.twatch.loc.module.config(jxmgrsec.main.twatch.loc.module.configuration).controller("LocCtrl", jxmgrsec.main.twatch.loc.Ctrl);
goog.provide("jxmgrsec.main.twatch.mode.Ctrl");
jxmgrsec.main.twatch.mode.Ctrl.$inject = ["$rootScope", "$scope", "$http", "$modal", "$filter", "$q", "i18nService", "ModalService", "constants", "twatch"];
jxmgrsec.main.twatch.mode.Ctrl = function($rootScope, $scope, $http, $modal, $filter, $q, i18nService, ModalService, constants, twatch) {
  this.label = "some other label from main.twatch.mode controller";
  var ctrl = this;
  $scope.work_modes = constants.gotWORKMODES();
  $scope.work_types = constants.gotWORKTYPES();
  $scope.alarm_events = constants.gotALARMEVENTS();
  console.log($scope.work_modes);
  console.log($scope.work_types);
  console.log($scope.alarm_events);
  $scope.savemode = {imei:$rootScope.imei, defaultmode:undefined};
  var getDefaultmode = function() {
    if ($scope.mode.defaulttype_selected == 2) {
      $scope.savemode.defaultmode = 5;
    } else {
      if ($scope.mode.defaulttype_selected == 1) {
        $scope.savemode.defaultmode = $scope.mode.defaultmode_selected;
      }
    }
  };
  $scope.saveModeSet = function() {
    $scope.savemode.imei = $rootScope.imei;
    getDefaultmode();
    twatch.setModeset($scope.savemode).then(function(res) {
      $scope.queryModeSet();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.query = {imei:$rootScope.imei};
  $scope.jsonImei = {imei:$rootScope.imei};
  $scope.queryModeSet = function() {
    return twatch.getModeset($scope.jsonImei).then(function(res) {
      console.log(res);
      $scope.gridPieroids.data = res.periods;
      $rootScope.imeiChanged($scope.jsonImei.imei);
      if (5 == res.defaultmode) {
        $scope.mode.defaulttype_selected = 2;
        $scope.mode.defaultmode_selected = 4;
      } else {
        $scope.mode.defaulttype_selected = 1;
        $scope.mode.defaultmode_selected = res.defaultmode;
      }
    }, function(error) {
      console.log(error);
    });
  };
  $scope.queryImei = function() {
    $scope.jsonImei.imei = $scope.query.imei;
    $scope.queryModeSet();
    $scope.getWhite();
    $scope.getBlack();
  };
  i18nService.setCurrentLang("zh-CN");
  $scope.gridPieroids = {paginationPageSizes:[25, 50, 75], paginationPageSize:25, columnDefs:[{field:"period_id", name:"\u65f6\u6bb5\u7f16\u53f7", width:"10%", pinnedLeft:true}, {field:"start", name:"\u5f00\u59cb\u65f6\u95f4", width:"20%"}, {field:"stop", name:"\u7ed3\u675f\u65f6\u95f4", width:"20%"}, {field:"weeks", name:"\u661f\u671f\u51e0", width:"10%", cellFilter:"mapWeekDays"}, {field:"runmode", name:"\u65f6\u6bb5\u6a21\u5f0f", width:"20%", cellFilter:"mapTwatchWorkMode"}, {name:"\u64cd\u4f5c", 
  width:"20%", cellTemplate:'<div class="row"><div class="col-md-offset-1 col-md-2 text-center"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.modifyPieroid(row.entity)" >\u4fee\u6539</button></div><div class="col-md-offset-2 col-md-2 text-center"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.deletePieroid(row.entity)">\u5220\u9664</button></div></div>'}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
  }};
  $scope.modifyPieroid = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/mode_modal/modify_mode_pieroid_modal.html", controller:"ModifyModePieroidModalCtrl", resolve:{entity:function() {
      return entity;
    }, imei:function() {
      return $scope.jsonImei.imei;
    }}});
    modalInstance.result.then(function() {
    }, function() {
      $scope.queryModeSet();
    });
  };
  $scope.deletePieroid = function(entity) {
    var deleteperiod = {imei:$scope.jsonImei.imei, period_id:entity.period_id};
    twatch.deleteModePeriods(deleteperiod).then(function(res) {
      console.log(res);
      $scope.queryModeSet();
    }, function(error) {
      console.log(error);
    });
  };
  ctrl.addPieroid = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/mode_modal/add_mode_pieroid_modal.html", controller:"AddModePieroidModalCtrl", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
    }, function() {
      $scope.queryModeSet();
    });
  };
  $scope.getWhite = function() {
    twatch.getWhiteList($scope.jsonImei).then(function(res) {
      console.log(res);
      $scope.gridWhiteList.data = res.whitelist;
    }, function(error) {
      console.log(error);
    });
  };
  $scope.gridWhiteList = {paginationPageSizes:[25, 50, 75], paginationPageSize:25, columnDefs:[{field:"name", name:"\u59d3\u540d", width:"33%", pinnedLeft:true}, {field:"number", name:"\u53f7\u7801", width:"33%"}, {name:"\u64cd\u4f5c", width:"34%", cellTemplate:'<div class="row"><div class="col-md-offset-1 col-md-2 text-center"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.modifyWhiteName(row.entity)" >\u4fee\u6539</button></div><div class="col-md-offset-2 col-md-2 text-center"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.deleteWhiteName(row.entity)">\u5220\u9664</button></div></div>'}], 
  onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
  }};
  $scope.modifyWhiteName = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/mode_modal/modify_mode_whitename_modal.html", controller:"ModifyModeWhitenameModalCtrl", resolve:{entity:function() {
      return entity;
    }, griddata:function() {
      return $scope.gridWhiteList.data;
    }, imei:function() {
      return $scope.jsonImei.imei;
    }}});
    modalInstance.result.then(function() {
    }, function() {
      $scope.getWhite();
    });
  };
  $scope.deleteWhiteName = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/mode_modal/delete_mode_whitename_modal.html", controller:"DeleteModeWhitenameModalCtrl", resolve:{entity:function() {
      return entity;
    }, griddata:function() {
      return $scope.gridWhiteList.data;
    }, imei:function() {
      return $scope.jsonImei.imei;
    }}});
    modalInstance.result.then(function() {
    }, function() {
      $scope.getWhite();
    });
  };
  ctrl.addWhiteName = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/mode_modal/add_mode_whitename_modal.html", controller:"AddModeWhitenameModalCtrl", resolve:{entity:function() {
      return entity;
    }, imei:function() {
      return $scope.jsonImei.imei;
    }}});
    modalInstance.result.then(function() {
    }, function() {
      $scope.getWhite();
    });
  };
  $scope.getBlack = function() {
    twatch.getBlackList($scope.jsonImei).then(function(res) {
      console.log(res);
      $scope.gridBlackList.data = res.blacklist;
    }, function(error) {
      console.log(error);
    });
  };
  $scope.gridBlackList = {paginationPageSizes:[25, 50, 75], paginationPageSize:25, columnDefs:[{field:"name", name:"\u59d3\u540d", width:"33%", pinnedLeft:true}, {field:"number", name:"\u53f7\u7801", width:"33%"}, {name:"\u64cd\u4f5c", width:"34%", cellTemplate:'<div class="row"><div class="col-md-offset-1 col-md-2 text-center"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.modifyBlackName(row.entity)" >\u4fee\u6539</button></div><div class="col-md-offset-2 col-md-2 text-center"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.deleteBlackName(row.entity)">\u5220\u9664</button></div></div>'}], 
  onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
  }};
  $scope.modifyBlackName = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/mode_modal/modify_mode_blackname_modal.html", controller:"ModifyModeBlacknameModalCtrl", resolve:{entity:function() {
      return entity;
    }, griddata:function() {
      return $scope.gridBlackList.data;
    }, imei:function() {
      return $scope.jsonImei.imei;
    }}});
    modalInstance.result.then(function() {
    }, function() {
      $scope.getBlack();
    });
  };
  $scope.deleteBlackName = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/mode_modal/delete_mode_blackname_modal.html", controller:"DeleteModeBlacknameModalCtrl", resolve:{entity:function() {
      return entity;
    }, griddata:function() {
      return $scope.gridBlackList.data;
    }, imei:function() {
      return $scope.jsonImei.imei;
    }}});
    modalInstance.result.then(function() {
    }, function() {
      $scope.getBlack();
    });
  };
  ctrl.addBlackName = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/mode_modal/add_mode_blackname_modal.html", controller:"AddModeBlacknameModalCtrl", resolve:{entity:function() {
      return entity;
    }, imei:function() {
      return $scope.jsonImei.imei;
    }}});
    modalInstance.result.then(function() {
    }, function() {
      $scope.getBlack();
    });
  };
  ctrl.defaultmode_selected = {selected:0, defaulttype_selected:0};
};
goog.provide("jxmgrsec.main.twatch.number.Ctrl");
jxmgrsec.main.twatch.number.Ctrl.$inject = ["$rootScope", "$scope", "$http", "$modal", "$state", "$filter", "$q", "i18nService", "constants", "twatch", "$timeout"];
jxmgrsec.main.twatch.number.Ctrl = function($rootScope, $scope, $http, $modal, $state, $filter, $q, i18nService, constants, twatch, $timeout) {
  this.label = "some other label from main.twatch.number controller";
  var ctrl = this;
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:false, columnDefs:[{field:"key", name:"\u6309\u952e", width:"15%", pinnedLeft:true}, {field:"name", name:"\u79f0\u547c", width:"15%", pinnedLeft:true}, {field:"number", name:"\u53f7\u7801", width:"15%", pinnedLeft:true}, {name:"\u64cd\u4f5c", width:"15%", cellTemplate:'<div class="row ui-grid-cell-contents"><div class="col-md-offset-1 col-md-2 text-center"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.modifyNumber(row.entity)">\u4fee\u6539\u4eb2\u60c5\u53f7\u7801</button></div></div>', 
  pinnedRight:true}, {field:"description", name:"\u8bf4\u660e", width:"40%", pinnedLeft:true}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
  }};
  i18nService.setCurrentLang("zh-CN");
  ctrl.imei1 = $rootScope.imei;
  ctrl.imei2 = undefined;
  $scope.queryFile = function() {
    twatch.getNumbers({imei:ctrl.imei1}).then(function(data) {
      $scope.gridOptions.data = [{"key":1, "name":$filter("mapTwatchQingName")(data.name1), "number":data.qing1, "description":"\u7b2c1\u76d1\u62a4\u4eba\u53f7\u7801\u5bf9\u5e948\u70b9\u4f4d\u6309\u952e"}, {"key":2, "name":$filter("mapTwatchQingName")(data.name2), "number":data.qing2, "description":"\u7b2c2\u76d1\u62a4\u4eba\u53f7\u7801\u5bf9\u5e942\u70b9\u4f4d\u6309\u952e"}, {"key":3, "name":$filter("mapTwatchQingName")(data.name3), "number":data.qing3, "description":"\u7b2c3\u76d1\u62a4\u4eba\u53f7\u7801\u5bf9\u5e944\u70b9\u4f4d\u6309\u952e"}, 
      {"key":4, "name":$filter("mapTwatchQingName")(data.name4), "number":data.qing4, "description":"\u7b2c4\u76d1\u62a4\u4eba\u53f7\u7801\u5bf9\u5e94\u5f00\u673a\u952e"}, {"key":5, "name":$filter("mapTwatchSosName")(data.sosname + 1), "number":data.sos, "description":"SOS \u957f\u63092\u70b9\u4f4d\u6309\u952e"}];
      ctrl.imei2 = ctrl.imei1;
      $rootScope.imeiChanged(ctrl.imei1);
    });
  };
  $scope.submit = function() {
    var gridData = $scope.gridOptions.data;
    var jsonData = {imei:ctrl.imei2, name1:$scope.guardPeople(gridData[0].name), qing1:gridData[0].number, name2:$scope.guardPeople(gridData[1].name), qing2:gridData[1].number, name3:$scope.guardPeople(gridData[2].name), qing3:gridData[2].number, name4:$scope.guardPeople(gridData[3].name), qing4:gridData[3].number, sosname:0, sos:gridData[4].number};
    twatch.postNumbers(jsonData).then(function(succ) {
      $scope.addAlert("success", "\u63d0\u4ea4\u6210\u529f");
    }, function(error) {
      console.log(error);
      $scope.addAlert("danger", "\u63d0\u4ea4\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.guardPeople = function(name) {
    var res;
    switch(name) {
      case "\u7238\u7238":
        res = 1;
        break;
      case "\u5988\u5988":
        res = 2;
        break;
      case "\u7237\u7237":
        res = 3;
        break;
      case "\u5976\u5976":
        res = 4;
        break;
      case "\u8001\u5e08":
        res = 5;
        break;
      case "\u540c\u5b66":
        res = 6;
        break;
      case "\u7535\u8bdd":
        res = 7;
        break;
    }
    return res;
  };
  $scope.modifyNumber = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/modify_number_modal/modify_number_modal.html", controller:"ModifyNumberModalCtrl", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
    }, function() {
    });
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxmgrsec.main.twatch.pen.Ctrl");
jxmgrsec.main.twatch.pen.Ctrl.$inject = ["$rootScope", "$scope", "$http", "$modal", "$ocLazyLoad", "i18nService", "ModalService", "twatch"];
jxmgrsec.main.twatch.pen.Ctrl = function($rootScope, $scope, $http, $modal, $ocLazyLoad, i18nService, ModalService, twatch) {
  this.label = "some other label from main.twatch.pen controller";
  var ctrl = this;
  $scope.penset = {imei:$rootScope.imei};
  $scope.existsIMEI = undefined;
  $scope.penModel = {pen_id:undefined, imei:undefined, pen_name:undefined, pen_type:1, points:{longitute:undefined, latitude:undefined}, radius:500, address:undefined, rec_number:undefined};
  i18nService.setCurrentLang("zh-CN");
  $scope.raw_pensets = [];
  $scope.pen_type_selects = [];
  $scope.getPensets = function() {
    if ($scope.validParam($scope.penset.imei)) {
      return twatch.getPensets($scope.penset).then(function(data) {
        $scope.raw_pensets = data;
        $scope.gridOptions.data = data.filter(function(item) {
          return item.deleted == 0;
        });
        $scope.existsIMEI = $scope.penset.imei;
        $rootScope.imeiChanged($scope.penset.imei);
        $scope.gridOptions.totalItems = data.length;
        $scope.pen_type_selects = [];
        for (var i = 0;i < $scope.raw_pensets.length;i++) {
          if ($scope.validParam($scope.raw_pensets[i].pen_name) && $scope.raw_pensets[i].pen_type == $scope.penModel.pen_type) {
            $scope.pen_type_selects.push(data[i]);
          }
        }
      }, function(error) {
        console.log(error);
      });
    } else {
      $scope.addAlert("danger", "\u8bf7\u4f7f\u7528\u5408\u6cd5\u7684IMEI\u53f7");
    }
  };
  $scope.bindSelects = function() {
    $scope.pen_type_selects = [];
    for (var i = 0;i < $scope.raw_pensets.length;i++) {
      if ($scope.validParam($scope.raw_pensets[i].pen_name) && $scope.raw_pensets[i].pen_type == $scope.penModel.pen_type) {
        $scope.pen_type_selects.push($scope.raw_pensets[i]);
      }
    }
  };
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, columnDefs:[{field:"pen_name", name:"\u56f4\u680f\u540d\u79f0", width:"20%", pinnedLeft:true}, {field:"pen_type", name:"\u56f4\u680f\u7c7b\u578b", width:"20%", cellFilter:"mapPenShape"}, {field:"address", name:"\u4f4d\u7f6e\u8bf4\u660e", width:"20%"}, {field:"rec_number", name:"\u63a5\u6536\u53f7\u7801", width:"20%"}, {name:"\u64cd\u4f5c", width:"22%", cellTemplate:'<div class="row ui-grid-cell-contents"><div class="col-md-offset-1 col-md-2"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.editPen(row.entity)" >\u7f16\u8f91\u56f4\u680f</button></div><div class="col-md-offset-2 col-md-2"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.pointsModal(row.entity)" >\u67e5\u770b\u4f4d\u7f6e\u4fe1\u606f</button></div><div class="col-md-offset-2 col-md-2"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.delPen(row.entity)" >\u5220\u9664</button></div></div>', 
  pinnedRight:true}]};
  $scope.pointsModal = function(entity) {
    var modalInstance = $modal.open({animation:$scope.animationsEnabled, templateUrl:"components/tpls/pen_point_modal/pen_point_modal.html", controller:"PenPointModalCtrl", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
      console.log("Modal closed at: " + new Date);
    }, function() {
    });
  };
  $scope.delPen = function(entity) {
    if (confirm("\u786e\u8ba4\u5220\u9664\u6b64\u6761\u56f4\u680f\uff01")) {
      if ($scope.validParam($scope.existsIMEI) && $scope.validParam(entity.pen_id)) {
        return twatch.delPenset({imei:$scope.existsIMEI, pen_id:entity.pen_id}).then(function(res) {
          if ($scope.validParam(res.pen_id)) {
            alert("\u5220\u9664\u6210\u529f\uff01");
            $scope.getPensets();
          }
        });
      } else {
        $scope.addAlert("danger", "\u53c2\u6570\u6709\u8bef");
      }
    }
  };
  $scope.penTypes = [{pen_type_id:1, pen_type_name:"\u5706\u5f62"}, {pen_type_id:2, pen_type_name:"\u591a\u8fb9\u5f62"}];
  console.log($scope.penTypes);
  var calcArctan = function(pairPointsArry) {
    if ($scope.validParam(pairPointsArry)) {
      pairPointsArry.sort(function(point1, point2) {
        return point1.latitude > point2.latitude ? 1 : -1;
      });
      var point = pairPointsArry[0];
      pairPointsArry[0].angle = 0;
      for (var i = 1;i < 6;i++) {
        var x = point.longitute - pairPointsArry[i].longitute;
        var y = pairPointsArry[i].latitude - point.latitude;
        var angle;
        angle = Math.atan(y / x);
        pairPointsArry[i].angle = angle;
      }
      pairPointsArry.sort(function(point1, point2) {
        return point1.angle > point2.angle ? 1 : -1;
      });
    }
  };
  var map;
  var marker;
  var b = [118.784406, 31.98078];
  var circle;
  var polygon;
  var count = 0;
  $scope.polygonPoints = [];
  var drawCircle = function(lng, lat) {
    if ($scope.validParam(lng) && $scope.validParam(lat)) {
      var pointMark = new BMap.Point(lng, lat);
      marker = new BMap.Marker(pointMark);
      map.addOverlay(marker);
    }
  };
  var drawMarker = function(lng, lat) {
    if ($scope.validParam(lng) && $scope.validParam(lat)) {
      var marker = new BMap.Marker(new BMap.Point(lng, lat));
      map.addOverlay(marker);
      marker.addEventListener("click", attribute);
    }
  };
  function attribute(e) {
    var p = e.target;
    var lng = p.getPosition().lng;
    var lat = p.getPosition().lat;
    map.clearOverlays();
    drawMarker(lng, lat);
    var lng_and_lat = {longitute:lng, latitude:lat};
    $scope.polygonPoints = [];
    $scope.polygonPoints.push(lng_and_lat);
    count = 1;
  }
  var drawPolygon = function(pointsPair) {
    calcArctan(pointsPair);
    var longLans = [];
    var newPoint = new BMap.Point(pointsPair[5].longitute, pointsPair[5].latitude);
    map.setCenter(newPoint);
    for (var i = 0;i < 6;i++) {
      longLans.push(new BMap.Point(pointsPair[i].longitute, pointsPair[i].latitude));
    }
    map.clearOverlays();
    for (var j = 0;j < 6;j++) {
      var marker = new BMap.Marker(longLans[j]);
      map.addOverlay(marker);
      marker.addEventListener("click", attribute);
    }
    map.setViewport(longLans);
    polygon = new BMap.Polygon(longLans, {strokeColor:"#f50704", fillColor:"#FFFA62", strokeWeight:3, strokeOpacity:0, fillOpacity:0});
    map.addOverlay(polygon);
  };
  function onload() {
    map = new BMap.Map("map_canvas");
    var point = new BMap.Point(118.784406, 31.98078);
    map.centerAndZoom(point, 14);
    map.addControl(new BMap.NavigationControl);
    map.addControl(new BMap.MapTypeControl);
    marker = new BMap.Marker(point);
    map.addOverlay(marker);
    map.setDefaultCursor("crosshair");
    map.enableScrollWheelZoom();
    var myCity = new BMap.LocalCity;
    function iploac(result) {
      var cityName = result.name;
      map.setCenter(cityName);
    }
    myCity.get(iploac);
    map.addEventListener("click", function(event) {
      if (event.overlay) {
        return;
      }
      console.log(event.point);
      if ($scope.penModel.pen_type == 1 && confirm("\u786e\u8ba4\u5c06\u5706\u5fc3\u79fb\u5230\u8fd9\u91cc\u5417\uff1f")) {
        $scope.penModel.points.longitute = event.point.lng;
        $scope.penModel.points.latitude = event.point.lat;
        $scope.$digest();
        var pointMark = new BMap.Point(event.point.lng, event.point.lat);
        map.clearOverlays();
        marker = new BMap.Marker(pointMark);
        marker.enableDragging();
        map.addOverlay(marker);
        circle = new BMap.Circle(new BMap.Point(event.point.lng, event.point.lat), $scope.penModel.radius);
        circle.setFillColor("#FFFA62");
        circle.setStrokeColor("#f50704");
        map.addOverlay(circle);
        marker.addEventListener("dragging", function() {
          map.removeOverlay(circle);
          var point_now = marker.getPosition();
          $scope.penModel.points.longitute = point_now.lng;
          $scope.penModel.points.latitude = point_now.lat;
          circle = new BMap.Circle(new BMap.Point(point_now.lng, point_now.lat), $scope.penModel.radius);
          circle.setFillColor("#FFFA62");
          circle.setStrokeColor("#f50704");
          map.addOverlay(circle);
          $scope.$digest();
        });
        $scope.polygonPoints = [];
        count = 0;
      } else {
        if ($scope.penModel.pen_type == 2) {
          var lng_and_lat = {longitute:event.point.lng, latitude:event.point.lat};
          $scope.polygonPoints.push(lng_and_lat);
          if (++count == 1) {
            map.clearOverlays();
          }
          if ($scope.polygonPoints.length <= 6) {
            drawCircle(event.point.lng, event.point.lat);
          }
          if ($scope.polygonPoints.length == 6) {
            drawPolygon($scope.polygonPoints);
          }
          console.log($scope.polygonPoints.length);
          console.log($scope.polygonPoints.length);
        }
      }
    });
  }
  $ocLazyLoad.load([{files:["js!http://api.map.baidu.com/getscript?v=2.0&ak=1ioiKRqWB1EeDjtyka2fSfQ3"], cache:true}]).then(function(data) {
    onload();
  }, function(data) {
  });
  $scope.address = undefined;
  $scope.searchAddress = function() {
    if (!$scope.validParam($scope.address)) {
      $scope.addAlert("danger", "\u641c\u7d22\u4f4d\u7f6e\u4e0d\u80fd\u4e3a\u7a7a\uff01");
    } else {
      var options = {onSearchComplete:function(results) {
        if (local.getStatus() == BMAP_STATUS_SUCCESS) {
          console.log("\u641c\u7d22\u6210\u529f");
          console.log(results);
          console.log("results.getPoi(0).point");
          console.log(results.getPoi(0).point);
          map.clearOverlays();
          map.setCenter(results.getPoi(0).point);
          $scope.penModel.points.longitute = results.getPoi(0).point.lng;
          $scope.penModel.points.latitude = results.getPoi(0).point.lat;
          marker = new BMap.Marker(results.getPoi(0).point);
          map.addOverlay(marker);
          marker.addEventListener("dragging", function() {
            map.removeOverlay(circle);
            var point_now = marker.getPosition();
            $scope.penModel.points.longitute = point_now.lng;
            $scope.penModel.points.latitude = point_now.lat;
            circle = new BMap.Circle(new BMap.Point(point_now.lng, point_now.lat), $scope.penModel.radius);
            circle.setFillColor("#FFFA62");
            circle.setStrokeColor("#f50704");
            map.addOverlay(circle);
            $scope.$digest();
          });
          $scope.confirmAddress = results.getPoi(0).address;
          $scope.polygonPoints = [];
          count = 0;
          $scope.$digest();
        } else {
          $scope.addAlert("danger", "\u65e0\u6cd5\u641c\u7d22\u5230\u5230\u6b64\u5730\u5740\uff01");
        }
      }};
      var local = new BMap.LocalSearch(map, options);
      local.search($scope.address);
    }
  };
  $scope.circleChanged = function() {
    drawCircleMarker($scope.penModel.points.longitute, $scope.penModel.points.latitude, $scope.penModel.radius);
  };
  var drawCircleMarker = function(longitute, latitude, radius) {
    if ($scope.validParam(longitute) && $scope.validParam(latitude) && $scope.validParam(radius)) {
      var newPoint = new BMap.Point(longitute, latitude);
      map.setCenter(newPoint);
      map.clearOverlays();
      marker = new BMap.Marker(newPoint);
      marker.enableDragging();
      map.addOverlay(marker);
      circle = new BMap.Circle(newPoint, radius);
      circle.setFillColor("#FFFA62");
      circle.setStrokeColor("#f50704");
      map.addOverlay(circle);
      marker.addEventListener("dragging", function() {
        map.removeOverlay(circle);
        var point_now = marker.getPosition();
        $scope.penModel.points.longitute = point_now.lng;
        $scope.penModel.points.latitude = point_now.lat;
        circle = new BMap.Circle(new BMap.Point(point_now.lng, point_now.lat), $scope.penModel.radius);
        circle.setFillColor("#FFFA62");
        circle.setStrokeColor("#f50704");
        map.addOverlay(circle);
        $scope.$digest();
      });
    }
  };
  $scope.editPen = function(entity) {
    console.log(entity);
    $scope.penModel.pen_name = entity.pen_name;
    $scope.penModel.rec_number = entity.rec_number;
    $scope.penModel.address = entity.address;
    $scope.confirmAddress = entity.address;
    $scope.penModel.pen_id = entity.pen_id;
    if (entity.pen_type == 1) {
      if ($scope.validParam(entity.points[0].longitute) && $scope.validParam(entity.points[0].latitude)) {
        $scope.penModel.pen_type = 1;
        $scope.bindSelects();
        $scope.penModel.points.longitute = entity.points[0].longitute;
        $scope.penModel.points.latitude = entity.points[0].latitude;
        $scope.penModel.radius = entity.radius;
        drawCircleMarker(entity.points[0].longitute, entity.points[0].latitude, entity.radius);
        marker.addEventListener("dragging", function() {
          map.removeOverlay(circle);
          var point_now = marker.getPosition();
          $scope.penModel.points.longitute = point_now.lng;
          $scope.penModel.points.latitude = point_now.lat;
          circle = new BMap.Circle(new BMap.Point(point_now.lng, point_now.lat), $scope.penModel.radius);
          circle.setFillColor("#FFFA62");
          circle.setStrokeColor("#f50704");
          map.addOverlay(circle);
        });
      }
    } else {
      if (entity.pen_type == 2) {
        if ($scope.validParam(entity.points[0].longitute) && $scope.validParam(entity.points[0].latitude) && $scope.validParam(entity.points[1].longitute) && $scope.validParam(entity.points[1].latitude) && $scope.validParam(entity.points[2].longitute) && $scope.validParam(entity.points[2].latitude) && $scope.validParam(entity.points[3].longitute) && $scope.validParam(entity.points[3].latitude) && $scope.validParam(entity.points[4].longitute) && $scope.validParam(entity.points[4].latitude) && $scope.validParam(entity.points[5].longitute) && 
        $scope.validParam(entity.points[5].latitude)) {
          $scope.polygonPoints = entity.points;
          $scope.penModel.pen_type = 2;
          $scope.bindSelects();
          $scope.penModel.pen_name = entity.pen_name;
          $scope.penModel.rec_number = entity.rec_number;
          $scope.penModel.address = entity.address;
          drawPolygon(entity.points);
        } else {
          $scope.addAlert("danger", "\u5750\u6807\u70b9\u975e\u6cd5\uff0c\u8bf7\u4fee\u6b63\u540e\u518d\u8bd5\uff01");
        }
      }
    }
  };
  $scope.savepen = function() {
    if ($scope.validParam($scope.penModel.pen_type) && $scope.penModel.pen_type == 1) {
      if ($scope.validParam($scope.penModel.points.longitute) && $scope.validParam($scope.penModel.points.latitude) && $scope.validParam($scope.penModel.radius) && $scope.validParam($scope.penModel.pen_name) && $scope.validParam($scope.penModel.rec_number) && $scope.validParam($scope.existsIMEI) && $scope.validParam($scope.penModel.pen_type) && $scope.validParam($scope.confirmAddress)) {
        $scope.penModel.imei = $scope.existsIMEI;
        $scope.penModel.address = $scope.confirmAddress;
        console.log("$scope.penModel1");
        console.log($scope.penModel);
        var pointsArry = [{latitude:$scope.penModel.points.latitude, longitute:$scope.penModel.points.longitute}];
        $scope.penModel.points = pointsArry;
        $scope.penModel.points.longitute = pointsArry[0].longitute;
        $scope.penModel.points.latitude = pointsArry[0].latitude;
        return twatch.savePensets($scope.penModel).then(function(data) {
          if ($scope.validParam(data.pen_id)) {
            $scope.getPensets();
            $scope.addAlert("success", "\u56f4\u680f\u8bbe\u7f6e\u6210\u529f\uff01");
          }
        });
      } else {
        console.log($scope.penModel);
        $scope.addAlert("danger", "\u8bf7\u68c0\u67e5\u56f4\u680f\u53c2\u6570\u662f\u5426\u5b8c\u6574\uff01");
      }
    } else {
      if ($scope.validParam($scope.penModel.pen_type) && $scope.penModel.pen_type == 2) {
        if ($scope.validParam($scope.polygonPoints) && $scope.polygonPoints.length == 6 && $scope.validParam($scope.penModel.pen_name) && $scope.validParam($scope.penModel.rec_number) && $scope.validParam($scope.existsIMEI) && $scope.validParam($scope.penModel.pen_type) && $scope.validParam($scope.confirmAddress)) {
          $scope.penModel.imei = $scope.existsIMEI;
          $scope.penModel.address = $scope.confirmAddress;
          $scope.penModel.points = $scope.polygonPoints;
          return twatch.savePensets($scope.penModel).then(function(data) {
            if ($scope.validParam(data.pen_id)) {
              $scope.getPensets();
              $scope.addAlert("success", "\u56f4\u680f\u8bbe\u7f6e\u6210\u529f\uff01");
            }
          });
        } else {
          console.log($scope.penModel);
          $scope.addAlert("danger", "\u8bf7\u68c0\u67e5\u56f4\u680f\u53c2\u6570\u662f\u5426\u5b8c\u6574\uff01");
        }
      }
    }
  };
  $scope.pen_select = {pen_type_select:undefined};
  $scope.penTypechanged = function() {
    $scope.penModel.pen_id = $scope.pen_select.pen_type_select.pen_id;
    $scope.penModel.pen_name = $scope.pen_select.pen_type_select.pen_name;
    $scope.penModel.rec_number = $scope.pen_select.pen_type_select.rec_number;
    $scope.penModel.address = $scope.pen_select.pen_type_select.address;
    $scope.confirmAddress = $scope.pen_select.pen_type_select.address;
    if ($scope.pen_select.pen_type_select.pen_type == 1) {
      $scope.penModel.points.longitute = $scope.pen_select.pen_type_select.points[0].longitute;
      $scope.penModel.points.latitude = $scope.pen_select.pen_type_select.points[0].latitude;
      $scope.penModel.radius = $scope.pen_select.pen_type_select.radius;
      if ($scope.validParam($scope.penModel.points.longitute) && $scope.validParam($scope.penModel.points.latitude)) {
        drawCircleMarker($scope.penModel.points.longitute, $scope.penModel.points.latitude, $scope.penModel.radius);
        marker.addEventListener("dragging", function() {
          map.removeOverlay(circle);
          var point_now = marker.getPosition();
          $scope.penModel.points.longitute = point_now.lng;
          $scope.penModel.points.latitude = point_now.lat;
          circle = new BMap.Circle(new BMap.Point(point_now.lng, point_now.lat), $scope.penModel.radius);
          circle.setFillColor("#FFFA62");
          circle.setStrokeColor("#f50704");
          map.addOverlay(circle);
        });
      }
    } else {
      if ($scope.pen_select.pen_type_select.pen_type == 2) {
        if ($scope.validParam($scope.pen_select.pen_type_select.points[0].longitute) && $scope.validParam($scope.pen_select.pen_type_select.points[0].latitude) && $scope.validParam($scope.pen_select.pen_type_select.points[1].longitute) && $scope.validParam($scope.pen_select.pen_type_select.points[1].latitude) && $scope.validParam($scope.pen_select.pen_type_select.points[2].longitute) && $scope.validParam($scope.pen_select.pen_type_select.points[2].latitude) && $scope.validParam($scope.pen_select.pen_type_select.points[3].longitute) && 
        $scope.validParam($scope.pen_select.pen_type_select.points[3].latitude) && $scope.validParam($scope.pen_select.pen_type_select.points[4].longitute) && $scope.validParam($scope.pen_select.pen_type_select.points[4].latitude) && $scope.validParam($scope.pen_select.pen_type_select.points[5].longitute) && $scope.validParam($scope.pen_select.pen_type_select.points[5].latitude)) {
          $scope.penModel.pen_type = 2;
          drawPolygon($scope.pen_select.pen_type_select.points);
        } else {
          $scope.addAlert("danger", "\u542b\u6709\u975e\u6cd5\u5750\u6807\u70b9\uff0c\u8bf7\u4fee\u6b63\u540e\u518d\u8bd5\uff01");
        }
      }
    }
  };
  $scope.addpen = function() {
    if ($scope.validParam($scope.penModel.pen_type) && $scope.penModel.pen_type == 1) {
      if ($scope.validParam($scope.penModel.points.longitute) && $scope.validParam($scope.penModel.points.latitude) && $scope.validParam($scope.penModel.radius) && $scope.validParam($scope.penModel.pen_name) && $scope.validParam($scope.penModel.rec_number) && $scope.validParam($scope.existsIMEI) && $scope.validParam($scope.penModel.pen_type) && $scope.validParam($scope.confirmAddress)) {
        $scope.penModel.imei = $scope.existsIMEI;
        $scope.penModel.address = $scope.confirmAddress;
        var pointsArry = [{latitude:$scope.penModel.points.latitude, longitute:$scope.penModel.points.longitute}];
        $scope.penModel.points = pointsArry;
        return twatch.addPensets($scope.penModel).then(function(data) {
          if ($scope.validParam(data.pen_id)) {
            $scope.getPensets();
            $scope.addAlert("success", "\u56f4\u680f\u8bbe\u7f6e\u6210\u529f\uff01");
          }
        });
      } else {
        console.log($scope.penModel);
        $scope.addAlert("danger", "\u8bf7\u68c0\u67e5\u56f4\u680f\u53c2\u6570\u662f\u5426\u5b8c\u6574\uff01");
      }
    } else {
      if ($scope.validParam($scope.penModel.pen_type) && $scope.penModel.pen_type == 2) {
        if ($scope.validParam($scope.polygonPoints) && $scope.polygonPoints.length == 6 && $scope.validParam($scope.penModel.radius) && $scope.validParam($scope.penModel.pen_name) && $scope.validParam($scope.penModel.rec_number) && $scope.validParam($scope.existsIMEI) && $scope.validParam($scope.penModel.pen_type) && $scope.validParam($scope.confirmAddress)) {
          $scope.penModel.imei = $scope.existsIMEI;
          $scope.penModel.address = $scope.confirmAddress;
          $scope.penModel.points = $scope.polygonPoints;
          return twatch.addPensets($scope.penModel).then(function(data) {
            if ($scope.validParam(data.pen_id)) {
              $scope.getPensets();
              $scope.addAlert("success", "\u56f4\u680f\u8bbe\u7f6e\u6210\u529f\uff01");
            }
          });
        } else {
          console.log($scope.penModel);
          $scope.addAlert("danger", "\u8bf7\u68c0\u67e5\u56f4\u680f\u53c2\u6570\u662f\u5426\u5b8c\u6574\uff01");
        }
      }
    }
  };
};
goog.provide("jxmgrsec.main.twatch.route.Ctrl");
jxmgrsec.main.twatch.route.Ctrl.$inject = ["$rootScope", "$scope", "$http", "$modal", "$filter", "$timeout", "$ocLazyLoad", "i18nService", "ModalService", "twatch"];
jxmgrsec.main.twatch.route.Ctrl = function($scope, $http, $modal, $filter, $timeout, $rootScope, $ocLazyLoad, i18nService, ModalService, twatch) {
  this.label = "some other label from main.twatch.route controller";
  var ctrl = this;
  i18nService.setCurrentLang("zh-CN");
  $scope.routeParam = {imei:$rootScope.imei, begin_date:undefined, end_date:undefined, page_size:10, current_page:0, query_date:undefined};
  $scope.query_date = {from:new Date("2015-01-01"), to:new Date};
  $scope.query_date.to.setHours(23);
  $scope.query_date.to.setMinutes(59);
  $scope.query_date.to.setSeconds(59);
  $scope.getLocations = function() {
    if (!$scope.validParam($scope.routeParam.imei)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165IMEI\u53f7\u7801");
      return;
    }
    $scope.routeParam.begin_date = $filter("dateTounix")($filter("date")($scope.query_date.from, "yyyy-M-dd H:mm:ss"));
    $scope.routeParam.end_date = $filter("dateTounix")($filter("date")($scope.query_date.to, "yyyy-M-dd H:mm:ss"));
    if ($scope.routeParam.begin_date > $scope.routeParam.end_date) {
      $scope.addAlert("danger", "\u5f00\u59cb\u65f6\u95f4\u4e0d\u80fd\u65e9\u4e8e\u7ed3\u675f\u65f6\u95f4");
      return;
    }
    return twatch.getLocations($scope.routeParam).then(function(res) {
      $scope.gridOptions.data = res.day_locations;
      $scope.query_date.query_date = res.query_date;
      $scope.gridOptions.totalItems = res.total_count;
      $scope.confirmIMEI = $scope.routeParam.imei;
      $rootScope.imeiChanged($scope.routeParam.imei);
      $timeout(function() {
        map.clearOverlays();
        getPensets();
      }, 100);
    });
  };
  $scope.confirmIMEI = undefined;
  $scope.gridOptions = {useExternalPagination:true, paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, columnDefs:[{field:"date", name:"\u5b9a\u4f4d\u65e5\u671f", width:"15%", pinnedLeft:true, cellFilter:"unixTodate"}, {field:"sub_mode", name:"\u4e0a\u4f20\u65b9\u5f0f", width:"15%", cellFilter:"mapTwatchGpsMode"}, {field:"count", name:"\u603b\u5b9a\u4f4d\u6570\u91cf", width:"15%"}, {field:"inner_count", name:"\u5b89\u5168\u533a\u57df\u5185", width:"15%"}, {field:"outer_count", name:"\u5b89\u5168\u533a\u57df\u5916", 
  width:"15%"}, {filed:"locations", name:"\u4f4d\u7f6e\u4fe1\u606f\u961f\u5217", width:"15%"}, {name:"\u64cd\u4f5c", width:"15%", cellTemplate:'<div class="row ui-grid-cell-contents"><div class="col-md-offset-1 col-md-2"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.playBack(row.entity)" >\u56de\u653e</button></div></div>', pinnedRight:true}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.routeParam.current_page = newPage - 1;
      $scope.routeParam.page_size = pageSize;
      $scope.getLocations();
    });
  }};
  var map;
  var marker;
  var marker1;
  var circle;
  var polygon;
  var count = 0;
  var longLans = [];
  $scope.speed = 1;
  $scope.currentPoints = [];
  function onload() {
    map = new BMap.Map("map_canvas");
    var point = new BMap.Point(118.784406, 31.98078);
    map.centerAndZoom(point, 14);
    map.addControl(new BMap.NavigationControl);
    map.addControl(new BMap.MapTypeControl);
    map.setDefaultCursor("crosshair");
    map.enableScrollWheelZoom();
    var myCity = new BMap.LocalCity;
    function iploac(result) {
      var cityName = result.name;
      map.setCenter(cityName);
    }
    myCity.get(iploac);
  }
  $ocLazyLoad.load([{files:["js!http://api.map.baidu.com/getscript?v=2.0&ak=1ioiKRqWB1EeDjtyka2fSfQ3"], cache:true}]).then(function(data) {
    onload();
  }, function(data) {
  });
  var calcArctan = function(pairPointsArry) {
    if ($scope.validParam(pairPointsArry)) {
      pairPointsArry.sort(function(point1, point2) {
        return point1.latitude > point2.latitude ? 1 : -1;
      });
      var point = pairPointsArry[0];
      pairPointsArry[0].angle = 0;
      for (var i = 1;i < 6;i++) {
        var x = point.longitute - pairPointsArry[i].longitute;
        var y = pairPointsArry[i].latitude - point.latitude;
        var angle;
        angle = Math.atan(y / x);
        pairPointsArry[i].angle = angle;
      }
      pairPointsArry.sort(function(point1, point2) {
        return point1.angle > point2.angle ? 1 : -1;
      });
    }
  };
  var drawCircleMarker = function(longitute, latitude, radius) {
    if ($scope.validParam(longitute) && $scope.validParam(latitude) && $scope.validParam(radius)) {
      var newPoint = new BMap.Point(longitute, latitude);
      map.setCenter(newPoint);
      marker1 = new BMap.Marker(newPoint);
      map.addOverlay(marker1);
      circle = new BMap.Circle(newPoint, radius);
      circle.setFillColor("#FFFA62");
      circle.setStrokeColor("#f50704");
      map.addOverlay(circle);
    }
  };
  var drawPolygon = function(pointsPair) {
    calcArctan(pointsPair);
    var longLans = [];
    var newPoint = new BMap.Point(pointsPair[5].longitute, pointsPair[5].latitude);
    map.setCenter(newPoint);
    for (var i = 0;i < 6;i++) {
      longLans.push(new BMap.Point(pointsPair[i].longitute, pointsPair[i].latitude));
    }
    map.setViewport(longLans);
    polygon = new BMap.Polygon(longLans, {strokeColor:"#f50704", fillColor:"#FFFA62", strokeWeight:3, strokeOpacity:0, fillOpacity:0});
    map.addOverlay(polygon);
  };
  $scope.drawPen = function(entity) {
    console.log(entity);
    if (entity.pen_type == 1) {
      if ($scope.validParam(entity.points[0].longitute) && $scope.validParam(entity.points[0].latitude)) {
        drawCircleMarker(entity.points[0].longitute, entity.points[0].latitude, entity.radius);
      }
    } else {
      if (entity.pen_type == 2) {
        if ($scope.validParam(entity.points[0].longitute) && $scope.validParam(entity.points[0].latitude) && $scope.validParam(entity.points[1].longitute) && $scope.validParam(entity.points[1].latitude) && $scope.validParam(entity.points[2].longitute) && $scope.validParam(entity.points[2].latitude) && $scope.validParam(entity.points[3].longitute) && $scope.validParam(entity.points[3].latitude) && $scope.validParam(entity.points[4].longitute) && $scope.validParam(entity.points[4].latitude) && $scope.validParam(entity.points[5].longitute) && 
        $scope.validParam(entity.points[5].latitude)) {
          drawPolygon(entity.points);
        } else {
          alert("\u5750\u6807\u70b9\u975e\u6cd5\uff0c\u8bf7\u4fee\u6b63\u540e\u518d\u8bd5\uff01");
        }
      }
    }
  };
  var getPensets = function() {
    if ($scope.validParam($scope.routeParam.imei)) {
      return twatch.getPensets({imei:$scope.routeParam.imei}).then(function(data) {
        $scope.graphData = data.filter(function(item) {
          return item.deleted == 0;
        });
        if ($scope.validParam($scope.graphData) && $scope.graphData.length != 0) {
          for (var i = 0;i < $scope.graphData.length;i++) {
            if ($scope.graphData[i].pen_type == 1) {
              drawCircleMarker($scope.graphData[i].points[0].longitute, $scope.graphData[i].points[0].latitude, $scope.graphData[i].radius);
            } else {
              if ($scope.graphData[i].pen_type == 2) {
                drawPolygon($scope.graphData[i].points);
              }
            }
          }
        }
      });
    } else {
      console.log("IMEI\u53f7\u4e3a\u7a7a\uff01");
    }
  };
  var drawMarker = function(lng, lat) {
    if ($scope.validParam(lng) && $scope.validParam(lat)) {
      var point = new BMap.Point(lng, lat);
      longLans.push(point);
      var marker = new BMap.Marker(point);
      map.addOverlay(marker);
      marker.addEventListener("click", attribute);
    } else {
      alert("\u5750\u6807\u70b9\u4e0d\u53ef\u7528\uff01");
    }
  };
  function attribute(e) {
    var p = e.target;
    console.log(p.getPosition());
  }
  var drawTwoPointsLine = function(point1, point2) {
    if ($scope.validParam(point1) && $scope.validParam(point2)) {
      var polyline = new BMap.Polyline([new BMap.Point(point1.longitute, point1.latitude), new BMap.Point(point2.longitute, point2.latitude)], {strokeColor:"#f50704", strokeWeight:4, strokeOpacity:.5});
      map.addOverlay(polyline);
    } else {
      alert("\u5f53\u524d\u5750\u6807\u70b9\u65e0\u6548\uff01");
    }
  };
  var drawPointsLine = function(points) {
    if ($scope.validParam(points)) {
      var polylinePoints = [];
      for (var i = 0;i < points.length;i++) {
        polylinePoints.push(new BMap.Point(points[i].longitute, points[i].latitude));
        drawMarker(points[i].longitute, points[i].latitude);
      }
      if (polylinePoints.length != 0) {
        var polyline = new BMap.Polyline(polylinePoints, {strokeColor:"#f50704", strokeWeight:4, strokeOpacity:.5});
        map.addOverlay(polyline);
      }
    } else {
      alert("\u5f53\u524d\u5750\u6807\u70b9\u65e0\u6548\uff01");
    }
  };
  var drawGirlMarker = function(point) {
    if ($scope.validParam(point.longitute) && $scope.validParam(point.latitude)) {
      map.removeOverlay(marker);
      var pt = new BMap.Point(point.longitute, point.latitude);
      var myIcon = new BMap.Icon("../../img/girl.png", new BMap.Size(50, 100), {});
      marker = new BMap.Marker(pt, {icon:myIcon});
      marker.setAnimation(BMAP_ANIMATION_BOUNCE);
      map.addOverlay(marker);
    } else {
      alert("\u5750\u6807\u70b9\u4e0d\u53ef\u7528");
    }
  };
  var m = 0;
  var drawMarkBySpeed = function(points, speed) {
    if ($scope.validParam(points) && points.length > 1) {
      if (m > points.length - 1) {
        return;
      }
      drawGirlMarker(points[m]);
      m += 1;
      $timeout(function() {
        drawMarkBySpeed(points, speed);
        console.log("speed");
        console.log(speed);
        $scope.$digest();
      }, speed * 1E3);
    } else {
      alert("\u5750\u6807\u70b9\u4e2a\u6570\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e2\uff01");
      return;
    }
  };
  var k = 0;
  var drawPolyLineBySpeed = function(points, speed) {
    if ($scope.validParam(points) && points.length > 1) {
      if (k + 1 >= points.length) {
        return;
      }
      drawTwoPointsLine(points[k], points[k + 1]);
      k += 1;
      $timeout(function() {
        drawPolyLineBySpeed(points, speed);
      }, speed * 1E3);
    } else {
      alert("\u5750\u6807\u70b9\u4e2a\u6570\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e2\uff01");
      return;
    }
  };
  var drawAllPoints = function() {
    if ($scope.validParam($scope.currentPoints) && $scope.currentPoints.length != 0) {
      map.clearOverlays();
      for (var i = 0;i < $scope.currentPoints.length;i++) {
        drawMarker($scope.currentPoints[i].longitute, $scope.currentPoints[i].latitude);
      }
      map.setViewport(longLans);
      k = 0;
      drawPolyLineBySpeed($scope.currentPoints, $scope.speed);
    } else {
      alert("\u5750\u6807\u70b9\u4e0d\u53ef\u7528\uff01");
    }
  };
  $scope.playBack = function(entity) {
    if ($scope.validParam($scope.confirmIMEI)) {
      if ($scope.validParam(entity.locations) && entity.locations.length != 0) {
        for (var i = 0;i < entity.locations.length;i++) {
          drawMarker(entity.locations[i].longitute, entity.locations[i].latitude);
        }
        map.setViewport(longLans);
        $scope.currentPoints = entity.locations;
        drawPointsLine($scope.currentPoints);
        m = 0;
        drawMarkBySpeed($scope.currentPoints, $scope.speed);
      } else {
        alert("\u5750\u6807\u70b9\u4e0d\u53ef\u7528\uff01");
      }
    } else {
      alert("\u8bf7\u4f7f\u7528\u6b63\u786eIMEI\u53f7\uff01");
    }
  };
  $scope.oncePlay = function() {
    m = 0;
    drawMarkBySpeed($scope.currentPoints, $scope.speed);
  };
  $scope.stopPlay = function() {
    if ($scope.currentPoints.length != 0) {
      drawGirlMarker($scope.currentPoints[0]);
    }
  };
  $scope.addSpeed = function() {
    $scope.speed -= .2;
  };
  $scope.subSpeed = function() {
    $scope.speed += .2;
  };
  $scope.dt = new Date;
  $scope.minDate = new Date("1900/01/01");
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.open1 = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened1 = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[2];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
};
goog.provide("jxmgrsec.main.twatch.route.module");
goog.require("jxmgrsec.main.twatch.route.Ctrl");
jxmgrsec.main.twatch.route.module = angular.module("main.twatch.route", ["ui.router", "oc.lazyLoad"]);
jxmgrsec.main.twatch.route.module.configuration = function($stateProvider) {
  $stateProvider.state("main.twatch.route", {url:"/route", templateUrl:"states/main/twatch/route/route.html", controller:"RouteCtrl as route"});
};
jxmgrsec.main.twatch.route.module.config(jxmgrsec.main.twatch.route.module.configuration).controller("RouteCtrl", jxmgrsec.main.twatch.route.Ctrl);
goog.provide("jxmgrsec.main.twatch.route_setting.Ctrl");
jxmgrsec.main.twatch.route_setting.Ctrl.$inject = ["$rootScope", "$scope", "$http", "$modal", "i18nService", "ModalService", "twatch", "constants", "$timeout"];
jxmgrsec.main.twatch.route_setting.Ctrl = function($rootScope, $scope, $http, $modal, $timeout, i18nService, ModalService, twatch, constants) {
  var ctrl = this;
  $scope.gridPieroids = {paginationPageSizes:[10, 20, 30], paginationPageSize:30};
  i18nService.setCurrentLang("zh-CN");
  $scope.gridPieroids.columnDefs = [{field:"route_period_id", name:"\u65f6\u6bb5\u7f16\u53f7", width:"10%", pinnedLeft:true}, {field:"start", name:"\u5f00\u59cb\u65f6\u95f4", width:"20%"}, {field:"stop", name:"\u7ed3\u675f\u65f6\u95f4", width:"20%"}, {field:"weeks", name:"\u661f\u671f\u51e0", width:"10%", cellFilter:"mapWeekDays"}, {field:"set_en", name:"\u6fc0\u6d3b\u72b6\u6001", width:"20%", cellFilter:"mapTwatchRouteState"}, {name:"\u64cd\u4f5c", width:"20%", cellTemplate:'<div class="row"><div class="col-md-offset-1 col-md-2 text-center"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.modifyPieroid(row.entity)" >\u4fee\u6539</button></div><div class="col-md-offset-2 col-md-2 text-center"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.deletePieroid(row.entity)">\u5220\u9664</button></div></div>'}];
  $scope.gridPieroids.enableFiltering = false;
  $scope.gridPieroids.enableCellEdit = false;
  $scope.gridPieroids.onRegisterApi = function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
  };
  this.label = "some other label from main.twatch.route_setting controller";
  ctrl.twatch_gps_mode = constants.gotGPSMODES();
  ctrl.twatch_gps_mode_id = 1;
  ctrl.twatch_route_state = constants.gotROUTESTATES();
  ctrl.twatch_route_state_id = 1;
  console.log(constants.gotROUTESTATES());
  var min = [];
  for (var i = 1;i <= 60;i++) {
    min.push(i);
  }
  ctrl.gps_interval = 1;
  $scope.minutes = min;
  ctrl.imei1 = $rootScope.imei;
  ctrl.imei2 = undefined;
  $scope.queryFile = function() {
    twatch.getRouteset({imei:ctrl.imei1}).then(function(data) {
      $scope.gridPieroids.data = data.periods;
      ctrl.imei2 = ctrl.imei1;
      $rootScope.imeiChanged(ctrl.imei1);
      ctrl.gps_interval = data.gps_interval;
      ctrl.twatch_route_state_id = data.route_en;
      ctrl.twatch_gps_mode_id = data.gps_mode;
    }, function(error) {
      $scope.addAlert("danger", error.faultstring);
    });
  };
  $scope.saveRouteSet = function() {
    if ($scope.validParam(ctrl.imei2)) {
      var jsonData = {imei:ctrl.imei2, route_en:ctrl.twatch_route_state_id, gps_mode:ctrl.twatch_gps_mode_id, gps_interval:ctrl.gps_interval};
      console.log(jsonData);
      twatch.postRouteset(jsonData).then(function(succ) {
        $scope.addAlert("success", "\u4fdd\u5b58\u6210\u529f");
      }, function(error) {
        console.log(error);
        $scope.addAlert("danger", "\u4fdd\u5b58\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      });
    } else {
      $scope.addAlert("danger", "\u8bf7\u5148\u67e5\u8be2\uff01");
    }
  };
  $scope.modifyPieroid = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/modify_route_period_modal/modify_route_period_modal.html", controller:"ModifyRoutePeriodModal", resolve:{entity:function() {
      return entity;
    }, imei:function() {
      return ctrl.imei2;
    }}});
    modalInstance.result.then(function() {
    }, function() {
      $scope.queryFile();
    });
  };
  $scope.deletePieroid = function(entity) {
    var deleteperiod = {imei:ctrl.imei2, route_period_id:entity.route_period_id};
    twatch.deleteRoutePeriod(deleteperiod).then(function(res) {
      console.log(res);
      $scope.queryFile();
    }, function(error) {
      console.log(error);
    });
  };
  ctrl.addRoutePieroid = function(entity) {
    if ($scope.validParam(entity)) {
      var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/add_route_period_modal/add_route_period_modal.html", controller:"AddRoutePeriodModal", resolve:{entity:function() {
        return entity;
      }}});
      modalInstance.result.then(function() {
      }, function() {
        $scope.queryFile();
      });
    } else {
      $scope.addAlert("danger", "\u8bf7\u5148\u67e5\u8be2\uff01");
    }
  };
  $scope.validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxmgrsec.main.twatch.Ctrl");
jxmgrsec.main.twatch.Ctrl.$inject = ["$window", "$rootScope", "$timeout", "basic", "twatch"];
jxmgrsec.main.twatch.Ctrl = function($scope, $rootScope, $timeout, $window, basic, twatch) {
  this.label = "some label from twatch controller";
  $rootScope.imeiChanged = function(newImei) {
    if ($scope.validParam(newImei) && newImei != $rootScope.imei) {
      $rootScope.imei = newImei;
      return twatch.heartbeat({imei:newImei}).then(function(res) {
        console.log("\u52a0\u901f\u5fc3\u8df3");
      }, function(error) {
        console.log(error);
      });
    }
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  $scope.validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
};
jxmgrsec.main.twatch.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxmgrsec.main.user_center.avatar.Ctrl");
jxmgrsec.main.user_center.avatar.Ctrl.$inject = ["$scope", "basic", "$timeout"];
jxmgrsec.main.user_center.avatar.Ctrl = function($scope, $timeout, basic) {
  this.label = "some other label from main.user_center.avatar controller";
  $scope.avatarFile = undefined;
  $scope.avatarurl = "../../../img/touxiang.png";
  $scope.getManagerBasics = function() {
    basic.getManagerBasics().then(function(data) {
      if (validParam(data.success_message.avatar_url)) {
        $scope.avatarurl = data.success_message.avatar_url;
      }
    }, function(error) {
      $scope.addAlert("danger", "\u6570\u636e\u52a0\u8f7d\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.getManagerBasics();
  $scope.disabledBtn = false;
  $scope.saveAvatar = function() {
    $scope.disabledBtn = true;
    if (validParam($scope.avatarFile)) {
      if (validPic($scope.avatarFile, "png|jpg|jpeg|bmp|gif")) {
        return basic.fileUpload($scope.avatarFile).then(function(res) {
          console.log(res);
          $scope.avatarurl = res.success_message[0];
          return basic.updateManAvatar({avatar_url:$scope.avatarurl}).then(function(res) {
            $scope.addAlert("success", "\u4e0a\u4f20\u5934\u50cf\u6210\u529f");
            $timeout(function() {
              $scope.disabledBtn = false;
            }, 3E3);
            $scope.getManagerBasics();
          }, function(error) {
            $scope.addAlert("danger", "\u4e0a\u4f20\u5934\u50cf\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
            $timeout(function() {
              $scope.disabledBtn = false;
            }, 3E3);
          });
        }, function(error) {
          console.log(error);
          $scope.addAlert("danger", "\u4e0a\u4f20\u5934\u50cf\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
          $timeout(function() {
            $scope.disabledBtn = false;
          }, 3E3);
        });
      } else {
        $scope.addAlert("warning", "\u8bf7\u4e0a\u4f20png\u3001jpg\u3001gif\u7c7b\u578b\u7684\u6587\u4ef6\uff01");
        $timeout(function() {
          $scope.disabledBtn = false;
        }, 3E3);
      }
    } else {
      $scope.addAlert("warning", "\u8bf7\u9009\u62e9\u6587\u4ef6\uff01");
      $timeout(function() {
        $scope.disabledBtn = false;
      }, 3E3);
    }
  };
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  function validPic(file, str) {
    if (file != undefined && file.type != undefined && str != undefined && str != "" && str.length != 0) {
      var suffixs = str.split("|");
      var fileSuf = file.type.split("/");
      var res = suffixs.filter(function(item) {
        return item == fileSuf[1];
      });
      if (res.length != 0) {
        return true;
      }
      return false;
    }
  }
};
goog.provide("jxmgrsec.main.user_center.avatar.module");
goog.require("jxmgrsec.main.user_center.avatar.Ctrl");
jxmgrsec.main.user_center.avatar.module = angular.module("main.user_center.avatar", ["ui.router"]);
jxmgrsec.main.user_center.avatar.module.configuration = function($stateProvider) {
  $stateProvider.state("main.user_center.avatar", {url:"/avatar", templateUrl:"states/main/user_center/avatar/avatar.html", controller:"AvatarCtrl as avatar"});
};
jxmgrsec.main.user_center.avatar.module.config(jxmgrsec.main.user_center.avatar.module.configuration).controller("AvatarCtrl", jxmgrsec.main.user_center.avatar.Ctrl);
goog.provide("jxmgrsec.main.user_center.password.Ctrl");
jxmgrsec.main.user_center.password.Ctrl.$inject = ["basic", "md5", "$timeout"];
jxmgrsec.main.user_center.password.Ctrl = function($scope, $timeout, basic, md5) {
  this.label = "some other label from main.user_center.password controller";
  $scope.chPassword = {password:undefined, confirm_password:undefined, new_password:undefined};
  $scope.activeSave = false;
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  $scope.checkUserName = function() {
    var node = document.getElementById("user_name_group");
    var helper = document.getElementById("user_name_helper");
    if (validParam($scope.chPassword.password)) {
      node.className = "form-group has-success";
      helper.innerHTML = "\u5df2\u586b";
      if (validParam($scope.chPassword.new_password) && validParam($scope.chPassword.password) && validParam($scope.chPassword.confirm_password)) {
        $scope.activeSave = true;
      }
    } else {
      node.className = "form-group has-error";
      helper.innerHTML = "\u5fc5\u586b";
      $scope.activeSave = false;
    }
  };
  $scope.checkPassword = function() {
    var node = document.getElementById("password_group");
    var helper = document.getElementById("password_helper");
    if (validParam($scope.chPassword.password)) {
      node.className = "form-group has-success";
      helper.innerHTML = "\u5df2\u586b";
    } else {
      node.className = "form-group has-error";
      helper.innerHTML = "\u5fc5\u586b";
      $scope.activeSave = false;
    }
  };
  $scope.checkPasswordRepeat = function() {
    var node = document.getElementById("password_repeat_group");
    var helper = document.getElementById("password_repeat_helper");
    if (validParam($scope.chPassword.confirm_password)) {
      node.className = "form-group has-success";
      helper.innerHTML = "\u5df2\u586b";
      if (validParam($scope.chPassword.new_password) && $scope.chPassword.confirm_password == $scope.chPassword.new_password) {
        $scope.activeSave = true;
      }
    } else {
      node.className = "form-group has-error";
      helper.innerHTML = "\u5fc5\u586b";
      $scope.activeSave = false;
    }
    if ($scope.chPassword.confirm_password != $scope.chPassword.new_password) {
      node.className = "form-group has-error";
      helper.innerHTML = "\u5bc6\u7801\u4e0d\u4e00\u81f4";
      $scope.activeSave = false;
    }
  };
  $scope.disabledBtn = false;
  $scope.saveNewPwd = function() {
    $scope.disabledBtn = true;
    return basic.change_password({old_password:md5.createHash($scope.chPassword.password), new_password:md5.createHash($scope.chPassword.new_password)}).then(function(res) {
      if (validParam(res.success_message)) {
        $scope.addAlert("success", "\u4fee\u6539\u5bc6\u7801\u6210\u529f\uff01");
        $timeout(function() {
          $scope.disabledBtn = false;
        }, 3E3);
        clearData();
      }
      if (validParam(res.error_message)) {
        $scope.addAlert("danger", res.error_message.faultstring);
        $timeout(function() {
          $scope.disabledBtn = false;
        }, 3E3);
      }
    }, function(error) {
      $scope.addAlert("danger", "\u4fee\u6539\u5bc6\u7801\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      $timeout(function() {
        $scope.disabledBtn = false;
      }, 3E3);
    });
  };
  var clearData = function() {
    $scope.chPassword.password = null;
    $scope.chPassword.new_password = null;
    $scope.chPassword.confirm_password = null;
    var helper1 = document.getElementById("user_name_helper");
    helper1.innerHTML = "\u5fc5\u586b";
    var helper2 = document.getElementById("password_helper");
    helper2.innerHTML = "\u5fc5\u586b";
    var helper3 = document.getElementById("password_repeat_helper");
    helper3.innerHTML = "\u5fc5\u586b";
  };
};
goog.provide("jxmgrsec.main.user_center.password.module");
goog.require("jxmgrsec.main.user_center.password.Ctrl");
jxmgrsec.main.user_center.password.module = angular.module("main.user_center.password", ["ui.router", "angular-md5"]);
jxmgrsec.main.user_center.password.module.configuration = function($stateProvider) {
  $stateProvider.state("main.user_center.password", {url:"/password", templateUrl:"states/main/user_center/password/password.html", controller:"PasswordCtrl as password"});
};
jxmgrsec.main.user_center.password.module.config(jxmgrsec.main.user_center.password.module.configuration).controller("PasswordCtrl", jxmgrsec.main.user_center.password.Ctrl);
goog.provide("jxmgrsec.main.user_center.Ctrl");
jxmgrsec.main.user_center.Ctrl = function() {
  this.label = "some label from user center controller";
};
jxmgrsec.main.user_center.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.require("jxmgrsec.main.user_center.Ctrl");
goog.provide("jxmgrsec.main.user_center.basics.Ctrl");
jxmgrsec.main.user_center.basics.Ctrl.$inject = ["$controller", "$scope", "$timeout", "$filter", "$q", "basic", "constants"];
jxmgrsec.main.user_center.basics.Ctrl = function($controller, $scope, $timeout, $filter, $q, basic, constants) {
  this.label = "some other label from main.user_center.basics controller";
  this.parent = $controller(jxmgrsec.main.user_center.Ctrl);
  this.parent.log("`log` function called from child controller");
  $scope.dt = new Date;
  $scope.genders = constants.gotGENDERS();
  $scope.admin = {full_name:undefined, email:undefined, gender:undefined, birthday:undefined, phone:undefined, last_login:undefined};
  $scope.getAdminBasics = function() {
    basic.getAdminBasics().then(function(data) {
      $scope.admin = data.success_message;
      $scope.admin.last_login = $filter("unixTodate")($scope.admin.last_login);
    }, function(error) {
      $scope.addAlert("danger", "\u6570\u636e\u52a0\u8f7d\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.getAdminBasics();
  $scope.disabledBtn = false;
  $scope.saveAdminBasic = function() {
    $scope.disabledBtn = true;
    $scope.admin.birthday = $filter("date")($scope.admin.birthday, "yyyy/MM/dd");
    return basic.putAdminBasic($scope.admin).then(function(succ) {
      $scope.addAlert("success", "\u4fdd\u5b58\u6210\u529f\uff01");
      $timeout(function() {
        $scope.disabledBtn = false;
      }, 3E3);
    }, function(error) {
      console.log(error);
      $scope.disabledBtn = false;
      $scope.addAlert("danger", "\u4fdd\u5b58\u5931\u8d25,\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.maxDate = new Date;
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.opened = false;
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[2];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
};
goog.provide("jxmgrsec.main.user_center.basics.module");
goog.require("jxmgrsec.main.user_center.basics.Ctrl");
jxmgrsec.main.user_center.basics.module = angular.module("main.user_center.basics", ["ui.router"]);
jxmgrsec.main.user_center.basics.module.configuration = function($stateProvider) {
  $stateProvider.state("main.user_center.basics", {url:"/basics", templateUrl:"states/main/user_center/basics/basics.html", controller:"BasicsCtrl as basics", resolve:{"GENDERSPromise":function(constants) {
    return constants.GENDERSPromise;
  }}});
};
jxmgrsec.main.user_center.basics.module.config(jxmgrsec.main.user_center.basics.module.configuration).controller("BasicsCtrl", jxmgrsec.main.user_center.basics.Ctrl);
goog.provide("jxmgrsec.main.user_center.module");
goog.require("jxmgrsec.main.user_center.basics.module");
goog.require("jxmgrsec.main.user_center.password.module");
goog.require("jxmgrsec.main.user_center.avatar.module");
goog.require("jxmgrsec.main.user_center.Ctrl");
jxmgrsec.main.user_center.module = angular.module("main.user_center", ["ui.router", jxmgrsec.main.user_center.basics.module.name, jxmgrsec.main.user_center.password.module.name, jxmgrsec.main.user_center.avatar.module.name]);
jxmgrsec.main.user_center.module.configuration = function($stateProvider) {
  $stateProvider.state("main.user_center", {url:"/user_center", templateUrl:"states/main/user_center/user_center.html", controller:"UserCenterCtrl as userCenter"});
};
jxmgrsec.main.user_center.module.config(jxmgrsec.main.user_center.module.configuration).controller("UserCenterCtrl", jxmgrsec.main.user_center.Ctrl);
goog.provide("jxmgrsec.fileModel.Directive.factory");
jxmgrsec.fileModel.Directive = function($parse) {
  this.parse = $parse;
  this.link = this.link.bind(this);
  this.scope;
  this.elem;
  this.attrs;
};
jxmgrsec.fileModel.Directive.factory = function($parse) {
  var dir = new jxmgrsec.fileModel.Directive($parse);
  return {link:dir.link};
};
jxmgrsec.fileModel.Directive.prototype.link = function(scope, elem, attrs) {
  this.scope = scope;
  this.elem = elem;
  this.attrs = attrs;
  this.restrict = "A";
  var model = this.parse(attrs.fileModel);
  var modelSetter = model.assign;
  elem.bind("change", function() {
    scope.$apply(function() {
      modelSetter(scope, elem[0].files[0]);
    });
  });
};
goog.provide("jxmgrsec.version.Directive.factory");
jxmgrsec.version.Directive = function(version) {
  this.version = version;
  this.link = this.link.bind(this);
  this.scope;
  this.elem;
  this.attrs;
};
jxmgrsec.version.Directive.factory = function(version) {
  var dir = new jxmgrsec.version.Directive(version);
  return {link:dir.link};
};
jxmgrsec.version.Directive.prototype.link = function(scope, elem, attrs) {
  this.scope = scope;
  this.elem = elem;
  this.attrs = attrs;
  this.elem.text(this.version.get());
};
goog.provide("jxmgrsec.constants.Factory");
jxmgrsec.constants.Factory.$inject = ["$rootScope", "$http", "$q"];
jxmgrsec.constants.Factory = function($rootScope, $http, $q) {
  function getConstants(req) {
    req.url = $rootScope.endPoint + req.url;
    return $http(req).then(success).catch(fail);
    function success(response) {
      return response.data.success_message;
    }
    function fail(error) {
      return $q.reject("rejected");
    }
  }
  var DISTRICTS = [];
  var DISTRICTSPromise = getDistricts().then(function(data) {
    DISTRICTS = data.districts;
  }, function(data) {
    DISTRICTS = [];
  });
  function getDistricts() {
    var req = {method:"GET", url:"/common/constants/districts"};
    return getConstants(req);
  }
  function gotDISTRICTS() {
    return DISTRICTS;
  }
  var PROVINCES = [];
  var PROVINCESPromise = getProvinces().then(function(data) {
    PROVINCES = data.provinces;
  }, function(data) {
    PROVINCES = [];
  });
  function getProvinces() {
    var req = {method:"GET", url:"/common/constants/provinces"};
    return getConstants(req);
  }
  function gotPROVINCES() {
    return PROVINCES;
  }
  var CITIES = [];
  var CITIESPromise = getCities().then(function(data) {
    CITIES = data.cities;
  }, function(data) {
    CITIES = [];
  });
  function getCities() {
    var req = {method:"GET", url:"/common/constants/cities"};
    return getConstants(req);
  }
  function gotCITIES() {
    return CITIES;
  }
  var ZONES = [];
  var ZONESPromise = getZones().then(function(data) {
    ZONES = data.zones;
  }, function(data) {
    ZONES = [];
  });
  function getZones() {
    var req = {method:"GET", url:"/common/constants/zones"};
    return getConstants(req);
  }
  function gotZONES() {
    return ZONES;
  }
  var PRODUCTTYPES = [];
  var PRODUCTTYPESPromise = getProductTypes().then(function(data) {
    PRODUCTTYPES = data.product_types;
  }, function(data) {
    PRODUCTTYPES = [];
  });
  function getProductTypes() {
    var req = {method:"GET", url:"/common/constants/product_types"};
    return getConstants(req);
  }
  function gotPRODUCTTYPES() {
    return PRODUCTTYPES;
  }
  var DEVICETYPES = [];
  var DEVICETYPESPromise = getDeviceTypes().then(function(data) {
    DEVICETYPES = data.device_types;
  }, function(data) {
    DEVICETYPES = [];
  });
  function getDeviceTypes() {
    var req = {method:"GET", url:"/common/constants/device_types"};
    return getConstants(req);
  }
  function gotDEVICETYPES() {
    return DEVICETYPES;
  }
  var DATATYPES = [];
  var DATATYPESPromise = getDataTypes().then(function(data) {
    DATATYPES = data.data_types;
  }, function(data) {
    DATATYPES = [];
  });
  function getDataTypes() {
    var req = {method:"GET", url:"/common/constants/data_types"};
    return getConstants(req);
  }
  function gotDATATYPES() {
    return DATATYPES;
  }
  var FILETYPES = [];
  var FILETYPESPromise = getFileTypes().then(function(data) {
    FILETYPES = data.file_types;
  }, function(data) {
    FILETYPES = [];
  });
  function getFileTypes() {
    var req = {method:"GET", url:"/common/constants/file_types"};
    return getConstants(req);
  }
  function gotFILETYPES() {
    return FILETYPES;
  }
  var WRISTBANDCOLUMNS = [];
  var WRISTBANDCOLUMNSPromise = getWristbandColumns().then(function(data) {
    WRISTBANDCOLUMNS = data.columns;
  }, function(data) {
    WRISTBANDCOLUMNS = [];
  });
  function getWristbandColumns() {
    var req = {method:"GET", url:"/common/constants/wristband_columns"};
    return getConstants(req);
  }
  function gotWRISTBANDCOLUMNS() {
    return WRISTBANDCOLUMNS;
  }
  var SPHYGMOMANOMETERCOLUMNS = [];
  var SPHYGMOMANOMETERCOLUMNSPromise = getSphygmomanometerColumns().then(function(data) {
    SPHYGMOMANOMETERCOLUMNS = data.columns;
  }, function(data) {
    SPHYGMOMANOMETERCOLUMNS = [];
  });
  function getSphygmomanometerColumns() {
    var req = {method:"GET", url:"/common/constants/sphygmomanometer_columns"};
    return getConstants(req);
  }
  function gotSPHYGMOMANOMETERCOLUMNS() {
    return SPHYGMOMANOMETERCOLUMNS;
  }
  var GLUCOSEMETERCOLUMNS = [];
  var GLUCOSEMETERCOLUMNSPromise = getGlucosemeterColumns().then(function(data) {
    GLUCOSEMETERCOLUMNS = data.columns;
  }, function(data) {
    GLUCOSEMETERCOLUMNS = [];
  });
  function getGlucosemeterColumns() {
    var req = {method:"GET", url:"/common/constants/glucosemeter_columns"};
    return getConstants(req);
  }
  function gotGLUCOSEMETERCOLUMNS() {
    return GLUCOSEMETERCOLUMNS;
  }
  var THERMOMETERCOLUMNS = [];
  var THERMOMETERCOLUMNSPromise = getThermometerColumns().then(function(data) {
    THERMOMETERCOLUMNS = data.columns;
  }, function(data) {
    THERMOMETERCOLUMNS = [];
  });
  function getThermometerColumns() {
    var req = {method:"GET", url:"/common/constants/thermometer_columns"};
    return getConstants(req);
  }
  function gotTHERMOMETERCOLUMNS() {
    return THERMOMETERCOLUMNS;
  }
  var MANUFACTORIES = [];
  var MANUFACTORIESPromise = getManufactories().then(function(data) {
    MANUFACTORIES = data.columns;
  }, function(data) {
    MANUFACTORIES = [];
  });
  function getManufactories() {
    var req = {method:"GET", url:"/admins/db/manufactories"};
    return getConstants(req);
  }
  function gotMANUFACTORIES() {
    return MANUFACTORIES;
  }
  var OXIMETERCOLUMNS = [];
  var OXIMETERCOLUMNSPromise = getOximeterColumns().then(function(data) {
    OXIMETERCOLUMNS = data.columns;
  }, function(data) {
    OXIMETERCOLUMNS = [];
  });
  function getOximeterColumns() {
    var req = {method:"GET", url:"/common/constants/oximeter_columns"};
    return getConstants(req);
  }
  function gotOXIMETERCOLUMNS() {
    return OXIMETERCOLUMNS;
  }
  var FATCOLUMNS = [];
  var FATCOLUMNSPromise = getFatColumns().then(function(data) {
    FATCOLUMNS = data.columns;
  }, function(data) {
    FATCOLUMNS = [];
  });
  function getFatColumns() {
    var req = {method:"GET", url:"/common/constants/fat_columns"};
    return getConstants(req);
  }
  function gotFATCOLUMNS() {
    return FATCOLUMNS;
  }
  var COMPARISONOPS = [];
  var COMPARISONOPSPromise = getComparisonOps().then(function(data) {
    COMPARISONOPS = data.ops;
  }, function(data) {
    COMPARISONOPS = [];
  });
  function getComparisonOps() {
    var req = {method:"GET", url:"/common/constants/comparison_ops"};
    return getConstants(req);
  }
  function gotCOMPARISONOPS() {
    return COMPARISONOPS;
  }
  var LOGICALOPS = [];
  var LOGICALOPSPromise = getLogicalOps().then(function(data) {
    LOGICALOPS = data.ops;
  }, function(data) {
    LOGICALOPS = [];
  });
  function getLogicalOps() {
    var req = {method:"GET", url:"/common/constants/logical_ops"};
    return getConstants(req);
  }
  function gotLOGICALOPS() {
    return LOGICALOPS;
  }
  var PERIODS = [];
  var PERIODSPromise = getPeriods().then(function(data) {
    PERIODS = data.periods;
  }, function(data) {
    PERIODS = [];
  });
  function getPeriods() {
    var req = {method:"GET", url:"/common/constants/periods"};
    return getConstants(req);
  }
  function gotPERIODS() {
    return PERIODS;
  }
  var USERSTATUS = [];
  var USERSTATUSPromise = getUserStatus().then(function(data) {
    USERSTATUS = data.user_status_list;
  }, function(data) {
    USERSTATUS = [];
  });
  function getUserStatus() {
    var req = {method:"GET", url:"/common/constants/user_status"};
    return getConstants(req);
  }
  function gotUSERSTATUS() {
    return USERSTATUS;
  }
  var MANUFACTORYSTATUS = [];
  var MANUFACTORYSTATUSPromise = getManufactoryStatus().then(function(data) {
    MANUFACTORYSTATUS = data.manufactory_status_list;
  }, function(data) {
    MANUFACTORYSTATUS = [];
  });
  function getManufactoryStatus() {
    var req = {method:"GET", url:"/common/constants/manufactory_status"};
    return getConstants(req);
  }
  function gotMANUFACTORYSTATUS() {
    return MANUFACTORYSTATUS;
  }
  var TERMINALSTATUS = [];
  var TERMINALSTATUSPromise = getTerminalStatus().then(function(data) {
    TERMINALSTATUS = data.terminal_status_list;
  }, function(data) {
    TERMINALSTATUS = [];
  });
  function getTerminalStatus() {
    var req = {method:"GET", url:"/common/constants/terminal_status"};
    return getConstants(req);
  }
  function gotTERMINALSTATUS() {
    return TERMINALSTATUS;
  }
  var DOCTORSTATUS = [];
  var DOCTORSTATUSPromise = getDoctorStatus().then(function(data) {
    DOCTORSTATUS = data.doctor_status_list;
  }, function(data) {
    DOCTORSTATUS = [];
  });
  function getDoctorStatus() {
    var req = {method:"GET", url:"/common/constants/doctor_status"};
    return getConstants(req);
  }
  function gotDOCTORSTATUS() {
    return DOCTORSTATUS;
  }
  var HEALTHCONSULTATIONSTATUS = [];
  var HEALTHCONSULTATIONSTATUSPromise = getHealthConsultationStatus().then(function(data) {
    HEALTHCONSULTATIONSTATUS = data.consultation_status_list;
  }, function(data) {
    HEALTHCONSULTATIONSTATUS = [];
  });
  function getHealthConsultationStatus() {
    var req = {method:"GET", url:"/common/constants/health_consultation_status"};
    return getConstants(req);
  }
  function gotHEALTHCONSULTATIONSTATUS() {
    return HEALTHCONSULTATIONSTATUS;
  }
  var HEALTHDATASTATUS = [];
  var HEALTHDATASTATUSPromise = getHealthDataStatus().then(function(data) {
    HEALTHDATASTATUS = data.data_status_list;
  }, function(data) {
    HEALTHDATASTATUS = [];
  });
  function getHealthDataStatus() {
    var req = {method:"GET", url:"/common/constants/health_data_status"};
    return getConstants(req);
  }
  function gotHEALTHDATASTATUS() {
    return HEALTHDATASTATUS;
  }
  var HEALTHFILESTATUS = [];
  var HEALTHFILESTATUSPromise = getHealthFileStatus().then(function(data) {
    HEALTHFILESTATUS = data.file_status_list;
  }, function(data) {
    HEALTHFILESTATUS = [];
  });
  function getHealthFileStatus() {
    var req = {method:"GET", url:"/common/constants/health_file_status"};
    return getConstants(req);
  }
  function gotHEALTHFILESTATUS() {
    return HEALTHFILESTATUS;
  }
  var COMPANYDEPARTMENTS = [];
  var COMPANYDEPARTMENTSPromise = getCompanyDepartments().then(function(data) {
    COMPANYDEPARTMENTS = data.departments;
  }, function(data) {
    COMPANYDEPARTMENTS = [];
  });
  function getCompanyDepartments() {
    var req = {method:"GET", url:"/common/constants/company_departments"};
    return getConstants(req);
  }
  function gotCOMPANYDEPARTMENTS() {
    return COMPANYDEPARTMENTS;
  }
  var COMPANYMEMBERS = [];
  var COMPANYMEMBERSPromise = getCompanyMembers().then(function(data) {
    COMPANYMEMBERS = data.members;
  }, function(data) {
    COMPANYMEMBERS = [];
  });
  function getCompanyMembers() {
    var req = {method:"GET", url:"/common/constants/company_members"};
    return getConstants(req);
  }
  function gotCOMPANYMEMBERS() {
    return COMPANYMEMBERS;
  }
  var COMPANYNATURES = [];
  var COMPANYNATURESPromise = getCompanyNatures().then(function(data) {
    COMPANYNATURES = data.natures;
  }, function(data) {
    COMPANYNATURES = [];
  });
  function getCompanyNatures() {
    var req = {method:"GET", url:"/common/constants/company_natures"};
    return getConstants(req);
  }
  function gotCOMPANYNATURES() {
    return COMPANYNATURES;
  }
  var COMPANYINDUSTRIES = [];
  var COMPANYINDUSTRIESPromise = getCompanyIndustries().then(function(data) {
    COMPANYINDUSTRIES = data.industries;
  }, function(data) {
    COMPANYINDUSTRIES = [];
  });
  function getCompanyIndustries() {
    var req = {method:"GET", url:"/common/constants/company_industries"};
    return getConstants(req);
  }
  function gotCOMPANYINDUSTRIES() {
    return COMPANYINDUSTRIES;
  }
  var QINGNAMES = [];
  var QINGNAMESPromise = getQingNames().then(function(data) {
    QINGNAMES = data.name_list;
  }, function(data) {
    QINGNAMES = [];
  });
  function getQingNames() {
    var req = {method:"GET", url:"/common/constants/twatch_qing_names"};
    return getConstants(req);
  }
  function gotQINGNAMES() {
    return QINGNAMES;
  }
  var SOSNAMES = [];
  var SOSNAMESPromise = getSosNames().then(function(data) {
    SOSNAMES = data.name_list;
  }, function(data) {
    SOSNAMES = [];
  });
  function getSosNames() {
    var req = {method:"GET", url:"/common/constants/twatch_sos_names"};
    return getConstants(req);
  }
  function gotSOSNAMES() {
    return SOSNAMES;
  }
  var WORKMODES = [];
  var WORKMODESPromise = getWorkModes().then(function(data) {
    WORKMODES = data.mode_list;
  }, function(data) {
    WORKMODES = [];
  });
  function getWorkModes() {
    var req = {method:"GET", url:"/common/constants/twatch_work_modes"};
    return getConstants(req);
  }
  function gotWORKMODES() {
    return WORKMODES;
  }
  var WORKTYPES = [];
  var WORKTYPESPromise = getWorkTypes().then(function(data) {
    WORKTYPES = data.type_list;
  }, function(data) {
    WORKTYPES = [];
  });
  function getWorkTypes() {
    var req = {method:"GET", url:"/common/constants/twatch_work_types"};
    return getConstants(req);
  }
  function gotWORKTYPES() {
    return WORKTYPES;
  }
  var ALARMEVENTS = [];
  var ALARMEVENTSPromise = getAlarmEvents().then(function(data) {
    ALARMEVENTS = data.event_list;
  }, function(data) {
    ALARMEVENTS = [];
  });
  function getAlarmEvents() {
    var req = {method:"GET", url:"/common/constants/twatch_alarm_events"};
    return getConstants(req);
  }
  function gotALARMEVENTS() {
    return ALARMEVENTS;
  }
  var PERIODSTATES = [];
  var PERIODSTATESPromise = getPeriodStates().then(function(data) {
    PERIODSTATES = data.state_list;
  }, function(data) {
    PERIODSTATES = [];
  });
  function getPeriodStates() {
    var req = {method:"GET", url:"/common/constants/twatch_period_states"};
    return getConstants(req);
  }
  function gotPERIODSTATES() {
    return PERIODSTATES;
  }
  var ROUTESTATES = [];
  var ROUTESTATESPromise = getRouteStates().then(function(data) {
    ROUTESTATES = data.state_list;
  }, function(data) {
    ROUTESTATES = [];
  });
  function getRouteStates() {
    var req = {method:"GET", url:"/common/constants/twatch_route_states"};
    return getConstants(req);
  }
  function gotROUTESTATES() {
    return ROUTESTATES;
  }
  var GPSMODES = [];
  var GPSMODESPromise = getGpsModes().then(function(data) {
    GPSMODES = data.mode_list;
  }, function(data) {
    GPSMODES = [];
  });
  function getGpsModes() {
    var req = {method:"GET", url:"/common/constants/twatch_gps_modes"};
    return getConstants(req);
  }
  function gotGPSMODES() {
    return GPSMODES;
  }
  var PENSHAPES = [];
  var PENSHAPESPromise = getPenShapes().then(function(data) {
    PENSHAPES = data.shape_list;
  }, function(data) {
    PENSHAPES = [];
  });
  function getPenShapes() {
    var req = {method:"GET", url:"/common/constants/twatch_pen_shapes"};
    return getConstants(req);
  }
  function gotPENSHAPES() {
    return PENSHAPES;
  }
  var WEEKDAYS = [{"day_id":1, "day_cn_s":"\u4e00", "day_cn_t":"\u661f\u671f\u4e00", "day_en_s":"Mo", "day_en_t":"Monday"}, {"day_id":2, "day_cn_s":"\u4e8c", "day_cn_t":"\u661f\u671f\u4e8c", "day_en_s":"Tu", "day_en_t":"Tuesday"}, {"day_id":3, "day_cn_s":"\u4e09", "day_cn_t":"\u661f\u671f\u4e09", "day_en_s":"We", "day_en_t":"Wensday"}, {"day_id":4, "day_cn_s":"\u56db", "day_cn_t":"\u661f\u671f\u56db", "day_en_s":"Th", "day_en_t":"Thursday"}, {"day_id":5, "day_cn_s":"\u4e94", "day_cn_t":"\u661f\u671f\u4e94", 
  "day_en_s":"Fr", "day_en_t":"Friday"}, {"day_id":6, "day_cn_s":"\u516d", "day_cn_t":"\u661f\u671f\u516d", "day_en_s":"Sa", "day_en_t":"Saturday"}, {"day_id":7, "day_cn_s":"\u65e5", "day_cn_t":"\u661f\u671f\u65e5", "day_en_s":"Su", "day_en_t":"Sunday"}];
  function getWeekDays() {
    return WEEKDAYS;
  }
  function gotWEEKDAYS() {
    return WEEKDAYS;
  }
  function weekDayHelperInt2Array(days_int) {
    var days_array = [];
    for (var i = 0;i < 7;i++) {
      if (days_int >> i & 1) {
        days_array.push(i + 1);
      }
    }
    return days_array;
  }
  function weekDayHelperArray2Int(days_array) {
    var days_int = 0;
    for (var i = 0;i < days_array.length;i++) {
      days_int |= 1 << days_array[i] - 1;
    }
    return days_int;
  }
  var DEPARTMENTS = [];
  var DEPARTMENTSPromise = getDepartments().then(function(data) {
    DEPARTMENTS = data.departments;
  }, function(data) {
    DEPARTMENTS = [];
  });
  function getDepartments() {
    var req = {method:"GET", url:"/common/constants/departments"};
    return getConstants(req);
  }
  function gotDEPARTMENTS() {
    return DEPARTMENTS;
  }
  var GENDERS = [];
  var GENDERSPromise = getGenders().then(function(data) {
    GENDERS = data.genders;
  }, function(data) {
    GENDERS = [];
  });
  function getGenders() {
    var req = {method:"GET", url:"/common/constants/genders"};
    return getConstants(req);
  }
  function gotGENDERS() {
    return GENDERS;
  }
  var service = {getConstants:getConstants, getDistricts:getDistricts, gotDISTRICTS:gotDISTRICTS, DISTRICTSPromise:DISTRICTSPromise, getProvinces:getProvinces, gotPROVINCES:gotPROVINCES, PROVINCESPromise:PROVINCESPromise, getCities:getCities, gotCITIES:gotCITIES, CITIESPromise:CITIESPromise, getZones:getZones, gotZONES:gotZONES, ZONESPromise:ZONESPromise, getProductTypes:getProductTypes, gotPRODUCTTYPES:gotPRODUCTTYPES, PRODUCTTYPESPromise:PRODUCTTYPESPromise, getDeviceTypes:getDeviceTypes, gotDEVICETYPES:gotDEVICETYPES, 
  DEVICETYPESPromise:DEVICETYPESPromise, getDataTypes:getDataTypes, gotDATATYPES:gotDATATYPES, DATATYPESPromise:DATATYPESPromise, getFileTypes:getFileTypes, gotFILETYPES:gotFILETYPES, FILETYPESPromise:FILETYPESPromise, getWristbandColumns:getWristbandColumns, gotWRISTBANDCOLUMNS:gotWRISTBANDCOLUMNS, WRISTBANDCOLUMNSPromise:WRISTBANDCOLUMNSPromise, getSphygmomanometerColumns:getSphygmomanometerColumns, gotSPHYGMOMANOMETERCOLUMNS:gotSPHYGMOMANOMETERCOLUMNS, SPHYGMOMANOMETERCOLUMNSPromise:SPHYGMOMANOMETERCOLUMNSPromise, 
  getGlucosemeterColumns:getGlucosemeterColumns, gotGLUCOSEMETERCOLUMNS:gotGLUCOSEMETERCOLUMNS, GLUCOSEMETERCOLUMNSPromise:GLUCOSEMETERCOLUMNSPromise, getThermometerColumns:getThermometerColumns, gotTHERMOMETERCOLUMNS:gotTHERMOMETERCOLUMNS, THERMOMETERCOLUMNSPromise:THERMOMETERCOLUMNSPromise, getOximeterColumns:getOximeterColumns, gotOXIMETERCOLUMNS:gotOXIMETERCOLUMNS, OXIMETERCOLUMNSPromise:OXIMETERCOLUMNSPromise, getManufactories:getManufactories, gotMANUFACTORIES:gotMANUFACTORIES, MANUFACTORIESPromise:MANUFACTORIESPromise, 
  getFatColumns:getFatColumns, gotFATCOLUMNS:gotFATCOLUMNS, FATCOLUMNSPromise:FATCOLUMNSPromise, getComparisonOps:getComparisonOps, gotCOMPARISONOPS:gotCOMPARISONOPS, COMPARISONOPSPromise:COMPARISONOPSPromise, getLogicalOps:getLogicalOps, gotLOGICALOPS:gotLOGICALOPS, LOGICALOPSPromise:LOGICALOPSPromise, getPeriods:getPeriods, gotPERIODS:gotPERIODS, PERIODSPromise:PERIODSPromise, getUserStatus:getUserStatus, gotUSERSTATUS:gotUSERSTATUS, USERSTATUSPromise:USERSTATUSPromise, getManufactoryStatus:getManufactoryStatus, 
  gotMANUFACTORYSTATUS:gotMANUFACTORYSTATUS, MANUFACTORYSTATUSPromise:MANUFACTORYSTATUSPromise, getTerminalStatus:getTerminalStatus, gotTERMINALSTATUS:gotTERMINALSTATUS, TERMINALSTATUSPromise:TERMINALSTATUSPromise, getDoctorStatus:getDoctorStatus, gotDOCTORSTATUS:gotDOCTORSTATUS, DOCTORSTATUSPromise:DOCTORSTATUSPromise, getHealthConsultationStatus:getHealthConsultationStatus, gotHEALTHCONSULTATIONSTATUS:gotHEALTHCONSULTATIONSTATUS, HEALTHCONSULTATIONSTATUSPromise:HEALTHCONSULTATIONSTATUSPromise, 
  getHealthDataStatus:getHealthDataStatus, gotHEALTHDATASTATUS:gotHEALTHDATASTATUS, HEALTHDATASTATUSPromise:HEALTHDATASTATUSPromise, getHealthFileStatus:getHealthFileStatus, gotHEALTHFILESTATUS:gotHEALTHFILESTATUS, HEALTHFILESTATUSPromise:HEALTHFILESTATUSPromise, getCompanyDepartments:getCompanyDepartments, gotCOMPANYDEPARTMENTS:gotCOMPANYDEPARTMENTS, COMPANYDEPARTMENTSPromise:COMPANYDEPARTMENTSPromise, getCompanyMembers:getCompanyMembers, gotCOMPANYMEMBERS:gotCOMPANYMEMBERS, COMPANYMEMBERSPromise:COMPANYMEMBERSPromise, 
  getCompanyNatures:getCompanyNatures, gotCOMPANYNATURES:gotCOMPANYNATURES, COMPANYNATURESPromise:COMPANYNATURESPromise, getCompanyIndustries:getCompanyIndustries, gotCOMPANYINDUSTRIES:gotCOMPANYINDUSTRIES, COMPANYINDUSTRIESPromise:COMPANYINDUSTRIESPromise, getDepartments:getDepartments, gotDEPARTMENTS:gotDEPARTMENTS, DEPARTMENTSPromise:DEPARTMENTSPromise, getGenders:getGenders, gotGENDERS:gotGENDERS, GENDERSPromise:GENDERSPromise, getQingNames:getQingNames, gotQINGNAMES:gotQINGNAMES, QINGNAMESPromise:QINGNAMESPromise, 
  getSosNames:getSosNames, gotSOSNAMES:gotSOSNAMES, SOSNAMESPromise:SOSNAMESPromise, getWorkModes:getWorkModes, gotWORKMODES:gotWORKMODES, WORKMODESPromise:WORKMODESPromise, getWorkTypes:getWorkTypes, gotWORKTYPES:gotWORKTYPES, WORKTYPESPromise:WORKTYPESPromise, getAlarmEvents:getAlarmEvents, gotALARMEVENTS:gotALARMEVENTS, ALARMEVENTSPromise:ALARMEVENTSPromise, getPeriodStates:getPeriodStates, gotPERIODSTATES:gotPERIODSTATES, PERIODSTATESPromise:PERIODSTATESPromise, getRouteStates:getRouteStates, 
  gotROUTESTATES:gotROUTESTATES, ROUTESTATESPromise:ROUTESTATESPromise, getGpsModes:getGpsModes, gotGPSMODES:gotGPSMODES, GPSMODESPromise:GPSMODESPromise, getPenShapes:getPenShapes, gotPENSHAPES:gotPENSHAPES, PENSHAPESPromise:PENSHAPESPromise, getWeekDays:getWeekDays, gotWEEKDAYS:gotWEEKDAYS, weekDayHelperInt2Array:weekDayHelperInt2Array, weekDayHelperArray2Int:weekDayHelperArray2Int};
  return service;
};
goog.provide("jxmgrsec.company_department.Filter.factory");
jxmgrsec.company_department.Filter = function(constants) {
  this.gotCOMPANYDEPARTMENTS = constants.gotCOMPANYDEPARTMENTS;
  this.convert = this.convert.bind(this);
};
jxmgrsec.company_department.Filter.factory = function(constants) {
  var filter = new jxmgrsec.company_department.Filter(constants);
  return filter.convert;
};
jxmgrsec.company_department.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var company_departments = this.gotCOMPANYDEPARTMENTS();
    var company_department = company_departments.filter(function(item) {
      return input === item.department_id;
    });
    return company_department.length > 0 ? company_department[0].department_name : "";
  }
};
goog.provide("jxmgrsec.company_member.Filter.factory");
jxmgrsec.company_member.Filter = function(constants) {
  this.gotCOMPANYMEMBERS = constants.gotCOMPANYMEMBERS;
  this.convert = this.convert.bind(this);
};
jxmgrsec.company_member.Filter.factory = function(constants) {
  var filter = new jxmgrsec.company_member.Filter(constants);
  return filter.convert;
};
jxmgrsec.company_member.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var company_members = this.gotCOMPANYMEMBERS();
    var company_member = company_members.filter(function(item) {
      return input === item.member_id;
    });
    return company_member.length > 0 ? company_member[0].member_name : "";
  }
};
goog.provide("jxmgrsec.company_nature.Filter.factory");
jxmgrsec.company_nature.Filter = function(constants) {
  this.gotCOMPANYNATURES = constants.gotCOMPANYNATURES;
  this.convert = this.convert.bind(this);
};
jxmgrsec.company_nature.Filter.factory = function(constants) {
  var filter = new jxmgrsec.company_nature.Filter(constants);
  return filter.convert;
};
jxmgrsec.company_nature.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var company_natures = this.gotCOMPANYNATURES();
    var company_nature = company_natures.filter(function(item) {
      return input === item.nature_id;
    });
    return company_nature.length > 0 ? company_nature[0].nature_name : "";
  }
};
goog.provide("jxmgrsec.company_industry.Filter.factory");
jxmgrsec.company_industry.Filter = function(constants) {
  this.gotCOMPANYINDUSTRIES = constants.gotCOMPANYINDUSTRIES;
  this.convert = this.convert.bind(this);
};
jxmgrsec.company_industry.Filter.factory = function(constants) {
  var filter = new jxmgrsec.company_industry.Filter(constants);
  return filter.convert;
};
jxmgrsec.company_industry.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var company_industries = this.gotCOMPANYINDUSTRIES();
    var company_industry = company_industries.filter(function(item) {
      return input === item.industry_id;
    });
    return company_industry.length > 0 ? company_industry[0].industry_name : "";
  }
};
goog.provide("jxmgrsec.dateTounix.Filter.factory");
jxmgrsec.dateTounix.Filter = function() {
  this.checkmark = "\u2714";
  this.cross = "\u2718";
  this.convert = this.convert.bind(this);
};
jxmgrsec.dateTounix.Filter.factory = function() {
  var filter = new jxmgrsec.dateTounix.Filter;
  return filter.convert;
};
jxmgrsec.dateTounix.Filter.prototype.convert = function(input) {
  if (!input) {
    return "";
  } else {
    var tmp_datetime = input.toString().replace(/:/g, "-");
    tmp_datetime = tmp_datetime.toString().replace(/ /g, "-");
    var arr = tmp_datetime.split("-");
    var now = new Date(Date.UTC(arr[0], arr[1] - 1, arr[2], arr[3] - 8, arr[4], arr[5]));
    return parseInt(now.getTime() / 1E3);
  }
};
goog.provide("jxmgrsec.gender.Filter.factory");
jxmgrsec.gender.Filter = function(constants) {
  this.gotGENDERS = constants.gotGENDERS;
  this.convert = this.convert.bind(this);
};
jxmgrsec.gender.Filter.factory = function(constants) {
  var filter = new jxmgrsec.gender.Filter(constants);
  return filter.convert;
};
jxmgrsec.gender.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var genders = this.gotGENDERS();
    var gender = genders.filter(function(item) {
      return input === item.gender_id;
    });
    return gender.length > 0 ? gender[0].gender_name : "";
  }
};
goog.provide("jxmgrsec.district.Filter.factory");
jxmgrsec.district.Filter = function(constants) {
  this.gotDISTRICTS = constants.gotDISTRICTS;
  this.convert = this.convert.bind(this);
};
jxmgrsec.district.Filter.factory = function(constants) {
  var filter = new jxmgrsec.district.Filter(constants);
  return filter.convert;
};
jxmgrsec.district.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var districts = this.gotDISTRICTS();
    var district = districts.filter(function(item) {
      return input === item.district_id;
    });
    return district.length > 0 ? district[0].district_name : "";
  }
};
goog.provide("jxmgrsec.province.Filter.factory");
jxmgrsec.province.Filter = function(constants) {
  this.gotPROVINCES = constants.gotPROVINCES;
  this.convert = this.convert.bind(this);
};
jxmgrsec.province.Filter.factory = function(constants) {
  var filter = new jxmgrsec.province.Filter(constants);
  return filter.convert;
};
jxmgrsec.province.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var provinces = this.gotPROVINCES();
    var province = provinces.filter(function(item) {
      return input === item.province_id;
    });
    return province.length > 0 ? province[0].province_name : "";
  }
};
goog.provide("jxmgrsec.city.Filter.factory");
jxmgrsec.city.Filter = function(constants) {
  this.gotCITIES = constants.gotCITIES;
  this.convert = this.convert.bind(this);
};
jxmgrsec.city.Filter.factory = function(constants) {
  var filter = new jxmgrsec.city.Filter(constants);
  return filter.convert;
};
jxmgrsec.city.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var cities = this.gotCITIES();
    var city = cities.filter(function(item) {
      return input === item.city_id;
    });
    return city.length > 0 ? city[0].city_name : "";
  }
};
goog.provide("jxmgrsec.zone.Filter.factory");
jxmgrsec.zone.Filter = function(constants) {
  this.gotZONES = constants.gotZONES;
  this.convert = this.convert.bind(this);
};
jxmgrsec.zone.Filter.factory = function(constants) {
  var filter = new jxmgrsec.zone.Filter(constants);
  return filter.convert;
};
jxmgrsec.zone.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var zones = this.gotZONES();
    var zone = zones.filter(function(item) {
      return input === item.zone_id;
    });
    return zone.length > 0 ? zone[0].zone_name : "";
  }
};
goog.provide("jxmgrsec.data_type.Filter.factory");
jxmgrsec.data_type.Filter = function(constants) {
  this.gotDATATYPES = constants.gotDATATYPES;
  this.convert = this.convert.bind(this);
};
jxmgrsec.data_type.Filter.factory = function(constants) {
  var filter = new jxmgrsec.data_type.Filter(constants);
  return filter.convert;
};
jxmgrsec.data_type.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var data_types = this.gotDATATYPES();
    var data_type = data_types.filter(function(item) {
      return input === item.data_type_id;
    });
    return data_type.length > 0 ? data_type[0].data_type_name : "";
  }
};
goog.provide("jxmgrsec.file_type.Filter.factory");
jxmgrsec.file_type.Filter = function(constants) {
  this.gotFILETYPES = constants.gotFILETYPES;
  this.convert = this.convert.bind(this);
};
jxmgrsec.file_type.Filter.factory = function(constants) {
  var filter = new jxmgrsec.file_type.Filter(constants);
  return filter.convert;
};
jxmgrsec.file_type.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var file_types = this.gotFILETYPES();
    var file_type = file_types.filter(function(item) {
      return input === item.file_type_id;
    });
    return file_type.length > 0 ? file_type[0].file_type_name : "";
  }
};
goog.provide("jxmgrsec.wristband_column.Filter.factory");
jxmgrsec.wristband_column.Filter = function(constants) {
  this.checkmark = "\u2714";
  this.cross = "\u2718";
  this.gotWRISTBANDCOLUMNS = constants.gotWRISTBANDCOLUMNS;
  this.convert = this.convert.bind(this);
};
jxmgrsec.wristband_column.Filter.factory = function(constants) {
  var filter = new jxmgrsec.wristband_column.Filter(constants);
  return filter.convert;
};
jxmgrsec.wristband_column.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var wristband_columns = this.gotWRISTBANDCOLUMNS();
    var wristband_column = wristband_columns.filter(function(item) {
      return input === item.column_id;
    });
    return wristband_column.length > 0 ? wristband_column[0].column_name : "";
  }
};
goog.provide("jxmgrsec.sphygmomanometer_column.Filter.factory");
jxmgrsec.sphygmomanometer_column.Filter = function(constants) {
  this.gotSPHYGMOMANOMETERCOLUMNS = constants.gotSPHYGMOMANOMETERCOLUMNS;
  this.convert = this.convert.bind(this);
};
jxmgrsec.sphygmomanometer_column.Filter.factory = function(constants) {
  var filter = new jxmgrsec.sphygmomanometer_column.Filter(constants);
  return filter.convert;
};
jxmgrsec.sphygmomanometer_column.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var sphygmomanometer_columns = this.gotSPHYGMOMANOMETERCOLUMNS();
    var sphygmomanometer_column = sphygmomanometer_columns.filter(function(item) {
      return input === item.column_id;
    });
    return sphygmomanometer_column.length > 0 ? sphygmomanometer_column[0].column_name : "";
  }
};
goog.provide("jxmgrsec.glucosemeter_column.Filter.factory");
jxmgrsec.glucosemeter_column.Filter = function(constants) {
  this.gotGLUCOSEMETERCOLUMNS = constants.gotGLUCOSEMETERCOLUMNS;
  this.convert = this.convert.bind(this);
};
jxmgrsec.glucosemeter_column.Filter.factory = function(constants) {
  var filter = new jxmgrsec.glucosemeter_column.Filter(constants);
  return filter.convert;
};
jxmgrsec.glucosemeter_column.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var glucosemeter_columns = this.gotGLUCOSEMETERCOLUMNS();
    var glucosemeter_column = glucosemeter_columns.filter(function(item) {
      return input === item.column_id;
    });
    return glucosemeter_column.length > 0 ? glucosemeter_column[0].column_name : "";
  }
};
goog.provide("jxmgrsec.thermometer_column.Filter.factory");
jxmgrsec.thermometer_column.Filter = function(constants) {
  this.gotTHERMOMETERCOLUMNS = constants.gotTHERMOMETERCOLUMNS;
  this.convert = this.convert.bind(this);
};
jxmgrsec.thermometer_column.Filter.factory = function(constants) {
  var filter = new jxmgrsec.thermometer_column.Filter(constants);
  return filter.convert;
};
jxmgrsec.thermometer_column.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var thermometer_columns = this.gotTHERMOMETERCOLUMNS();
    var thermometer_column = thermometer_columns.filter(function(item) {
      return input === item.column_id;
    });
    return thermometer_column.length > 0 ? thermometer_column[0].column_name : "";
  }
};
goog.provide("jxmgrsec.oximeter_column.Filter.factory");
jxmgrsec.oximeter_column.Filter = function(constants) {
  this.gotOXIMETERCOLUMNS = constants.gotOXIMETERCOLUMNS;
  this.convert = this.convert.bind(this);
};
jxmgrsec.oximeter_column.Filter.factory = function(constants) {
  var filter = new jxmgrsec.oximeter_column.Filter(constants);
  return filter.convert;
};
jxmgrsec.oximeter_column.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var oximeter_columns = this.gotOXIMETERCOLUMNS();
    var oximeter_column = oximeter_columns.filter(function(item) {
      return input === item.column_id;
    });
    return oximeter_column.length > 0 ? oximeter_column[0].column_name : "";
  }
};
goog.provide("jxmgrsec.fat_column.Filter.factory");
jxmgrsec.fat_column.Filter = function(constants) {
  this.gotFATCOLUMNS = constants.gotFATCOLUMNS;
  this.convert = this.convert.bind(this);
};
jxmgrsec.fat_column.Filter.factory = function(constants) {
  var filter = new jxmgrsec.fat_column.Filter(constants);
  return filter.convert;
};
jxmgrsec.fat_column.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var fat_columns = this.gotFATCOLUMNS();
    var fat_column = fat_columns.filter(function(item) {
      return input === item.column_id;
    });
    return fat_column.length > 0 ? fat_column[0].column_name : "";
  }
};
goog.provide("jxmgrsec.comparison_ops.Filter.factory");
jxmgrsec.comparison_ops.Filter = function(constants) {
  this.gotCOMPARISONOPS = constants.gotCOMPARISONOPS;
  this.convert = this.convert.bind(this);
};
jxmgrsec.comparison_ops.Filter.factory = function(constants) {
  var filter = new jxmgrsec.comparison_ops.Filter(constants);
  return filter.convert;
};
jxmgrsec.comparison_ops.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var comparison_ops = this.gotCOMPARISONOPS();
    var comparison_op = comparison_ops.filter(function(item) {
      return input === item.op_id;
    });
    return comparison_op.length > 0 ? comparison_op[0].op_name : "";
  }
};
goog.provide("jxmgrsec.logical_ops.Filter.factory");
jxmgrsec.logical_ops.Filter = function(constants) {
  this.gotLOGICALOPS = constants.gotLOGICALOPS;
  this.convert = this.convert.bind(this);
};
jxmgrsec.logical_ops.Filter.factory = function(constants) {
  var filter = new jxmgrsec.logical_ops.Filter(constants);
  return filter.convert;
};
jxmgrsec.logical_ops.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var logical_ops = this.gotLOGICALOPS();
    var logical_op = logical_ops.filter(function(item) {
      return input === item.op_id;
    });
    return logical_op.length > 0 ? logical_op[0].op_name : "";
  }
};
goog.provide("jxmgrsec.periods.Filter.factory");
jxmgrsec.periods.Filter = function(constants) {
  this.gotPERIODS = constants.gotPERIODS;
  this.convert = this.convert.bind(this);
};
jxmgrsec.periods.Filter.factory = function(constants) {
  var filter = new jxmgrsec.periods.Filter(constants);
  return filter.convert;
};
jxmgrsec.periods.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var periods = this.gotPERIODS();
    var period = periods.filter(function(item) {
      return input === item.period_id;
    });
    return period.length > 0 ? period[0].period_name : "";
  }
};
goog.provide("jxmgrsec.helath_consultation_status.Filter.factory");
jxmgrsec.helath_consultation_status.Filter = function(constants) {
  this.gotHEALTHCONSULTATIONSTATUS = constants.gotHEALTHCONSULTATIONSTATUS;
  this.convert = this.convert.bind(this);
};
jxmgrsec.helath_consultation_status.Filter.factory = function(constants) {
  var filter = new jxmgrsec.helath_consultation_status.Filter(constants);
  return filter.convert;
};
jxmgrsec.helath_consultation_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var helath_consultation_statuses = this.gotHEALTHCONSULTATIONSTATUS();
    var helath_consultation_status = helath_consultation_statuses.filter(function(item) {
      return input === item.consultation_status_id;
    });
    return helath_consultation_status.length > 0 ? helath_consultation_status[0].consultation_status_name : "";
  }
};
goog.provide("jxmgrsec.health_data_status.Filter.factory");
jxmgrsec.health_data_status.Filter = function(constants) {
  this.gotHEALTHDATASTATUS = constants.gotHEALTHDATASTATUS;
  this.convert = this.convert.bind(this);
};
jxmgrsec.health_data_status.Filter.factory = function(constants) {
  var filter = new jxmgrsec.health_data_status.Filter(constants);
  return filter.convert;
};
jxmgrsec.health_data_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var health_data_statuses = this.gotHEALTHDATASTATUS();
    var health_data_status = health_data_statuses.filter(function(item) {
      return input === item.data_status_id;
    });
    return health_data_status.length > 0 ? health_data_status[0].data_status_name : "";
  }
};
goog.provide("jxmgrsec.health_file_status.Filter.factory");
jxmgrsec.health_file_status.Filter = function(constants) {
  this.gotHEALTHFILESTATUS = constants.gotHEALTHFILESTATUS;
  this.convert = this.convert.bind(this);
};
jxmgrsec.health_file_status.Filter.factory = function(constants) {
  var filter = new jxmgrsec.health_file_status.Filter(constants);
  return filter.convert;
};
jxmgrsec.health_file_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var health_file_statuses = this.gotHEALTHFILESTATUS();
    var health_file_status = health_file_statuses.filter(function(item) {
      return input === item.file_status_id;
    });
    return health_file_status.length > 0 ? health_file_status[0].file_status_name : "";
  }
};
goog.provide("jxmgrsec.department.Filter.factory");
jxmgrsec.department.Filter = function(constants) {
  this.gotDEPARTMENTS = constants.gotDEPARTMENTS;
  this.convert = this.convert.bind(this);
};
jxmgrsec.department.Filter.factory = function(constants) {
  var filter = new jxmgrsec.department.Filter(constants);
  return filter.convert;
};
jxmgrsec.department.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var departments = this.gotDEPARTMENTS();
    var department = departments.filter(function(item) {
      return input === item.department_id;
    });
    return department.length > 0 ? department[0].department_name : "";
  }
};
goog.provide("jxmgrsec.user_status.Filter.factory");
jxmgrsec.user_status.Filter = function(constants) {
  this.gotUSERSTATUS = constants.gotUSERSTATUS;
  this.convert = this.convert.bind(this);
};
jxmgrsec.user_status.Filter.factory = function(constants) {
  var filter = new jxmgrsec.user_status.Filter(constants);
  return filter.convert;
};
jxmgrsec.user_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var user_statuses = this.gotUSERSTATUS();
    var user_status = user_statuses.filter(function(item) {
      return input === item.user_status_id;
    });
    return user_status.length > 0 ? user_status[0].user_status_name : "";
  }
};
goog.provide("jxmgrsec.manufactory_status.Filter.factory");
jxmgrsec.manufactory_status.Filter = function(constants) {
  this.gotMANUFACTORYSTATUS = constants.gotMANUFACTORYSTATUS;
  this.convert = this.convert.bind(this);
};
jxmgrsec.manufactory_status.Filter.factory = function(constants) {
  var filter = new jxmgrsec.manufactory_status.Filter(constants);
  return filter.convert;
};
jxmgrsec.manufactory_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var manufactory_statuses = this.gotMANUFACTORYSTATUS();
    var manufactory_status = manufactory_statuses.filter(function(item) {
      return input === item.manufactory_status_id;
    });
    return manufactory_status.length > 0 ? manufactory_status[0].manufactory_status_name : "";
  }
};
goog.provide("jxmgrsec.terminal_status.Filter.factory");
jxmgrsec.terminal_status.Filter = function(constants) {
  this.gotTERMINALSTATUS = constants.gotTERMINALSTATUS;
  this.convert = this.convert.bind(this);
};
jxmgrsec.terminal_status.Filter.factory = function(constants) {
  var filter = new jxmgrsec.terminal_status.Filter(constants);
  return filter.convert;
};
jxmgrsec.terminal_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var terminal_statuses = this.gotTERMINALSTATUS();
    var terminal_status = terminal_statuses.filter(function(item) {
      return input === item.terminal_status_id;
    });
    return terminal_status.length > 0 ? terminal_status[0].terminal_status_name : "";
  }
};
goog.provide("jxmgrsec.doctor_status.Filter.factory");
jxmgrsec.doctor_status.Filter = function(constants) {
  this.gotDOCTORSTATUS = constants.gotDOCTORSTATUS;
  this.convert = this.convert.bind(this);
};
jxmgrsec.doctor_status.Filter.factory = function(constants) {
  var filter = new jxmgrsec.doctor_status.Filter(constants);
  return filter.convert;
};
jxmgrsec.doctor_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var doctor_statuses = this.gotDOCTORSTATUS();
    var doctor_status = doctor_statuses.filter(function(item) {
      return input === item.doctor_status_id;
    });
    return doctor_status.length > 0 ? doctor_status[0].doctor_status_name : "";
  }
};
goog.provide("jxmgrsec.twatch_qing_name.Filter.factory");
jxmgrsec.twatch_qing_name.Filter = function(constants) {
  this.gotQINGNAMES = constants.gotQINGNAMES;
  this.convert = this.convert.bind(this);
};
jxmgrsec.twatch_qing_name.Filter.factory = function(constants) {
  var filter = new jxmgrsec.twatch_qing_name.Filter(constants);
  return filter.convert;
};
jxmgrsec.twatch_qing_name.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var names = this.gotQINGNAMES();
    var name = names.filter(function(item) {
      return input === item.name_id;
    });
    return name.length > 0 ? name[0].name_name : "";
  }
};
goog.provide("jxmgrsec.twatch_sos_name.Filter.factory");
jxmgrsec.twatch_sos_name.Filter = function(constants) {
  this.gotSOSNAMES = constants.gotSOSNAMES;
  this.convert = this.convert.bind(this);
};
jxmgrsec.twatch_sos_name.Filter.factory = function(constants) {
  var filter = new jxmgrsec.twatch_sos_name.Filter(constants);
  return filter.convert;
};
jxmgrsec.twatch_sos_name.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var names = this.gotSOSNAMES();
    var name = names.filter(function(item) {
      return input === item.name_id;
    });
    return name.length > 0 ? name[0].name_name : "";
  }
};
goog.provide("jxmgrsec.twatch_work_mode.Filter.factory");
jxmgrsec.twatch_work_mode.Filter = function(constants) {
  this.gotWORKMODES = constants.gotWORKMODES;
  this.convert = this.convert.bind(this);
};
jxmgrsec.twatch_work_mode.Filter.factory = function(constants) {
  var filter = new jxmgrsec.twatch_work_mode.Filter(constants);
  return filter.convert;
};
jxmgrsec.twatch_work_mode.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var modes = this.gotWORKMODES();
    var mode = modes.filter(function(item) {
      return input === item.mode_id;
    });
    return mode.length > 0 ? mode[0].mode_name : "";
  }
};
goog.provide("jxmgrsec.twatch_work_type.Filter.factory");
jxmgrsec.twatch_work_type.Filter = function(constants) {
  this.gotWORKTYPES = constants.gotWORKTYPES;
  this.convert = this.convert.bind(this);
};
jxmgrsec.twatch_work_type.Filter.factory = function(constants) {
  var filter = new jxmgrsec.twatch_work_type.Filter(constants);
  return filter.convert;
};
jxmgrsec.twatch_work_type.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var types = this.gotWORKTYPES();
    var type = types.filter(function(item) {
      return input === item.type_id;
    });
    return type.length > 0 ? type[0].type_name : "";
  }
};
goog.provide("jxmgrsec.twatch_alarm_event.Filter.factory");
jxmgrsec.twatch_alarm_event.Filter = function(constants) {
  this.gotALARMEVENTS = constants.gotALARMEVENTS;
  this.convert = this.convert.bind(this);
};
jxmgrsec.twatch_alarm_event.Filter.factory = function(constants) {
  var filter = new jxmgrsec.twatch_alarm_event.Filter(constants);
  return filter.convert;
};
jxmgrsec.twatch_alarm_event.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var events = this.gotALARMEVENTS();
    var event_i = events.filter(function(item) {
      return input === item.event_id;
    });
    return event_i.length > 0 ? event_i[0].event_name : "";
  }
};
goog.provide("jxmgrsec.twatch_period_state.Filter.factory");
jxmgrsec.twatch_period_state.Filter = function(constants) {
  this.gotPERIODSTATES = constants.gotPERIODSTATES;
  this.convert = this.convert.bind(this);
};
jxmgrsec.twatch_period_state.Filter.factory = function(constants) {
  var filter = new jxmgrsec.twatch_period_state.Filter(constants);
  return filter.convert;
};
jxmgrsec.twatch_period_state.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var states = this.gotPERIODSTATES();
    var state = states.filter(function(item) {
      return input === item.state_id;
    });
    return state.length > 0 ? state[0].state_name : "";
  }
};
goog.provide("jxmgrsec.twatch_route_state.Filter.factory");
jxmgrsec.twatch_route_state.Filter = function(constants) {
  this.gotROUTESTATES = constants.gotROUTESTATES;
  this.convert = this.convert.bind(this);
};
jxmgrsec.twatch_route_state.Filter.factory = function(constants) {
  var filter = new jxmgrsec.twatch_route_state.Filter(constants);
  return filter.convert;
};
jxmgrsec.twatch_route_state.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var states = this.gotROUTESTATES();
    var state = states.filter(function(item) {
      return input === item.state_id;
    });
    return state.length > 0 ? state[0].state_name : "";
  }
};
goog.provide("jxmgrsec.twatch_gps_mode.Filter.factory");
jxmgrsec.twatch_gps_mode.Filter = function(constants) {
  this.gotGPSMODES = constants.gotGPSMODES;
  this.convert = this.convert.bind(this);
};
jxmgrsec.twatch_gps_mode.Filter.factory = function(constants) {
  var filter = new jxmgrsec.twatch_gps_mode.Filter(constants);
  return filter.convert;
};
jxmgrsec.twatch_gps_mode.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var modes = this.gotGPSMODES();
    var mode = modes.filter(function(item) {
      return input === item.mode_id;
    });
    return mode.length > 0 ? mode[0].mode_name : "";
  }
};
goog.provide("jxmgrsec.twatch_pen_shape.Filter.factory");
jxmgrsec.twatch_pen_shape.Filter = function(constants) {
  this.gotPENSHAPES = constants.gotPENSHAPES;
  this.convert = this.convert.bind(this);
};
jxmgrsec.twatch_pen_shape.Filter.factory = function(constants) {
  var filter = new jxmgrsec.twatch_pen_shape.Filter(constants);
  return filter.convert;
};
jxmgrsec.twatch_pen_shape.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var shapes = this.gotPENSHAPES();
    var shape = shapes.filter(function(item) {
      return input === item.shape_id;
    });
    return shape.length > 0 ? shape[0].shape_name : "";
  }
};
goog.provide("jxmgrsec.twatch_week_day.Filter.factory");
jxmgrsec.twatch_week_day.Filter = function(constants) {
  this.gotWEEKDAYS = constants.gotWEEKDAYS;
  this.convert = this.convert.bind(this);
};
jxmgrsec.twatch_week_day.Filter.factory = function(constants) {
  var filter = new jxmgrsec.twatch_week_day.Filter(constants);
  return filter.convert;
};
jxmgrsec.twatch_week_day.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var days = this.gotWEEKDAYS();
    var day = days.filter(function(item) {
      return input === item.day_id;
    });
    return day.length > 0 ? day[0].day_cn_s : "";
  }
};
goog.provide("jxmgrsec.twatch_week_days.Filter.factory");
jxmgrsec.twatch_week_days.Filter = function(constants) {
  this.weekDayHelperInt2Array = constants.weekDayHelperInt2Array;
  this.convert = this.convert.bind(this);
};
jxmgrsec.twatch_week_days.Filter.factory = function(constants) {
  var filter = new jxmgrsec.twatch_week_days.Filter(constants);
  return filter.convert;
};
jxmgrsec.twatch_week_days.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var days = this.weekDayHelperInt2Array(input);
    return days.toString();
  }
};
goog.provide("jxmgrsec.product_type.Filter.factory");
jxmgrsec.product_type.Filter = function(constants) {
  this.gotPRODUCTTYPES = constants.gotPRODUCTTYPES;
  this.convert = this.convert.bind(this);
};
jxmgrsec.product_type.Filter.factory = function(constants) {
  var filter = new jxmgrsec.product_type.Filter(constants);
  return filter.convert;
};
jxmgrsec.product_type.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var product_types = this.gotPRODUCTTYPES();
    var product_type = product_types.filter(function(item) {
      return input === item.product_type_id;
    });
    return product_type.length > 0 ? product_type[0].product_type_name : "";
  }
};
goog.provide("jxmgrsec.device_type.Filter.factory");
jxmgrsec.device_type.Filter = function(constants) {
  this.gotDEVICETYPES = constants.gotDEVICETYPES;
  this.convert = this.convert.bind(this);
};
jxmgrsec.device_type.Filter.factory = function(constants) {
  var filter = new jxmgrsec.device_type.Filter(constants);
  return filter.convert;
};
jxmgrsec.device_type.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var device_types = this.gotDEVICETYPES();
    var device_type = device_types.filter(function(item) {
      return input === item.device_type_id;
    });
    return device_type.length > 0 ? device_type[0].device_type_name : "";
  }
};
goog.provide("jxmgrsec.device_type_array.Filter.factory");
jxmgrsec.device_type_array.Filter = function(constants) {
  this.gotDEVICETYPES = constants.gotDEVICETYPES;
  this.convert = this.convert.bind(this);
};
jxmgrsec.device_type_array.Filter.factory = function(constants) {
  var filter = new jxmgrsec.device_type_array.Filter(constants);
  return filter.convert;
};
jxmgrsec.device_type_array.Filter.prototype.convert = function(input) {
  if (undefined == input || "" == input || "" == input) {
    return "";
  } else {
    var device_types = this.gotDEVICETYPES();
    var returnData = "";
    for (var i = 0;i < input.length;i++) {
      var item_id = input[i];
      var device_type = device_types.filter(function(item) {
        return item_id === item.device_type_id;
      });
      if (0 == i) {
        returnData += device_type.length > 0 ? device_type[0].device_type_name : "";
      } else {
        returnData += device_type.length > 0 ? "\uff0c" + device_type[0].device_type_name : "";
      }
    }
    return returnData;
  }
};
goog.provide("jxmgrsec.unixTodate.Filter.factory");
jxmgrsec.unixTodate.Filter = function() {
  this.checkmark = "\u2714";
  this.cross = "\u2718";
  this.convert = this.convert.bind(this);
};
jxmgrsec.unixTodate.Filter.factory = function() {
  var filter = new jxmgrsec.unixTodate.Filter;
  return filter.convert;
};
Date.prototype.Format = function(fmt) {
  var o = {"M+":this.getMonth() + 1, "d+":this.getDate(), "h+":this.getHours(), "m+":this.getMinutes(), "s+":this.getSeconds(), "q+":Math.floor((this.getMonth() + 3) / 3), "S":this.getMilliseconds()};
  if (/(y+)/.test(fmt)) {
    fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
  }
  for (var k in o) {
    if ((new RegExp("(" + k + ")")).test(fmt)) {
      fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
    }
  }
  return fmt;
};
jxmgrsec.unixTodate.Filter.prototype.convert = function(input) {
  if (!input) {
    return "";
  } else {
    var now = (new Date(parseInt(input) * 1E3)).Format("yyyy-MM-dd hh:mm:ss");
    return now.toLocaleString().replace(/\u5e74|\u6708/g, "-").replace(/\u65e5/g, " ");
  }
};
goog.provide("jxmgrsec.basic.Service");
jxmgrsec.basic.Service.$inject = ["$rootScope", "$http", "$q"];
jxmgrsec.basic.Service = function($rootScope, $http, $q) {
  var basic = this;
  basic.signOut = function(rbody) {
    var defer = $q.defer();
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/sign_out", data:rbody};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.getManagerBasics = function() {
    var defer = $q.defer();
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/settings/basic"};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.change_password = function(password) {
    var defer = $q.defer();
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/settings/password", data:password};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.fileUpload = function(file) {
    var defer = $q.defer();
    if (file == undefined || file == null || file == "") {
      return null;
    }
    var uploadUrl = $rootScope.endPoint + "/common/uploads";
    var fd = new FormData;
    fd.append("files", file);
    $http.post(uploadUrl, fd, {transformRequest:angular.identity, headers:{"Content-Type":undefined}}).success(function(succ) {
      defer.resolve(succ);
    }).error(function(error) {
      defer.resolve(error);
    });
    return defer.promise;
  };
  basic.updateManAvatar = function(avatar_url) {
    var defer = $q.defer();
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/settings/avatar", data:avatar_url};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.getAdminBasics = function() {
    var defer = $q.defer();
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/settings/basic"};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.putAdminBasic = function(admin) {
    var defer = $q.defer();
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/settings/basic", data:admin};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  return basic;
};
goog.provide("jxmgrsec.db_operation.Service");
jxmgrsec.db_operation.Service.$inject = ["$rootScope", "$http", "$q"];
jxmgrsec.db_operation.Service = function($rootScope, $http, $q) {
  var db_operation = this;
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  function sendRequest(req) {
    return $http(req).then(success).catch(fail);
    function success(response) {
      return response.data.success_message;
    }
    function fail(error) {
      return $q.reject("rejected");
    }
  }
  db_operation.getFiles = function(file) {
    if (file == undefined || file == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/patients/files", data:file};
    return sendRequest(req);
  };
  db_operation.getUsers = function(reqData) {
    if (reqData == undefined || reqData == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/users", data:reqData};
    return sendRequest(req);
  };
  db_operation.getUsersByName = function(reqData) {
    if (reqData == undefined || reqData == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/users/fuzzy_search", data:reqData};
    return sendRequest(req);
  };
  db_operation.getUserDetail = function(uid) {
    if (uid == undefined || uid == "") {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/db/users/" + uid};
    return sendRequest(req);
  };
  db_operation.putUserStatus = function(uid, statusData) {
    if (uid == undefined || uid == "") {
      return null;
    }
    if (statusData == undefined || statusData == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/db/users/" + uid + "/state", data:statusData};
    return sendRequest(req);
  };
  db_operation.putUser = function(uid, userInfo) {
    if (uid == undefined || uid == "") {
      return null;
    }
    if (userInfo == undefined || userInfo == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/db/users/" + uid, data:userInfo};
    return sendRequest(req);
  };
  db_operation.addDoctor = function(doctorInfo) {
    if (doctorInfo == undefined || doctorInfo == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/doctors/add", data:doctorInfo};
    return sendRequest(req);
  };
  db_operation.getDoctors = function(searchData) {
    if (searchData == undefined || searchData == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/doctors", data:searchData};
    return sendRequest(req);
  };
  db_operation.getDoctorDetail = function(did) {
    if (did == undefined || did == "") {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/db/doctors/" + did};
    return sendRequest(req);
  };
  db_operation.modifyDoctor = function(did, doctorInfo) {
    if (did == undefined || did == "") {
      return null;
    }
    if (doctorInfo == undefined || doctorInfo == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/db/doctors/" + did, data:doctorInfo};
    return sendRequest(req);
  };
  db_operation.modifyDoctorStatus = function(did, statusData) {
    if (did == undefined || did == "") {
      return null;
    }
    if (statusData == undefined || statusData == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/db/doctors/" + did + "/state", data:statusData};
    return sendRequest(req);
  };
  db_operation.deleteDoctor = function(did) {
    if (did == undefined || did == "") {
      return null;
    }
    var req = {method:"DELETE", url:$rootScope.endPoint + "/admins/db/doctors/" + did};
    return sendRequest(req);
  };
  db_operation.addManu = function(manuInfo) {
    if (manuInfo == undefined || manuInfo == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/manufactories/add", data:manuInfo};
    return sendRequest(req);
  };
  db_operation.getManusByType = function(searchData) {
    if (searchData == undefined || searchData == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/manufactories", data:searchData};
    return sendRequest(req);
  };
  db_operation.getManusByName = function(searchData) {
    if (searchData == undefined || searchData == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/manufactories/fuzzy_search", data:searchData};
    return sendRequest(req);
  };
  db_operation.getManuDetail = function(mid) {
    if (mid == undefined || mid == "") {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/db/manufactories/" + mid};
    return sendRequest(req);
  };
  db_operation.modifyManu = function(mid, manuInfo) {
    if (mid == undefined || mid == "") {
      return null;
    }
    if (manuInfo == undefined || manuInfo == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/db/manufactories/" + mid, data:manuInfo};
    return sendRequest(req);
  };
  db_operation.modifyManuStatus = function(mid, statusData) {
    if (mid == undefined || mid == "") {
      return null;
    }
    if (statusData == undefined || statusData == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/db/manufactories/" + mid + "/state", data:statusData};
    return sendRequest(req);
  };
  db_operation.deleteManu = function(mid) {
    if (mid == undefined || mid == "") {
      return null;
    }
    var req = {method:"DELETE", url:$rootScope.endPoint + "/admins/db/manufactories/" + mid};
    return sendRequest(req);
  };
  db_operation.getPatFiles = function(pid, file) {
    if (!validParam(pid)) {
      return null;
    }
    console.log("service");
    console.log(file);
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/files", params:file};
    return sendRequest(req);
  };
  db_operation.getPatWrist = function(pid, wid) {
    if (!validParam(pid) || !validParam(wid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/wristbands/" + wid};
    return sendRequest(req);
  };
  db_operation.putPatWrist = function(pid, wid, patwrist) {
    if (!validParam(pid) || !validParam(wid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/wristbands/" + wid, data:patwrist};
    return sendRequest(req);
  };
  db_operation.getPatSphyg = function(pid, sid) {
    if (!validParam(pid) || !validParam(sid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/sphygmomanometers/" + sid};
    return sendRequest(req);
  };
  db_operation.putPatSphyg = function(pid, sid, patsphy) {
    if (!validParam(pid) || !validParam(sid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/sphygmomanometers/" + sid, data:patsphy};
    return sendRequest(req);
  };
  db_operation.getPatOxi = function(pid, oid) {
    if (!validParam(pid) || !validParam(oid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/oximeters/" + oid};
    return sendRequest(req);
  };
  db_operation.putPatOxi = function(pid, oid, patoxi) {
    if (!validParam(pid) || !validParam(oid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/oximeters/" + oid, data:patoxi};
    return sendRequest(req);
  };
  db_operation.getPatGlucose = function(pid, gid) {
    if (!validParam(pid) || !validParam(gid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/glucosemeters/" + gid};
    return sendRequest(req);
  };
  db_operation.putPatGlucose = function(pid, gid, patglucose) {
    if (!validParam(pid) || !validParam(gid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/glucosemeters/" + gid, data:patglucose};
    return sendRequest(req);
  };
  db_operation.getPatThermome = function(pid, tid) {
    if (!validParam(pid) || !validParam(tid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/thermometers/" + tid};
    return sendRequest(req);
  };
  db_operation.putPatThermome = function(pid, tid, patthermome) {
    if (!validParam(pid) || !validParam(tid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/thermometers/" + tid, data:patthermome};
    return sendRequest(req);
  };
  db_operation.getPatFat = function(pid, fid) {
    if (!validParam(pid) || !validParam(fid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/fats/" + fid};
    return sendRequest(req);
  };
  db_operation.putPatFat = function(pid, fid, patfat) {
    if (!validParam(pid) || !validParam(fid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/fats/" + fid, data:patfat};
    return sendRequest(req);
  };
  db_operation.postTerminals = function(rbody) {
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/terminals", data:rbody};
    return sendRequest(req);
  };
  db_operation.getTerminalDetails = function(tid) {
    if (!validParam(tid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/db/terminals/" + tid};
    return sendRequest(req);
  };
  db_operation.fuzzySearchTerminals = function(rbody) {
    if (!validParam(rbody)) {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/terminals/fuzzy_search", data:rbody};
    return sendRequest(req);
  };
  db_operation.postDBProductTypes = function(rbody) {
    if (!validParam(rbody)) {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/product_types", data:rbody};
    return sendRequest(req);
  };
  db_operation.getDBDeviceTypes = function(pid) {
    if (!validParam(pid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/db/product_types/" + pid};
    return sendRequest(req);
  };
  db_operation.postAddProductTypes = function(rbody) {
    if (!validParam(rbody)) {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/product_types/add", data:rbody};
    return sendRequest(req);
  };
  db_operation.putEditProductTypes = function(pid, rbody) {
    if (!validParam(rbody) || !validParam(pid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/db/product_types/" + pid, data:rbody};
    return sendRequest(req);
  };
  db_operation.fuzzySearchProductTypes = function(rbody) {
    if (!validParam(rbody)) {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/product_types/fuzzy_search", data:rbody};
    return sendRequest(req);
  };
  db_operation.getDBProductTypeDetails = function(pid) {
    if (!validParam(pid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/db/product_types/" + pid};
    return sendRequest(req);
  };
  db_operation.fuzzySearchDeviceTypes = function(rbody) {
    if (!validParam(rbody)) {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/device_types/fuzzy_search", data:rbody};
    return sendRequest(req);
  };
  db_operation.getDBDeviceTypes = function(did) {
    if (!validParam(did)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/db/device_types/" + did};
    return sendRequest(req);
  };
  db_operation.postAddDeviceTypes = function(rbody) {
    if (!validParam(rbody)) {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/device_types/add", data:rbody};
    return sendRequest(req);
  };
  db_operation.fuzzySearchProductTypes = function(rbody) {
    if (!validParam(rbody)) {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/product_types/fuzzy_search", data:rbody};
    return sendRequest(req);
  };
  db_operation.postDBDeviceTypes = function(rbody) {
    if (!validParam(rbody)) {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/device_types", data:rbody};
    return sendRequest(req);
  };
  db_operation.fuzzySearchDeviceTypes = function(rbody) {
    if (!validParam(rbody)) {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/device_types/fuzzy_search", data:rbody};
    return sendRequest(req);
  };
  db_operation.getDBManufacturers = function(did) {
    if (!validParam(did)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/db/device_types/" + did};
    return sendRequest(req);
  };
  db_operation.postAddDeviceTypes = function(rbody) {
    if (!validParam(rbody)) {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/device_types/add", data:rbody};
    return sendRequest(req);
  };
  db_operation.putEditDeviceTypes = function(did, rbody) {
    if (!validParam(rbody) || !validParam(did)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/db/device_types/" + did, data:rbody};
    return sendRequest(req);
  };
  db_operation.postTerminalCatagorise = function(rbody) {
    if (!validParam(rbody)) {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/terminal_catagories_more", data:rbody};
    return sendRequest(req);
  };
  db_operation.updateTerCatSataus = function(mid, tcid, state) {
    if (!validParam(mid) || !validParam(tcid) || !validParam(state)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/db/manufactories/" + mid + "/terminal_catagories/" + tcid + "/status", data:state};
    return sendRequest(req);
  };
  return db_operation;
};
goog.provide("jxmgrsec.doctor.Service");
jxmgrsec.doctor.Service.$inject = ["$rootScope", "$http", "$q"];
jxmgrsec.doctor.Service = function($rootScope, $http, $q) {
  var doctor = this;
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  function sendRequest(req) {
    return $http(req).then(success).catch(fail);
    function success(response) {
      return response.data.success_message;
    }
    function fail(error) {
      return $q.reject("rejected");
    }
  }
  doctor.getDoctors = function(dactor) {
    if (!validParam(dactor)) {
      return "";
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/doctors", data:dactor};
    return sendRequest(req);
  };
  doctor.getDoctorPermissions = function(did, page) {
    if (!validParam(did)) {
      return "";
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/permissions/doctors/" + did, params:page};
    return sendRequest(req);
  };
  doctor.addDoctorPermission = function(did, permission) {
    if (!validParam(did) && !validParam(permission)) {
      return "";
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/permissions/doctors/" + did, data:permission};
    return sendRequest(req);
  };
  doctor.updateDoctorPermission = function(did, pid, permission) {
    if (!validParam(did) && !validParam(permission)) {
      return "";
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/permissions/doctors/" + did + "/" + pid, data:permission};
    return sendRequest(req);
  };
  return doctor;
};
goog.provide("jxmgrsec.health_con.Service");
jxmgrsec.health_con.Service.$inject = ["$rootScope", "$http", "$q"];
jxmgrsec.health_con.Service = function($rootScope, $http, $q) {
  var health_con = this;
  function sendRequest(req) {
    return $http(req).then(success).catch(fail);
    function success(response) {
      return response.data.success_message;
    }
    function fail(error) {
      return $q.reject("rejected");
    }
  }
  health_con.dealConsultation = function(consultation) {
    if (consultation == undefined || consultation == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/consultations", data:consultation};
    return sendRequest(req);
  };
  health_con.getQAandReply = function(cid) {
    if (cid == undefined || cid == "") {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/consultations/" + cid};
    return sendRequest(req);
  };
  health_con.sendReply = function(cid, content) {
    if (cid == undefined || cid == "") {
      return null;
    }
    if (content == undefined || content == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/consultations/" + cid, data:content};
    return sendRequest(req);
  };
  return health_con;
};
goog.provide("jxmgrsec.health_data.Service");
jxmgrsec.health_data.Service.$inject = ["$rootScope", "$http", "$q"];
jxmgrsec.health_data.Service = function($rootScope, $http, $q) {
  var health_data = this;
  function sendRequest(req) {
    return $http(req).then(success).catch(fail);
    function success(response) {
      return response.data.success_message;
    }
    function fail(error) {
      console.log(error);
      return $q.reject("rejected");
    }
  }
  health_data.getMeasurements = function(measurement) {
    if (measurement == undefined || measurement == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/measurements", data:measurement};
    return sendRequest(req);
  };
  health_data.getWristbands = function(wid) {
    if (wid == undefined || wid == "") {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/common/measurements/wristbands/" + wid};
    return sendRequest(req);
  };
  health_data.saveWristbands = function(wid, wristband) {
    if (wid == undefined || wid == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/common/measurements/wristbands/" + wid, data:wristband};
    return sendRequest(req);
  };
  health_data.getSphygmomanometers = function(sid) {
    if (sid == undefined || sid == "") {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/common/measurements/sphygmomanometers/" + sid};
    return sendRequest(req);
  };
  health_data.saveSphygmomanometers = function(sid, sphygmomanometer) {
    if (sid == undefined || sid == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/common/measurements/sphygmomanometers/" + sid, data:sphygmomanometer};
    return sendRequest(req);
  };
  health_data.getOximeter = function(oid) {
    if (oid == undefined || oid == "") {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/common/measurements/oximeter/" + oid};
    return sendRequest(req);
  };
  health_data.saveOximeters = function(oid, oximeter) {
    if (oid == undefined || oid == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/common/measurements/oximeter/" + oid, data:oximeter};
    return sendRequest(req);
  };
  health_data.getGlucosemeters = function(gid) {
    if (gid == undefined || gid == "") {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/common/measurements/glucosemeters/" + gid};
    return sendRequest(req);
  };
  health_data.saveGlucosemeters = function(gid, glucosemeter) {
    if (gid == undefined || gid == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/common/measurements/glucosemeters/" + gid, data:glucosemeter};
    return sendRequest(req);
  };
  health_data.getThermometers = function(tid) {
    if (tid == undefined || tid == "") {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/common/measurements/thermometers/" + tid};
    return sendRequest(req);
  };
  health_data.saveThermometers = function(tid, thermometer) {
    if (tid == undefined || tid == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/common/measurements/thermometers/" + tid, data:thermometer};
    return sendRequest(req);
  };
  health_data.getFats = function(fid) {
    if (fid == undefined || fid == "") {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/common/measurements/fat/" + fid};
    return sendRequest(req);
  };
  health_data.saveFats = function(fid, fat) {
    if (fid == undefined || fid == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/common/measurements/fat/" + fid, data:fat};
    return sendRequest(req);
  };
  health_data.getPermissions = function(permission_list) {
    if (permission_list == undefined || permission_list == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/permissions", data:permission_list};
    return sendRequest(req);
  };
  health_data.getPermissionData = function(pid, page_params) {
    if (pid == undefined || pid == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/permissions/" + pid + "/query", data:page_params};
    return sendRequest(req);
  };
  return health_data;
};
goog.provide("jxmgrsec.home_security.Service");
jxmgrsec.home_security.Service.$inject = ["$rootScope", "$http", "$q"];
jxmgrsec.home_security.Service = function($rootScope, $http, $q) {
  var home_security = this;
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  function sendRequest(req) {
    return $http(req).then(success).catch(fail);
    function success(response) {
      return response.data.success_message;
    }
    function fail(error) {
      return $q.reject("rejected");
    }
  }
  home_security.getFiles = function(file) {
    if (file == undefined || file == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/patients/files", data:file};
    return sendRequest(req);
  };
  home_security.getCameras = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/cameras", params:params};
    return sendRequest(req);
  };
  home_security.getTouchButtons = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/touch_buttons", params:params};
    return sendRequest(req);
  };
  home_security.getButtonEvent = function(bid, params) {
    if (!validParam(bid) || !validParam(params)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/touch_buttons/" + bid, params:params};
    return sendRequest(req);
  };
  return home_security;
};
goog.provide("jxmgrsec.manufactory.Service");
jxmgrsec.manufactory.Service.$inject = ["$rootScope", "$http", "$q"];
jxmgrsec.manufactory.Service = function($rootScope, $http, $q) {
  var manufactory = this;
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  function sendRequest(req) {
    return $http(req).then(success).catch(fail);
    function success(response) {
      return response.data.success_message;
    }
    function fail(error) {
      return $q.reject("rejected");
    }
  }
  manufactory.getManufactories = function(manufactory) {
    if (!validParam(manufactory)) {
      return "";
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/manufactories", data:manufactory};
    return sendRequest(req);
  };
  manufactory.editManPermission = function(mid, right_list) {
    if (!validParam(right_list)) {
      return "";
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/permissions/manufactories/" + mid, data:right_list};
    return sendRequest(req);
  };
  return manufactory;
};
goog.provide("jxmgrsec.page.Service");
jxmgrsec.page.Service.$inject = ["$rootScope", "$http", "$q"];
jxmgrsec.page.Service = function($rootScope, $http, $q) {
  var page = this;
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  function sendRequest(req) {
    return $http(req).then(success).catch(fail);
    function success(response) {
      return response.data.success_message;
    }
    function fail(error) {
      return $q.reject("rejected");
    }
  }
  page.getWebTemplates = function() {
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/db/web_templates"};
    return sendRequest(req);
  };
  page.modifyWebTemplates = function(params) {
    if (!validParam(params)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/db/web_templates", data:params};
    return sendRequest(req);
  };
  page.getExhibitionResources = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/db/exhibition_resources", params:params};
    return sendRequest(req);
  };
  page.addExhibitionResources = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/exhibition_resources", data:params};
    return sendRequest(req);
  };
  page.modifyExhibitionResources = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/db/exhibition_resources", data:params};
    return sendRequest(req);
  };
  page.deleteExhibitionResources = function(eid) {
    var req = {method:"DELETE", url:$rootScope.endPoint + "/admins/db/exhibition_resources/" + eid};
    return sendRequest(req);
  };
  page.getNewResources = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/db/news_resources", params:params};
    return sendRequest(req);
  };
  page.addNewResources = function(params) {
    if (!validParam(params)) {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/news_resources", data:params};
    return sendRequest(req);
  };
  page.modifyNewResources = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/db/news_resources", data:params};
    return sendRequest(req);
  };
  page.deleteNewResources = function(nid) {
    var req = {method:"DELETE", url:$rootScope.endPoint + "/admins/db/news_resources/" + nid};
    return sendRequest(req);
  };
  return page;
};
goog.provide("jxmgrsec.push_message.Service");
jxmgrsec.push_message.Service.$inject = ["$rootScope", "$http", "$q"];
jxmgrsec.push_message.Service = function($rootScope, $http, $q) {
  var push_message = this;
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  function sendRequest(req) {
    return $http(req).then(success).catch(fail);
    function success(response) {
      return response.data.success_message;
    }
    function fail(error) {
      return $q.reject("rejected");
    }
  }
  push_message.pushMessage = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/push_messages", data:params};
    return sendRequest(req);
  };
  push_message.getCatagoryList = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/terminal_catagories", data:params};
    return sendRequest(req);
  };
  return push_message;
};
goog.provide("jxmgrsec.twatch.Service");
jxmgrsec.twatch.Service.$inject = ["$rootScope", "$http", "$q"];
jxmgrsec.twatch.Service = function($rootScope, $http, $q) {
  var twatch = this;
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  function sendRequest(req) {
    return $http(req).then(success).catch(fail);
    function success(response) {
      return response.data.success_message;
    }
    function fail(error) {
      return $q.reject("rejected");
    }
  }
  twatch.getModeset = function(params) {
    if (!validParam(params)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/imei/modeset", params:params};
    return sendRequest(req);
  };
  twatch.setModeset = function(params) {
    if (!validParam(params)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/imei/modeset", data:params};
    return sendRequest(req);
  };
  twatch.addModePeriods = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/imei/mode_periods", data:params};
    return sendRequest(req);
  };
  twatch.deleteModePeriods = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"DELETE", url:$rootScope.endPoint + "/admins/imei/mode_periods", params:params};
    return sendRequest(req);
  };
  twatch.modifyModePeriods = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/imei/mode_periods", data:params};
    return sendRequest(req);
  };
  twatch.addWhiteList = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/imei/whitelist", data:params};
    return sendRequest(req);
  };
  twatch.getWhiteList = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/imei/whitelist", params:params};
    return sendRequest(req);
  };
  twatch.addBlackList = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/imei/blacklist", data:params};
    return sendRequest(req);
  };
  twatch.getBlackList = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/imei/blacklist", params:params};
    return sendRequest(req);
  };
  twatch.getCurLocation = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/imei/cur_location", params:params};
    return sendRequest(req);
  };
  twatch.getMonitor = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/imei/monitor", params:params};
    return sendRequest(req);
  };
  twatch.getLocations = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/imei/locations", params:params};
    return sendRequest(req);
  };
  twatch.getCommands = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/imei/commands", params:params};
    return sendRequest(req);
  };
  twatch.getPlayVoices = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/imei/playvoice", params:params};
    return sendRequest(req);
  };
  twatch.addPlayVoices = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/imei/playvoice", data:params};
    return sendRequest(req);
  };
  twatch.putPlayVoices = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/imei/playvoice", data:params};
    return sendRequest(req);
  };
  twatch.deletePlayVoices = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"DELETE", url:$rootScope.endPoint + "/admins/imei/playvoice", params:params};
    return sendRequest(req);
  };
  twatch.getRouteset = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/imei/routeset", params:params};
    return sendRequest(req);
  };
  twatch.postRouteset = function(rbody) {
    if (!validParam(rbody)) {
      return null;
    }
    console.log(rbody);
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/imei/routeset", data:rbody};
    return sendRequest(req);
  };
  twatch.postRoutePeriod = function(rbody) {
    if (!validParam(rbody)) {
      return null;
    }
    console.log(rbody);
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/imei/routeset/period", data:rbody};
    return sendRequest(req);
  };
  twatch.putRoutePeriod = function(rbody) {
    if (!validParam(rbody)) {
      return null;
    }
    console.log(rbody);
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/imei/routeset/period", data:rbody};
    return sendRequest(req);
  };
  twatch.deleteRoutePeriod = function(rbody) {
    if (!validParam(rbody)) {
      return null;
    }
    console.log(rbody);
    var req = {method:"DELETE", url:$rootScope.endPoint + "/admins/imei/routeset/period", params:rbody};
    return sendRequest(req);
  };
  twatch.postNumbers = function(rbody) {
    if (!validParam(rbody)) {
      return null;
    }
    console.log(rbody);
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/imei/numbers", data:rbody};
    return sendRequest(req);
  };
  twatch.getNumbers = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/imei/numbers", params:params};
    return sendRequest(req);
  };
  twatch.getPensets = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/imei/penset", params:params};
    return sendRequest(req);
  };
  twatch.addPensets = function(params) {
    if (!validParam(params)) {
      return null;
    }
    console.log(params);
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/imei/penset", data:params};
    return sendRequest(req);
  };
  twatch.savePensets = function(params) {
    if (!validParam(params)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/imei/penset", data:params};
    return sendRequest(req);
  };
  twatch.delPenset = function(params) {
    if (!validParam(params)) {
      return null;
    }
    var req = {method:"DELETE", url:$rootScope.endPoint + "/admins/imei/penset", params:params};
    return sendRequest(req);
  };
  twatch.heartbeat = function(params) {
    if (!validParam(params)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/imei/heartbeat", data:params};
    return sendRequest(req);
  };
  return twatch;
};
goog.provide("jxmgrsec.version.Service");
jxmgrsec.version.Service = function() {
  this.version = "0.0.1";
};
jxmgrsec.version.Service.prototype.get = function() {
  return this.version;
};
goog.provide("jxmgrsec.add_device_type_modal.Ctrl");
jxmgrsec.add_device_type_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "$timeout", "constants", "db_operation"];
jxmgrsec.add_device_type_modal.Ctrl = function($scope, $filter, $modalInstance, $q, constants, $timeout, db_operation) {
  $scope.product_types = [];
  $scope.product_types_selected = {selected:undefined};
  $scope.device_submit = {"device_name":undefined, "product_type_id":undefined};
  activate();
  function activate() {
    var promises = [getProductTypes()];
    return $q.all(promises).then(function() {
    });
  }
  function getProductTypes() {
    return constants.getProductTypes().then(function(data) {
      $scope.product_types = data.product_types;
      return $scope.product_types;
    });
  }
  $scope.disabledBtn = false;
  $scope.ok = function() {
    $scope.disabledBtn = true;
    $scope.jsonData = {name:$scope.device_submit.device_name, product_type_id:$scope.device_submit.product_type_id};
    if (!validParam($scope.jsonData.name)) {
      $scope.addAlert("warning", "\u8bbe\u5907\u540d\u4e0d\u80fd\u4e3a\u7a7a");
      $scope.disabledBtn = false;
      return;
    }
    if (!validParam($scope.jsonData.product_type_id)) {
      $scope.addAlert("warning", "\u96b6\u5c5e\u4ea7\u54c1\u7c7b\u578b\u4e0d\u80fd\u4e3a\u7a7a");
      $scope.disabledBtn = false;
      return;
    }
    db_operation.postAddDeviceTypes($scope.jsonData).then(function(succ) {
      $scope.addAlert("success", "\u4fdd\u5b58\u6210\u529f,3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
      $timeout(function() {
        $scope.cancel();
        $scope.disabledBtn = false;
      }, 3E3);
    }, function(error) {
      $scope.addAlert("danger", "\u4fdd\u5b58\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      $scope.disabledBtn = false;
    });
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  function validParam(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  }
};
goog.provide("jxmgrsec.add_doctor_modal.Ctrl");
jxmgrsec.add_doctor_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "constants", "db_operation", "basic", "$timeout", "md5"];
jxmgrsec.add_doctor_modal.Ctrl = function($scope, $filter, $modalInstance, $q, constants, db_operation, basic, $timeout, md5) {
  $scope.genders = [];
  $scope.districts = [];
  $scope.departments = [];
  $scope.headUrl = "../../../../img/touxiang.png";
  $scope.headFile = undefined;
  $scope.physicianFile = undefined;
  $scope.practicingFile = undefined;
  $scope.birthday_date = undefined;
  $scope.signUpInf = {login_name:"", password:"", full_name:"", identification_number:"", gender:undefined, birthday:"", email:"", avatar_url:"", phone:"", department_id:undefined, district_id:undefined, profile:"", physician_certificate:"", practicing_certificate:""};
  $scope.new_password = "";
  $scope.confirm_password = "";
  activate();
  function activate() {
    var promises = [initArray()];
    return $q.all(promises).then(function() {
    });
  }
  function initArray() {
    $scope.genders = constants.gotGENDERS();
    $scope.districts = constants.gotDISTRICTS();
    $scope.departments = constants.gotDEPARTMENTS();
  }
  $scope.dt = new Date;
  $scope.open_form_birthday = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.birthday_opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.checkMobile = function(str) {
    var re = /^1\d{10}$/;
    if (re.test(str)) {
      return true;
    } else {
      return false;
    }
  };
  $scope.toDDMMMYYYY = function(date) {
    var d = new Date(date.getTime());
    var dd = d.getDate() < 10 ? "0" + d.getDate() : d.getDate().toString();
    var mmm = d.getMonth() < 10 ? "0" + d.getMonth() : d.getMonth().toString();
    var yyyy = d.getFullYear().toString();
    return yyyy + "-" + mmm + "-" + dd;
  };
  $scope.checkPassword = function() {
    if (validParam($scope.new_password)) {
      if (!validParam($scope.confirm_password)) {
        $scope.addAlert("danger", "\u8f93\u5165\u786e\u8ba4\u5bc6\u7801");
        return false;
      } else {
        if ($scope.confirm_password != $scope.new_password) {
          $scope.addAlert("danger", "\u5bc6\u7801\u4e0d\u4e00\u81f4");
          return false;
        } else {
          $scope.signUpInf.password = md5.createHash($scope.new_password);
          return true;
        }
      }
    } else {
      $scope.addAlert("danger", "\u8f93\u5165\u5bc6\u7801");
      return false;
    }
  };
  $scope.uploadInfo = function() {
    $scope.uploadHeadImg();
  };
  $scope.uploadHeadImg = function() {
    if (validParam($scope.headFile)) {
      basic.fileUpload($scope.headFile).then(function(res) {
        console.log("\u4e0a\u4f20\u5934\u50cf");
        console.log(res);
        $scope.headUrl = res.success_message[0];
        $scope.signUpInf.avatar_url = res.success_message[0];
        $scope.uploadPhysImg();
      }, function(error) {
        console.log(error);
        $scope.addAlert("danger", "\u4e0a\u4f20\u5934\u50cf\u7570\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      });
    } else {
      $scope.uploadPhysImg();
    }
  };
  $scope.uploadPhysImg = function() {
    if (validParam($scope.physicianFile)) {
      basic.fileUpload($scope.physicianFile).then(function(res) {
        console.log("\u4e0a\u4f20\u8d44\u683c\u8bc1\u4e66");
        console.log(res);
        $scope.headUrl = res.success_message[0];
        $scope.signUpInf.physician_certificate = res.success_message[0];
        $scope.uploadPracImg();
      }, function(error) {
        console.log(error);
        $scope.addAlert("danger", "\u4e0a\u4f20\u8d44\u683c\u8bc1\u4e66\u7570\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      });
    } else {
      $scope.addAlert("danger", "\u8bf7\u4e0a\u4f20\u8d44\u683c\u8bc1\u4e66");
    }
  };
  $scope.uploadPracImg = function() {
    if (validParam($scope.practicingFile)) {
      basic.fileUpload($scope.practicingFile).then(function(res) {
        console.log("\u4e0a\u4f20\u6267\u4e1a\u8bc1\u4e66");
        console.log(res);
        $scope.headUrl = res.success_message[0];
        $scope.signUpInf.practicing_certificate = res.success_message[0];
        $scope.addDoctor();
      }, function(error) {
        console.log(error);
        $scope.addAlert("danger", "\u4e0a\u4f20\u6267\u4e1a\u8bc1\u4e66\u7570\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      });
    } else {
      $scope.addAlert("danger", "\u8bf7\u4e0a\u4f20\u6267\u4e1a\u8bc1\u4e66");
    }
  };
  $scope.checkParam = function() {
    if (!validParam($scope.signUpInf.login_name)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u7528\u6237\u540d\uff01");
      return false;
    }
    if (!$scope.checkPassword()) {
      return false;
    }
    if (!validParam($scope.signUpInf.full_name)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u533b\u751f\u59d3\u540d\uff01");
      return false;
    }
    if (!validParam($scope.signUpInf.identification_number)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u533b\u751f\u5de5\u53f7\uff01");
      return false;
    }
    if (!validParam($scope.signUpInf.email)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u7535\u5b50\u90ae\u7bb1\uff01");
      return false;
    }
    if (undefined == $scope.signUpInf.gender) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u6027\u522b\uff01");
      return false;
    }
    if (validParam($scope.birthday_date)) {
      $scope.signUpInf.birthday = $filter("date")($scope.birthday_date, "yyyy-MM-dd");
    } else {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u51fa\u751f\u65e5\u671f\uff01");
      return false;
    }
    if (!validParam($scope.signUpInf.phone) || !$scope.checkMobile($scope.signUpInf.phone)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u6b63\u786e\u7684\u8054\u7cfb\u7535\u8bdd\uff01");
      return false;
    }
    if (!validParam($scope.signUpInf.department_id)) {
      $scope.addAlert("danger", "\u8bf7\u9009\u62e9\u79d1\u5ba4\uff01");
      return false;
    }
    if (!validParam($scope.signUpInf.district_id)) {
      $scope.addAlert("danger", "\u8bf7\u9009\u62e9\u5730\u533a\uff01");
      return false;
    }
    if (!validParam($scope.physicianFile)) {
      $scope.addAlert("danger", "\u8bf7\u4e0a\u4f20\u8d44\u683c\u8bc1\u4e66");
      return false;
    }
    if (!validParam($scope.practicingFile)) {
      $scope.addAlert("danger", "\u8bf7\u4e0a\u4f20\u6267\u4e1a\u8bc1\u4e66");
      return false;
    }
    if (!$scope.uploadHeadImg()) {
      return;
    }
    if (!$scope.uploadPhysImg()) {
      return false;
    }
    if (!$scope.uploadPracImg()) {
      return false;
    }
  };
  $scope.disabledBtn = false;
  $scope.addDoctor = function() {
    $scope.disabledBtn = true;
    if (validParam($scope.birthday_date)) {
      $scope.signUpInf.birthday = $filter("date")($scope.birthday_date, "yyyy-M-dd");
    }
    if ($scope.signUpInf.birthday == "") {
      $scope.signUpInf.birthday = undefined;
    }
    db_operation.addDoctor($scope.signUpInf).then(function(res) {
      $scope.addAlert("success", "\u6dfb\u52a0\u7528\u6237\u6210\u529f,3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
      $timeout(function() {
        $scope.cancel();
      }, 3E3);
    }, function(error) {
      $scope.addAlert("danger", "\u6dfb\u52a0\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      $scope.disabledBtn = false;
    });
  };
  $scope.signUp = function() {
    if ($scope.checkParam()) {
      $scope.uploadInfo();
    }
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
};
goog.provide("jxmgrsec.add_manufactory_modal.Ctrl");
jxmgrsec.add_manufactory_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "constants", "db_operation", "basic", "$timeout", "md5"];
jxmgrsec.add_manufactory_modal.Ctrl = function($scope, $filter, $modalInstance, $q, constants, db_operation, basic, $timeout, md5) {
  $scope.company_departments = constants.gotCOMPANYDEPARTMENTS();
  $scope.device_types = constants.gotDEVICETYPES();
  $scope.company_members_list = constants.gotCOMPANYMEMBERS();
  $scope.company_industry_list = constants.gotCOMPANYINDUSTRIES();
  $scope.company_nature_list = constants.gotCOMPANYNATURES();
  $scope.province_list = constants.gotPROVINCES();
  $scope.city_list = constants.gotCITIES();
  $scope.county_list = constants.gotZONES();
  $scope.business_licencefile = undefined;
  $scope.internal_certificatefile = undefined;
  $scope.local_certificatefile = undefined;
  $scope.code_certificatefile = undefined;
  $scope.logo_file = undefined;
  $scope.manufactory = {login_name:undefined, full_name:undefined, contactor:undefined, password:undefined, department:undefined, telephone:undefined, phone:undefined, email:undefined, code:undefined, profile:undefined, province_id:undefined, city_id:undefined, zone_id:undefined, address:undefined, device_type_ids:undefined, members:undefined, industry:undefined, nature:undefined, business_licence:undefined, internal_certificate:undefined, local_certificate:undefined, code_certificate:undefined, 
  logo_url:undefined};
  $scope.new_password = "";
  $scope.confirm_password = "";
  function checkMobile(str) {
    var re = /^1\d{10}$/;
    if (re.test(str)) {
      return true;
    } else {
      return false;
    }
  }
  function isTelephone(str) {
    var tel = /^0\d{2,3}-?\d{7,8}$/;
    if (tel.test(str)) {
      return true;
    }
    return false;
  }
  $scope.checkPassword = function() {
    if (validParam($scope.new_password)) {
      if (!validParam($scope.confirm_password)) {
        $scope.addAlert("danger", "\u8f93\u5165\u786e\u8ba4\u5bc6\u7801");
        return false;
      } else {
        if ($scope.confirm_password != $scope.new_password) {
          $scope.addAlert("danger", "\u5bc6\u7801\u4e0d\u4e00\u81f4");
          return false;
        } else {
          $scope.manufactory.password = md5.createHash($scope.new_password);
          return true;
        }
      }
    } else {
      $scope.addAlert("danger", "\u8f93\u5165\u5bc6\u7801");
      return false;
    }
  };
  $scope.addManuInfo = function() {
    if ($scope.checkParam()) {
      uploadBusiness_licenceFile();
    }
  };
  var uploadBusiness_licenceFile = function() {
    if (validParam($scope.business_licencefile)) {
      return basic.fileUpload($scope.business_licencefile).then(function(res) {
        $scope.manufactory.business_licence = res.success_message[0];
        console.log("\u4e0a\u4f20\u5de5\u5546\u8425\u4e1a\u6267\u7167\u6210\u529f\uff01");
        uploadInternal_certificateFile();
      }, function(error) {
        console.log("\u4e0a\u4f20\u5de5\u5546\u8425\u4e1a\u6267\u7167\u5931\u8d25\uff01");
        console.log(error);
      });
    } else {
      uploadInternal_certificateFile();
    }
  };
  var uploadInternal_certificateFile = function() {
    if (validParam($scope.internal_certificatefile)) {
      return basic.fileUpload($scope.internal_certificatefile).then(function(res) {
        $scope.manufactory.internal_certificate = res.success_message[0];
        console.log("\u4e0a\u4f20\u7ec4\u7ec7\u673a\u6784\u4ee3\u7801\u8bc1\u6210\u529f\uff01");
        uploadLocal_certificateFile();
      }, function(error) {
        console.log("\u4e0a\u4f20\u7ec4\u7ec7\u673a\u6784\u4ee3\u7801\u8bc1\u5931\u8d25\uff01");
        console.log(error);
      });
    } else {
      uploadLocal_certificateFile();
    }
  };
  var uploadLocal_certificateFile = function() {
    if (validParam($scope.local_certificatefile)) {
      return basic.fileUpload($scope.local_certificatefile).then(function(res) {
        $scope.manufactory.local_certificate = res.success_message[0];
        console.log("\u4e0a\u4f20\u7a0e\u52a1\u767b\u8bb0\u8bc1-\u56fd\u7a0e\u6210\u529f\uff01");
        uploadCode_certificateFile();
      }, function(error) {
        console.log("\u4e0a\u4f20\u7a0e\u52a1\u767b\u8bb0\u8bc1-\u56fd\u7a0e\u5931\u8d25\uff01");
        console.log(error);
      });
    } else {
      uploadCode_certificateFile();
    }
  };
  var uploadCode_certificateFile = function() {
    if (validParam($scope.code_certificatefile)) {
      return basic.fileUpload($scope.code_certificatefile).then(function(res) {
        $scope.manufactory.code_certificate = res.success_message[0];
        console.log("\u4e0a\u4f20\u7a0e\u52a1\u767b\u8bb0\u8bc1-\u5730\u7a0e\u6210\u529f\uff01");
        uploadLogoFile();
      }, function(error) {
        console.log("\u4e0a\u4f20\u7a0e\u52a1\u767b\u8bb0\u8bc1-\u5730\u7a0e\u5931\u8d25\uff01");
        console.log(error);
      });
    } else {
      uploadLogoFile();
    }
  };
  var uploadLogoFile = function() {
    if (validParam($scope.logo_file)) {
      return basic.fileUpload($scope.logo_file).then(function(res) {
        $scope.manufactory.logo_url = res.success_message[0];
        console.log("\u4e0a\u4f20\u5382\u5546\u5546\u6807\u6210\u529f\uff01");
        $scope.addManu();
      }, function(error) {
        console.log("\u4e0a\u4f20\u5382\u5546\u5546\u6807\u5931\u8d25\uff01");
        console.log(error);
      });
    } else {
      $scope.addManu();
    }
  };
  $scope.checkParam = function() {
    if (!validParam($scope.manufactory.login_name)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u7528\u6237\u540d\uff01");
      return false;
    }
    if (!$scope.checkPassword()) {
      return false;
    }
    if (!validParam($scope.manufactory.contactor)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u8054\u7cfb\u4eba\u59d3\u540d\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.department)) {
      $scope.addAlert("danger", "\u8bf7\u9009\u62e9\u6240\u5728\u90e8\u95e8\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.device_type_ids)) {
      $scope.addAlert("danger", "\u8bf7\u9009\u62e9\u8d1f\u8d23\u9500\u552e\u8bbe\u5907\u7c7b\u578b\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.telephone) || !isTelephone($scope.manufactory.telephone)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u6b63\u786e\u7684\u56fa\u5b9a\u7535\u8bdd\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.phone) || !checkMobile($scope.manufactory.phone)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u6b63\u786e\u7684\u624b\u673a\u53f7!");
      return false;
    }
    if (!validParam($scope.manufactory.email)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u8054\u7cfb\u4eba\u90ae\u7bb1\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.full_name)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u5382\u5546\u540d\u79f0\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.code)) {
      $scope.addAlert("danger", "\u5382\u5546\u7f16\u7801\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.profile)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u5382\u5546\u7b80\u4ecb\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.province_id)) {
      $scope.addAlert("danger", "\u8bf7\u9009\u62e9\u4e00\u7ea7\u884c\u653f\u533a\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.city_id)) {
      $scope.addAlert("danger", "\u8bf7\u9009\u62e9\u4e8c\u7ea7\u884c\u653f\u533a\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.zone_id)) {
      $scope.addAlert("danger", "\u8bf7\u9009\u62e9\u4e09\u7ea7\u884c\u653f\u533a\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.address)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u516c\u53f8\u5730\u5740\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.members)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u4f01\u4e1a\u4eba\u6570\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.industry)) {
      $scope.addAlert("danger", "\u8bf7\u9009\u62e9\u516c\u53f8\u884c\u4e1a\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.nature)) {
      $scope.addAlert("danger", "\u8bf7\u9009\u62e9\u516c\u53f8\u6027\u8d28\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.members)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u4f01\u4e1a\u4eba\u6570\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.business_licence) && !validParam($scope.business_licencefile)) {
      $scope.addAlert("danger", "\u8bf7\u4e0a\u4f20\u5de5\u5546\u8425\u4e1a\u6267\u7167\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.internal_certificate) && !validParam($scope.internal_certificatefile)) {
      $scope.addAlert("danger", "\u8bf7\u4e0a\u4f20\u7ec4\u7ec7\u673a\u6784\u4ee3\u7801\u8bc1\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.local_certificate) && !validParam($scope.local_certificatefile)) {
      $scope.addAlert("danger", "\u8bf7\u4e0a\u4f20\u7a0e\u52a1\u767b\u8bb0\u8bc1-\u56fd\u7a0e\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.code_certificate) && !validParam($scope.code_certificatefile)) {
      $scope.addAlert("danger", "\u8bf7\u4e0a\u4f20\u7a0e\u52a1\u767b\u8bb0\u8bc1-\u5730\u7a0e\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.logo_url) && !validParam($scope.logo_file)) {
      $scope.addAlert("danger", "\u8bf7\u4e0a\u4f20\u5382\u5546\u5546\u6807\uff01");
      return false;
    }
    return true;
  };
  $scope.disabledBtn = false;
  $scope.addManu = function() {
    console.log($scope.manufactory);
    db_operation.addManu($scope.manufactory).then(function(res) {
      $scope.disabledBtn = true;
      $scope.addAlert("success", "\u6dfb\u52a0\u5382\u5546\u6210\u529f,3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
      $timeout(function() {
        $scope.cancel();
      }, 3E3);
    }, function(error) {
      console.log(error);
      $scope.addAlert("danger", "\u4fee\u6539\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.changeProvince = function(province_id) {
    if (validParam($scope.city_list)) {
      $scope.city_select_list = [];
      $scope.manufactory.city_id = undefined;
      $scope.manufactory.zone_id = undefined;
      for (var i = 0;i < $scope.city_list.length;i++) {
        if ($scope.city_list[i].province_id == province_id) {
          $scope.city_select_list.push($scope.city_list[i]);
        }
      }
    }
  };
  $scope.changeCity = function(city_id) {
    if (validParam($scope.county_list)) {
      $scope.county_select_list = [];
      $scope.manufactory.zone_id = undefined;
      for (var i = 0;i < $scope.county_list.length;i++) {
        if ($scope.county_list[i].city_id == city_id) {
          $scope.county_select_list.push($scope.county_list[i]);
        }
      }
    }
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
};
goog.provide("jxmgrsec.add_news_modal.Ctrl");
jxmgrsec.add_news_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "$timeout", "constants", "page", "basic"];
jxmgrsec.add_news_modal.Ctrl = function($scope, $filter, $modalInstance, $timeout, $q, constants, page, basic) {
  $scope.newsPic = undefined;
  $scope.addNew = {pic_url:undefined, news_link:undefined};
  $scope.disabledAddButton = false;
  $scope.addNews = function() {
    $scope.disabledAddButton = true;
    if (!validParam($scope.newsPic)) {
      $scope.alerts = [];
      $scope.addAlert("warning", "\u8bf7\u9009\u62e9\u6587\u4ef6");
      $scope.disabledAddButton = false;
      return;
    }
    if (!validParam($scope.addNew.news_link)) {
      $scope.alerts = [];
      $scope.addAlert("warning", "\u65b0\u95fb\u94fe\u63a5\u5fc5\u987b\u586b\u5199");
      $scope.disabledAddButton = false;
      return;
    }
    if (!validPic($scope.newsPic, "png|jpg|jpeg|bmp|gif")) {
      $scope.alerts = [];
      $scope.addAlert("warning", "\u8bf7\u4e0a\u4f20png\u3001jpg\u3001gif\u7c7b\u578b\u7684\u6587\u4ef6\uff01");
      $scope.disabledAddButton = false;
      return;
    }
    return basic.fileUpload($scope.newsPic).then(function(res) {
      if (validParam(res.success_message[0])) {
        $scope.addNew.pic_url = res.success_message[0];
        return page.addNewResources($scope.addNew).then(function(res) {
          $scope.addAlert("success", "\u6dfb\u52a0\u6dfb\u52a0\u5ba2\u6237\u65b0\u95fb\u6210\u529f\uff0c3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
          $timeout(function() {
            $scope.disabledAddButton = false;
            $scope.cancel();
          }, 3E3);
        }, function(error) {
          $scope.addAlert("danger", "\u6dfb\u52a0\u6dfb\u52a0\u5ba2\u6237\u65b0\u95fb\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
          $scope.disabledAddButton = false;
        });
      } else {
        $scope.addAlert("warning", "\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
        $scope.disabledAddButton = false;
      }
    }, function(error) {
      $scope.addAlert("warning", "\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      $scope.disabledAddButton = false;
    });
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  function validPic(file, str) {
    if (file != undefined && file.type != undefined && str != undefined && str != "" && str.length != 0) {
      var suffixs = str.split("|");
      var fileSuf = file.type.split("/");
      var res = suffixs.filter(function(item) {
        return item == fileSuf[1];
      });
      if (res.length != 0) {
        return true;
      }
      return false;
    }
  }
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  function validParam(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  }
};
goog.provide("jxmgrsec.add_page_modal.Ctrl");
jxmgrsec.add_page_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "$timeout", "constants", "page", "basic"];
jxmgrsec.add_page_modal.Ctrl = function($scope, $filter, $modalInstance, $q, $timeout, constants, page, basic) {
  $scope.exhibitionPic = undefined;
  $scope.addExhibition = {pic_url:undefined};
  $scope.disabledAddButton = false;
  $scope.savePic = function() {
    $scope.disabledAddButton = true;
    if (!validParam($scope.exhibitionPic)) {
      $scope.alerts = [];
      $scope.addAlert("warning", "\u8bf7\u9009\u62e9\u6587\u4ef6");
      $scope.disabledAddButton = false;
      return;
    }
    if (!validPic($scope.exhibitionPic, "png|jpg|jpeg|bmp|gif")) {
      $scope.alerts = [];
      $scope.addAlert("warning", "\u8bf7\u4e0a\u4f20png\u3001jpg\u3001gif\u7c7b\u578b\u7684\u6587\u4ef6\uff01");
      $scope.disabledAddButton = false;
      return;
    }
    return basic.fileUpload($scope.exhibitionPic).then(function(res) {
      if (validParam(res.success_message[0])) {
        $scope.addExhibition.pic_url = res.success_message[0];
        return page.addExhibitionResources($scope.addExhibition).then(function(res) {
          $scope.addAlert("success", "\u6dfb\u52a0\u6dfb\u52a0\u5ba2\u6237\u7aef\u5ba3\u4f20\u9875\u9762\u6210\u529f,3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
          $timeout(function() {
            $scope.disabledAddButton = false;
            $scope.cancel();
          }, 3E3);
        }, function(error) {
          $scope.addAlert("danger", "\u6dfb\u52a0\u6dfb\u52a0\u5ba2\u6237\u7aef\u5ba3\u4f20\u9875\u9762\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
          $scope.disabledAddButton = false;
        });
      } else {
        $scope.addAlert("warning", "\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
        $scope.disabledAddButton = false;
      }
    }, function(error) {
      $scope.addAlert("warning", "\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      $scope.disabledAddButton = false;
    });
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  function validParam(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  }
  function validPic(file, str) {
    if (file != undefined && file.type != undefined && str != undefined && str != "" && str.length != 0) {
      var suffixs = str.split("|");
      var fileSuf = file.type.split("/");
      var res = suffixs.filter(function(item) {
        return item == fileSuf[1];
      });
      if (res.length != 0) {
        return true;
      }
      return false;
    }
  }
};
goog.provide("jxmgrsec.add_product_type_modal.Ctrl");
jxmgrsec.add_product_type_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "$timeout", "constants", "db_operation"];
jxmgrsec.add_product_type_modal.Ctrl = function($scope, $filter, $modalInstance, $q, constants, db_operation, $timeout) {
  $scope.disableBtn = false;
  $scope.submit = function() {
    $scope.disableBtn = true;
    db_operation.postAddProductTypes({name:$scope.productName}).then(function(succ) {
      $scope.addAlert("success", "\u6dfb\u52a0\u6210\u529f,3\u79d2\u949f\u540e\u81ea\u52a8\u5173\u95ed\uff01");
      $timeout(function() {
        $scope.cancel();
        $scope.disableBtn = false;
      }, 3E3);
    }, function(error) {
      $scope.disableBtn = false;
      $scope.addAlert("danger", "\u6dfb\u52a0\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxmgrsec.add_route_period_modal.Ctrl");
jxmgrsec.add_route_period_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "constants", "twatch", "entity", "$timeout"];
jxmgrsec.add_route_period_modal.Ctrl = function($scope, $filter, $modalInstance, $q, constants, twatch, entity, $timeout) {
  console.log(entity);
  $scope.time = {imei:entity, set_en:1, start:"00:00:00", stop:"00:00:00", weeks:undefined};
  $scope.weeks = constants.gotWEEKDAYS();
  $scope.addPeriod = function() {
    $scope.time.weeks = constants.weekDayHelperArray2Int($scope.time.weeks);
    twatch.postRoutePeriod($scope.time).then(function(succ) {
      $scope.addAlert("success", "\u6dfb\u52a0\u6210\u529f");
    }, function(error) {
      console.log(error);
      $scope.addAlert("danger", "\u6dfb\u52a0\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
    console.log($scope.time);
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxmgrsec.add_template_modal.Ctrl");
jxmgrsec.add_template_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "constants"];
jxmgrsec.add_template_modal.Ctrl = function($scope, $filter, $modalInstance, $q, constants) {
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxmgrsec.check_manufacturers_modal.Ctrl");
jxmgrsec.check_manufacturers_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "constants", "entity", "db_operation"];
jxmgrsec.check_manufacturers_modal.Ctrl = function($scope, $filter, $modalInstance, $q, constants, entity, db_operation) {
  $scope.manufacturers = [];
  activate();
  function activate() {
    var promises = [getDeviceTypes(entity.device_type_id)];
    return $q.all(promises).then(function() {
    });
  }
  function getDeviceTypes(did) {
    return db_operation.getDBManufacturers(did).then(function(data) {
      $scope.manufacturers = data.manufactories;
      return $scope.manufacturers;
    });
  }
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxmgrsec.check_terminal_modal.Ctrl");
jxmgrsec.check_terminal_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "constants", "db_operation", "entity"];
jxmgrsec.check_terminal_modal.Ctrl = function($scope, $filter, $modalInstance, $q, constants, db_operation, entity) {
  db_operation.getTerminalDetails(entity.terminal_id).then(function(data) {
    console.log(data);
    $scope.terminalDetails = {product_type_id:data.product_type_id, device_type_id:data.device_type_id, terminal_catagory_id:data.terminal_catagory_id, terminal_name:data.terminal_name, manufactory_name:data.manufactory_name, activated_at:data.activated_at};
  });
  activate();
  function activate() {
    var promises = [getProductTypes()];
    return $q.all(promises).then(function() {
    });
  }
  function getProductTypes() {
    return constants.getProductTypes().then(function(data) {
      $scope.product_types = data.product_types;
      return $scope.product_types;
    });
  }
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxmgrsec.check_users_modal.Ctrl");
jxmgrsec.check_users_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "constants", "i18nService", "db_operation", "entity"];
jxmgrsec.check_users_modal.Ctrl = function($scope, $filter, $modalInstance, $q, constants, i18nService, db_operation, entity) {
  $scope.product_types = [];
  $scope.product_types_selected = {selected:undefined};
  activate();
  function activate() {
    var promises = [getProductTypes()];
    return $q.all(promises).then(function() {
    });
  }
  function getProductTypes() {
    return constants.getProductTypes().then(function(data) {
      $scope.product_types = data.product_types;
      return $scope.product_types;
    });
  }
  $scope.gridOptions = {paginationPageSizes:[10, 20, 30], paginationPageSize:10};
  i18nService.setCurrentLang("zh-CN");
  $scope.gridOptions.columnDefs = [{field:"user_phone", name:"\u7528\u6237\u624b\u673a", width:"25%", pinnedLeft:true}, {field:"user_name", name:"\u7528\u6237\u540d\u79f0", width:"25%"}, {field:"used_count", name:"\u4f7f\u7528\u6b21\u6570", width:"25%"}, {field:"last_used_at", name:"\u6700\u8fd1\u4f7f\u7528\u65f6\u95f4", width:"25%", cellFilter:"unixTodate"}];
  $scope.gridOptions.enableFiltering = false;
  $scope.gridOptions.enableCellEdit = false;
  $scope.gridOptions.data = [{"user_phone":"12345678901", "user_name":"xxx", "used_count":"12", "last_used_at":"2015-5-10"}, {"user_phone":"12345678901", "user_name":"xxx", "used_count":"12", "last_used_at":"2015-5-10"}];
  $scope.gridOptions.onRegisterApi = function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
  };
  db_operation.getTerminalDetails(entity.terminal_id).then(function(data) {
    console.log(data);
    $scope.gridOptions.data = data.used_by;
  });
  db_operation;
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxmgrsec.main.db_operation.terminal.module");
goog.require("jxmgrsec.main.db_operation.terminal.Ctrl");
goog.require("jxmgrsec.check_terminal_modal.Ctrl");
goog.require("jxmgrsec.check_users_modal.Ctrl");
jxmgrsec.main.db_operation.terminal.module = angular.module("main.db_operation.terminal", ["ui.router", "ngResource", "ui.select", "ngSanitize", "ui.bootstrap", "angularModalService"]);
jxmgrsec.main.db_operation.terminal.module.configuration = function($stateProvider) {
  $stateProvider.state("main.db_operation.terminal", {url:"/terminal", templateUrl:"states/main/db_operation/terminal/terminal.html", controller:"TerminalCtrl as terminal"});
};
jxmgrsec.main.db_operation.terminal.module.config(jxmgrsec.main.db_operation.terminal.module.configuration).controller("TerminalCtrl", jxmgrsec.main.db_operation.terminal.Ctrl).controller("CheckTerminalModalCtrl", jxmgrsec.check_terminal_modal.Ctrl).controller("CheckUsersModalCtrl", jxmgrsec.check_users_modal.Ctrl);
goog.provide("jxmgrsec.delete_doctor_modal.Ctrl");
jxmgrsec.delete_doctor_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "entity", "constants", "db_operation", "basic", "$timeout", "md5"];
jxmgrsec.delete_doctor_modal.Ctrl = function($scope, $filter, $modalInstance, $q, entity, constants, db_operation, basic, $timeout, md5) {
  $scope.doctorId = entity;
  $scope.deleteDoctor = function() {
    console.log("deleteDoctor id: " + $scope.doctorId);
    db_operation.deleteDoctor($scope.doctorId).then(function(res) {
      $modalInstance.dismiss("cancel");
    }, function(error) {
      console.log(error);
      $scope.addAlert("danger", "\u5220\u9664\u533b\u751f\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxmgrsec.delete_manufactory_modal.Ctrl");
jxmgrsec.delete_manufactory_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "entity", "constants", "db_operation", "basic", "$timeout", "md5"];
jxmgrsec.delete_manufactory_modal.Ctrl = function($scope, $filter, $modalInstance, $q, entity, constants, db_operation, basic, $timeout, md5) {
  $scope.manuId = entity;
  $scope.deleteManu = function() {
    console.log("deleteDoctor id: " + $scope.manuId);
    db_operation.deleteManu($scope.manuId).then(function(res) {
      $modalInstance.dismiss("cancel");
    }, function(error) {
      console.log(error);
      $scope.addAlert("danger", "\u5220\u9664\u5382\u5546\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxmgrsec.add_doctor_permission_modal.Ctrl");
jxmgrsec.add_doctor_permission_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$timeout", "$q", "constants", "doctor"];
jxmgrsec.add_doctor_permission_modal.Ctrl = function($scope, $filter, $modalInstance, $timeout, $q, constants, doctor, doctor_id) {
  $scope.data_selects = [];
  $scope.permission = {permission_name:undefined, district_id:undefined, province_id:undefined, city_id:undefined, zone_id:undefined, data_type:1, filters:[]};
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  var permissionIsValided = function() {
    if (!validParam($scope.permission.permission_name)) {
      $scope.disabledBtn = false;
      return false;
    }
    if (!validParam($scope.permission.data_type)) {
      $scope.disabledBtn = false;
      return false;
    }
    return true;
  };
  var getWristbandColumns = function() {
    constants.getWristbandColumns().then(function(data) {
      $scope.data_selects = data.columns;
    }, function(error) {
      console.log(error);
    });
  };
  var getSphygmomanometerColumns = function() {
    constants.getSphygmomanometerColumns().then(function(data) {
      $scope.data_selects = data.columns;
    }, function(error) {
      console.log(error);
    });
  };
  var getGlucosemeterColumns = function() {
    constants.getGlucosemeterColumns().then(function(data) {
      $scope.data_selects = data.columns;
    }, function(error) {
      console.log(error);
    });
  };
  var getThermometerColumns = function() {
    constants.getThermometerColumns().then(function(data) {
      $scope.data_selects = data.columns;
    }, function(error) {
      console.log(error);
    });
  };
  var getOximeterColumns = function() {
    constants.getOximeterColumns().then(function(data) {
      $scope.data_selects = data.columns;
    }, function(error) {
      console.log(error);
    });
  };
  var getFatColumns = function() {
    constants.getFatColumns().then(function(data) {
      $scope.data_selects = data.columns;
    }, function(error) {
      console.log(error);
    });
  };
  var getComparisonOps = function() {
    constants.getComparisonOps().then(function(data) {
      $scope.comparisonOps_selects = data.ops;
    }, function(error) {
      console.log(error);
    });
  };
  getComparisonOps();
  var getLogicalOps = function() {
    constants.getLogicalOps().then(function(data) {
      $scope.logicalOps_selects = data.ops;
    }, function(error) {
      console.log(error);
    });
  };
  getLogicalOps();
  var getDataType = function() {
    constants.getDataTypes().then(function(data) {
      $scope.dataType_selects = data.data_types;
    });
  };
  $scope.changeDataType = function() {
    initialSelects($scope.permission.data_type);
    $scope.permission.filters = [];
  };
  getDataType();
  var getDistricts = function() {
    constants.getDistricts().then(function(data) {
      $scope.districts_selects = data.districts;
    });
  };
  $scope.changeDistrict = function(district_id) {
    if (validParam($scope.province_list)) {
      $scope.province_select_list = [];
      $scope.permission.city_id = undefined;
      $scope.permission.province_id = undefined;
      $scope.permission.zone_id = undefined;
      for (var i = 0;i < $scope.province_list.length;i++) {
        if ($scope.province_list[i].district_id == district_id) {
          $scope.province_select_list.push($scope.province_list[i]);
        }
      }
    }
  };
  function getProvinces() {
    return constants.getProvinces().then(function(data) {
      $scope.province_list = data.provinces;
    });
  }
  function getCities() {
    return constants.getCities().then(function(data) {
      $scope.city_list = data.cities;
    });
  }
  getCities();
  function getZones() {
    return constants.getZones().then(function(data) {
      $scope.county_list = data.zones;
    });
  }
  activate();
  function activate() {
    var promises = [getDistricts(), getProvinces(), getCities(), getZones()];
    return $q.all(promises).then(function() {
      $scope.changeDistrict($scope.permission.district_id);
      updateCityList($scope.permission.province_id);
      updateCountyList($scope.permission.city_id);
    });
  }
  function updateCityList(province_id) {
    if (validParam($scope.city_list.length)) {
      $scope.city_select_list = [];
      for (var i = 0;i < $scope.city_list.length;i++) {
        if ($scope.city_list[i].province_id == province_id) {
          $scope.city_select_list.push($scope.city_list[i]);
        }
      }
    }
  }
  function updateCountyList(city_id) {
    if (validParam($scope.county_list.length)) {
      $scope.county_select_list = [];
      for (var i = 0;i < $scope.county_list.length;i++) {
        if ($scope.county_list[i].city_id == city_id) {
          $scope.county_select_list.push($scope.county_list[i]);
        }
      }
    }
  }
  $scope.changeProvince = function() {
    $scope.permission.city_id = undefined;
    $scope.permission.zone_id = undefined;
    updateCityList($scope.permission.province_id);
  };
  $scope.changeCity = function() {
    $scope.permission.zone_id = undefined;
    updateCountyList($scope.permission.city_id);
  };
  var initialSelects = function(datatype) {
    if (validParam(datatype)) {
      switch(datatype) {
        case 1:
          getWristbandColumns();
          break;
        case 2:
          getSphygmomanometerColumns();
          break;
        case 3:
          getOximeterColumns();
          break;
        case 4:
          getGlucosemeterColumns();
          break;
        case 5:
          getThermometerColumns();
          break;
        case 6:
          getFatColumns();
          break;
      }
    }
  };
  initialSelects($scope.permission.data_type);
  $scope.oneFilter = {name_id:undefined, comparison_op_id:undefined, value:undefined, logical_op_id:undefined};
  $scope.visible = true;
  $scope.push_one_permission = function() {
    if (!validParam($scope.oneFilter.name_id) || !validParam($scope.oneFilter.comparison_op_id) || !validParam($scope.oneFilter.value) || !validParam($scope.oneFilter.logical_op_id) || isNaN($scope.oneFilter.value)) {
      $scope.addAlert("warning", "\u8bf7\u68c0\u67e5\u53c2\u6570\u7684\u6b63\u786e\u6027\uff01");
      return;
    }
    $scope.permission.filters.push(angular.copy($scope.oneFilter));
    $scope.isSave = 0;
    $scope.oneFilter = {};
  };
  $scope.removePermission = function(filter) {
    $scope.permission.filters.splice(filter);
  };
  $scope.isSave = 1;
  $scope.disabledBtn = false;
  $scope.addDoctorPermission = function() {
    $scope.disabledBtn = true;
    if (permissionIsValided()) {
      doctor.addDoctorPermission(doctor_id, {permission:$scope.permission}).then(function(data) {
        $scope.isSave = 2;
        if (data.permission_id !== undefined) {
          $scope.addAlert("success", "\u6dfb\u52a0\u533b\u751f\u6743\u9650\u6210\u529f,3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
          $timeout(function() {
            $scope.disabledBtn = false;
            $scope.cancel();
          }, 3E3);
        }
      }, function(error) {
        $scope.addAlert("success", "\u6dfb\u52a0\u533b\u751f\u6743\u9650\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
        $scope.disabledBtn = false;
      });
    }
  };
  $scope.clearDistrict = function() {
    $scope.permission.district_id = undefined;
    $scope.permission.province_id = undefined;
    $scope.permission.city_id = undefined;
    $scope.permission.zone_id = undefined;
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxmgrsec.edit_doctor_permission_modal.Ctrl");
jxmgrsec.edit_doctor_permission_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$timeout", "$q", "entity", "constants", "doctor"];
jxmgrsec.edit_doctor_permission_modal.Ctrl = function($scope, $filter, $modalInstance, $timeout, $q, entity, constants, doctor, doctor_id) {
  var ctrl = this;
  $scope.entity = {};
  $scope.data_selects = [];
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  var getWristbandColumns = function() {
    constants.getWristbandColumns().then(function(data) {
      $scope.data_selects = data.columns;
    }, function(error) {
      console.log(error);
    });
  };
  var getSphygmomanometerColumns = function() {
    constants.getSphygmomanometerColumns().then(function(data) {
      $scope.data_selects = data.columns;
    }, function(error) {
      console.log(error);
    });
  };
  var getGlucosemeterColumns = function() {
    constants.getGlucosemeterColumns().then(function(data) {
      $scope.data_selects = data.columns;
    }, function(error) {
      console.log(error);
    });
  };
  var getThermometerColumns = function() {
    constants.getThermometerColumns().then(function(data) {
      $scope.data_selects = data.columns;
    }, function(error) {
      console.log(error);
    });
  };
  var getOximeterColumns = function() {
    constants.getOximeterColumns().then(function(data) {
      $scope.data_selects = data.columns;
    }, function(error) {
      console.log(error);
    });
  };
  var getFatColumns = function() {
    constants.getFatColumns().then(function(data) {
      $scope.data_selects = data.columns;
    }, function(error) {
      console.log(error);
    });
  };
  var getComparisonOps = function() {
    constants.getComparisonOps().then(function(data) {
      $scope.comparisonOps_selects = data.ops;
    }, function(error) {
      console.log(error);
    });
  };
  getComparisonOps();
  var getLogicalOps = function() {
    constants.getLogicalOps().then(function(data) {
      $scope.logicalOps_selects = data.ops;
    }, function(error) {
      console.log(error);
    });
  };
  getLogicalOps();
  var getDataType = function() {
    constants.getDataTypes().then(function(data) {
      $scope.dataType_selects = data.data_types;
    });
  };
  getDataType();
  var getDistricts = function() {
    constants.getDistricts().then(function(data) {
      $scope.districts_selects = data.districts;
      console.log("Districts");
      console.log(data);
    });
  };
  getDistricts();
  $scope.changeDistrict = function(district_id) {
    if (validParam($scope.province_list)) {
      $scope.province_select_list = [];
      $scope.entity.city_id = undefined;
      $scope.entity.province_id = undefined;
      $scope.entity.zone_id = undefined;
      for (var i = 0;i < $scope.province_list.length;i++) {
        if ($scope.province_list[i].district_id == district_id) {
          $scope.province_select_list.push($scope.province_list[i]);
        }
      }
    }
  };
  function getProvinces() {
    return constants.getProvinces().then(function(data) {
      $scope.province_list = data.provinces;
    });
  }
  getProvinces();
  function getCities() {
    return constants.getCities().then(function(data) {
      $scope.city_list = data.cities;
    });
  }
  getCities();
  function getZones() {
    return constants.getZones().then(function(data) {
      $scope.county_list = data.zones;
    });
  }
  getZones();
  activate();
  function activate() {
    var promises = [getDistricts(), getProvinces(), getCities(), getZones()];
    return $q.all(promises).then(function() {
      $scope.changeDistrict(entity.district_id);
      updateCityList(entity.province_id);
      updateCountyList(entity.city_id);
      $scope.entity = entity;
    });
  }
  function updateCityList(province_id) {
    if (validParam($scope.city_list.length)) {
      $scope.city_select_list = [];
      for (var i = 0;i < $scope.city_list.length;i++) {
        if ($scope.city_list[i].province_id == province_id) {
          $scope.city_select_list.push($scope.city_list[i]);
        }
      }
    }
  }
  function updateCountyList(city_id) {
    if (validParam($scope.county_list.length)) {
      $scope.county_select_list = [];
      for (var i = 0;i < $scope.county_list.length;i++) {
        if ($scope.county_list[i].city_id == city_id) {
          $scope.county_select_list.push($scope.county_list[i]);
        }
      }
    }
  }
  $scope.changeProvince = function() {
    $scope.entity.city_id = undefined;
    $scope.entity.zone_id = undefined;
    updateCityList($scope.entity.province_id);
  };
  $scope.changeCity = function() {
    $scope.entity.zone_id = undefined;
    updateCountyList($scope.entity.city_id);
  };
  var initialSelects = function(datatype) {
    if (validParam(datatype)) {
      switch(datatype) {
        case 1:
          getWristbandColumns();
          break;
        case 2:
          getSphygmomanometerColumns();
          break;
        case 3:
          getOximeterColumns();
          break;
        case 4:
          getGlucosemeterColumns();
          break;
        case 5:
          getThermometerColumns();
          break;
        case 6:
          getFatColumns();
          break;
      }
    }
  };
  initialSelects(entity.data_type);
  $scope.oneFilter = {name_id:undefined, comparison_op_id:undefined, value:undefined, logical_op_id:undefined};
  $scope.visible = true;
  $scope.push_one_permission = function() {
    if (!validParam($scope.oneFilter.name_id) || !validParam($scope.oneFilter.comparison_op_id) || !validParam($scope.oneFilter.value) || !validParam($scope.oneFilter.logical_op_id) || isNaN($scope.oneFilter.value)) {
      $scope.addAlert("warning", "\u8bf7\u68c0\u67e5\u53c2\u6570\u7684\u6b63\u786e\u6027\uff01");
      return;
    }
    $scope.entity.filters.push(angular.copy($scope.oneFilter));
    $scope.isSave = 0;
    $scope.oneFilter = {};
  };
  $scope.removePermission = function(filter) {
    $scope.entity.filters.splice(filter);
  };
  $scope.isSave = 1;
  $scope.disabledBtn = false;
  $scope.updateDoctorPermission = function() {
    $scope.disabledBtn = true;
    if (validParam($scope.entity)) {
      doctor.updateDoctorPermission(doctor_id, $scope.entity.permission_id, {permission:$scope.entity}).then(function(data) {
        $scope.isSave = 2;
        if (data.error_message == undefined) {
          $scope.addAlert("success", "\u4fdd\u5b58\u6210\u529f,3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
          $timeout(function() {
            $scope.cancel();
            $scope.disabledBtn = false;
          }, 3E3);
        }
      }, function(error) {
        $scope.addAlert("success", "\u4fdd\u5b58\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
        $scope.disabledBtn = false;
      });
    }
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxmgrsec.main.permission.doctor_permission_list.module");
goog.require("jxmgrsec.main.permission.doctor_permission_list.Ctrl");
goog.require("jxmgrsec.edit_doctor_permission_modal.Ctrl");
goog.require("jxmgrsec.add_doctor_permission_modal.Ctrl");
jxmgrsec.main.permission.doctor_permission_list.module = angular.module("main.permission.doctor_permission_list", ["ui.router", "ui.grid", "ui.grid.pinning", "ui.grid.resizeColumns", "ui.grid.saveState", "ui.grid.edit", "ui.grid.pagination", "ui.select", "ui.bootstrap", "ngSanitize"]);
jxmgrsec.main.permission.doctor_permission_list.module.configuration = function($stateProvider) {
  $stateProvider.state("main.permission.doctor_permission_list", {url:"/doctor_permission_list/:doctor_id/:full_name", templateUrl:"states/main/permission/doctor_permission_list/doctor_permission_list.html", controller:"DoctorPermissionListCtrl as doctorPermissionList", resolve:{"DISTRICTSPromise":function(constants) {
    return constants.DISTRICTSPromise;
  }, "PROVINCESPromise":function(constants) {
    return constants.PROVINCESPromise;
  }, "CITIESPromise":function(constants) {
    return constants.CITIESPromise;
  }, "ZONESPromise":function(constants) {
    return constants.ZONESPromise;
  }, "DATATYPESPromise":function(constants) {
    return constants.DATATYPESPromise;
  }}});
};
jxmgrsec.main.permission.doctor_permission_list.module.config(jxmgrsec.main.permission.doctor_permission_list.module.configuration).controller("DoctorPermissionListCtrl", jxmgrsec.main.permission.doctor_permission_list.Ctrl).controller("EditDoctorPermissionModalCtrl", jxmgrsec.edit_doctor_permission_modal.Ctrl).controller("AddDoctorPermissionModalCtrl", jxmgrsec.add_doctor_permission_modal.Ctrl);
goog.provide("jxmgrsec.edit_exhi_address_modal.edit_exhi_address_modal.Ctrl");
jxmgrsec.edit_exhi_address_modal.edit_exhi_address_modal.Ctrl.$inject = ["$scope", "$modalInstance", "$timeout", "entity", "page", "basic"];
jxmgrsec.edit_exhi_address_modal.edit_exhi_address_modal.Ctrl = function($scope, $modalInstance, $timeout, entity, page, basic) {
  var ctrl = this;
  console.log(entity);
  $scope.modifyExh = {exhibition_resource_id:entity.exhibition_resource_id, pic_url:entity.pic_url};
  $scope.publicize_pic = undefined;
  $scope.disabledBtn = false;
  $scope.modifyExhibition = function() {
    $scope.disabledBtn = true;
    if (validParam($scope.publicize_pic)) {
      if (!validPic($scope.publicize_pic, "png|jpg|jpeg|bmp|gif")) {
        $scope.alerts = [];
        $scope.addAlert("warning", "\u8bf7\u4e0a\u4f20png\u3001jpg\u3001gif\u7c7b\u578b\u7684\u6587\u4ef6\uff01");
        $scope.disabledBtn = false;
        return;
      }
      return basic.fileUpload($scope.publicize_pic).then(function(data) {
        $scope.modifyExh.pic_url = data.success_message[0];
        if (validParam($scope.modifyExh.pic_url)) {
          page.modifyExhibitionResources($scope.modifyExh).then(function(res) {
            $scope.addAlert("success", "\u66f4\u6539\u56fe\u7247\u6210\u529f\uff0c3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
            $timeout(function() {
              $scope.disabledBtn = false;
              $scope.cancel();
            }, 3E3);
          }, function(error) {
            console.log(error);
            $scope.disabledBtn = false;
            $scope.addAlert("danger", "\u66f4\u6539\u56fe\u7247\u51fa\u9519\uff01");
          });
        }
      }, function(error) {
        $scope.disabledBtn = false;
        $scope.addAlert("danger", "\u66f4\u6539\u56fe\u7247\u51fa\u9519\uff01");
      });
    } else {
      $scope.disabledBtn = false;
      $scope.addAlert("danger", "\u56fe\u7247\u6587\u4ef6\u65e0\u6548\uff01");
    }
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  function validPic(file, str) {
    if (file != undefined && file.type != undefined && str != undefined && str != "" && str.length != 0) {
      var suffixs = str.split("|");
      var fileSuf = file.type.split("/");
      var res = suffixs.filter(function(item) {
        return item == fileSuf[1];
      });
      if (res.length != 0) {
        return true;
      }
      return false;
    }
  }
};
goog.provide("jxmgrsec.main.page.exhibition.module");
goog.require("jxmgrsec.main.page.exhibition.Ctrl");
goog.require("jxmgrsec.edit_exhi_address_modal.edit_exhi_address_modal.Ctrl");
goog.require("jxmgrsec.add_page_modal.Ctrl");
jxmgrsec.main.page.exhibition.module = angular.module("main.page.exhibition", ["ui.router", "ui.grid", "ui.grid.pinning", "ui.grid.resizeColumns", "ui.grid.saveState", "ui.grid.edit", "ui.grid.pagination", "ui.select", "ui.bootstrap", "ngSanitize"]);
jxmgrsec.main.page.exhibition.module.configuration = function($stateProvider) {
  $stateProvider.state("main.page.exhibition", {url:"/exhibition", templateUrl:"states/main/page/exhibition/exhibition.html", controller:"ExhibitionCtrl as exhibition"});
};
jxmgrsec.main.page.exhibition.module.config(jxmgrsec.main.page.exhibition.module.configuration).controller("ExhibitionCtrl", jxmgrsec.main.page.exhibition.Ctrl).controller("EditExhiAddressModalCtrl", jxmgrsec.edit_exhi_address_modal.edit_exhi_address_modal.Ctrl).controller("AddPageModalCtrl", jxmgrsec.add_page_modal.Ctrl);
goog.provide("jxmgrsec.edit_news_modal.edit_news_modal.Ctrl");
jxmgrsec.edit_news_modal.edit_news_modal.Ctrl.$inject = ["$scope", "$modalInstance", "$timeout", "entity", "page", "basic"];
jxmgrsec.edit_news_modal.edit_news_modal.Ctrl = function($scope, $modalInstance, $timeout, entity, page, basic) {
  var ctrl = this;
  console.log(entity);
  $scope.news_pic = undefined;
  $scope.modifyNew = {news_resource_id:entity.news_resource_id, pic_url:entity.pic_url, news_link:entity.news_link};
  $scope.disabledBtn = false;
  $scope.modifyNews = function() {
    $scope.disabledBtn = true;
    if (validParam($scope.news_pic)) {
      if (!validPic($scope.news_pic, "png|jpg|jpeg|bmp|gif")) {
        $scope.alerts = [];
        $scope.addAlert("warning", "\u8bf7\u4e0a\u4f20png\u3001jpg\u3001gif\u7c7b\u578b\u7684\u6587\u4ef6\uff01");
        $scope.disabledBtn = false;
        return;
      }
      return basic.fileUpload($scope.news_pic).then(function(data) {
        $scope.modifyNew.pic_url = data.success_message[0];
        if (validParam($scope.modifyNew.pic_url)) {
          page.modifyNewResources($scope.modifyNew).then(function(res) {
            $scope.addAlert("success", "\u66f4\u6539\u56fe\u7247\u6210\u529f\uff0c3\u79d2\u949f\u540e\u81ea\u52a8\u5173\u95ed\uff01");
            $timeout(function() {
              $scope.cancel();
              $scope.disabledBtn = false;
            }, 3E3);
          }, function(error) {
            $scope.addAlert("danger", "\u66f4\u6539\u56fe\u7247\u51fa\u9519\uff01");
            $scope.disabledBtn = false;
          });
        }
      }, function(error) {
        console.log("\u4e0a\u4f20\u6587\u4ef6\u51fa\u9519\uff01");
        $scope.addAlert("danger", "\u66f4\u6539\u56fe\u7247\u51fa\u9519\uff01");
        $scope.disabledBtn = false;
      });
    } else {
      console.log("\u6587\u4ef6\u65e0\u6548\uff01");
      $scope.addAlert("danger", "\u56fe\u7247\u6587\u4ef6\u65e0\u6548\uff01");
      $scope.disabledBtn = false;
    }
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  function validPic(file, str) {
    if (file != undefined && file.type != undefined && str != undefined && str != "" && str.length != 0) {
      var suffixs = str.split("|");
      var fileSuf = file.type.split("/");
      var res = suffixs.filter(function(item) {
        return item == fileSuf[1];
      });
      if (res.length != 0) {
        return true;
      }
      return false;
    }
  }
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxmgrsec.main.page.news.module");
goog.require("jxmgrsec.main.page.news.Ctrl");
goog.require("jxmgrsec.edit_news_modal.edit_news_modal.Ctrl");
goog.require("jxmgrsec.add_news_modal.Ctrl");
jxmgrsec.main.page.news.module = angular.module("main.page.news", ["ui.router", "ui.grid", "ui.grid.pinning", "ui.grid.resizeColumns", "ui.grid.saveState", "ui.grid.edit", "ui.grid.pagination", "ui.select", "ui.bootstrap", "ngSanitize"]);
jxmgrsec.main.page.news.module.configuration = function($stateProvider) {
  $stateProvider.state("main.page.news", {url:"/news", templateUrl:"states/main/page/news/news.html", controller:"NewsCtrl as news"});
};
jxmgrsec.main.page.news.module.config(jxmgrsec.main.page.news.module.configuration).controller("NewsCtrl", jxmgrsec.main.page.news.Ctrl).controller("EditNewsModalCtrl", jxmgrsec.edit_news_modal.edit_news_modal.Ctrl).controller("AddNewsModalCtrl", jxmgrsec.add_news_modal.Ctrl);
goog.provide("jxmgrsec.health_data_modals.fat_modal.Ctrl");
jxmgrsec.health_data_modals.fat_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "$timeout", "constants", "entity", "health_data"];
jxmgrsec.health_data_modals.fat_modal.Ctrl = function($scope, $filter, $modalInstance, $q, $timeout, constants, entity, health_data) {
  $scope.entity = entity;
  $scope.patFat = {measured_at:undefined, bmi_value:undefined, weight_value:undefined, fat_value:undefined, calorie_value:undefined, moisture_value:undefined, muscle_value:undefined, visceral_fat_value:undefined, bone_value:undefined, proposal:undefined};
  $scope.getPatFat = function() {
    health_data.getFats($scope.entity.measurement_id).then(function(data) {
      console.log(data);
      $scope.patFat = data;
      $scope.patFat.measured_at = $filter("unixTodate")(data.measured_at);
    }, function(error) {
      console.log(error);
    });
  };
  $scope.disabledBtn = false;
  $scope.getPatFat();
  $scope.savePatFat = function() {
    $scope.disabledBtn = true;
    $scope.patFat.measured_at = $filter("dateTounix")($filter("date")($scope.patFat.measured_at, "yyyy-M-dd H:mm:ss"));
    health_data.saveFats($scope.entity.measurement_id, $scope.patFat).then(function(data) {
      $scope.addAlert("success", "\u63a8\u9001\u6210\u529f\uff0c3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
      $timeout(function() {
        $scope.disabledBtn = false;
        $scope.cancel();
      }, 3E3);
      $scope.patFat.measured_at = $filter("unixTodate")($scope.patFat.measured_at);
    }, function(error) {
      $scope.addAlert("danger", "\u63a8\u9001\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      $scope.disabledBtn = false;
    });
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.dt = new Date;
  $scope.minDate = new Date("1900/01/01");
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[2];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxmgrsec.health_data_modals.glucosemeter_modal.Ctrl");
jxmgrsec.health_data_modals.glucosemeter_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "$timeout", "constants", "entity", "health_data"];
jxmgrsec.health_data_modals.glucosemeter_modal.Ctrl = function($scope, $filter, $modalInstance, $q, $timeout, constants, entity, health_data) {
  $scope.entity = entity;
  console.log($scope.entity);
  $scope.patGlucose = {measured_at:undefined, period:undefined, glucosemeter_value:undefined, proposal:undefined};
  $scope.periods = constants.gotPERIODS();
  $scope.getPatGlucose = function() {
    health_data.getGlucosemeters($scope.entity.measurement_id).then(function(data) {
      console.log(data);
      $scope.patGlucose = data;
      $scope.patGlucose.measured_at = $filter("unixTodate")(data.measured_at);
    }, function(error) {
      console.log(error);
    });
  };
  $scope.getPatGlucose();
  $scope.disabledBtn = false;
  $scope.savePatGlucose = function() {
    $scope.disabledBtn = true;
    $scope.patGlucose.measured_at = $filter("dateTounix")($filter("date")($scope.patGlucose.measured_at, "yyyy-M-dd H:mm:ss"));
    return health_data.saveGlucosemeters($scope.entity.measurement_id, $scope.patGlucose).then(function(data) {
      $scope.addAlert("success", "\u63a8\u9001\u6210\u529f\uff0c3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
      $timeout(function() {
        $scope.disabledBtn = false;
        $scope.cancel();
      }, 3E3);
      $scope.patGlucose.measured_at = $filter("unixTodate")($scope.patGlucose.measured_at);
    }, function(error) {
      $scope.addAlert("danger", "\u63a8\u9001\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      $scope.cancel();
    });
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.dt = new Date;
  $scope.minDate = new Date("1900/01/01");
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[2];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxmgrsec.health_data_modals.oximeter_modal.Ctrl");
jxmgrsec.health_data_modals.oximeter_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "$timeout", "constants", "entity", "health_data"];
jxmgrsec.health_data_modals.oximeter_modal.Ctrl = function($scope, $filter, $modalInstance, $q, $timeout, constants, entity, health_data) {
  $scope.entity = entity;
  console.log($scope.entity);
  $scope.patOxi = {measured_at:undefined, oximeter_value:undefined, proposal:undefined};
  $scope.getPatOxi = function() {
    health_data.getOximeter($scope.entity.measurement_id).then(function(data) {
      $scope.patOxi = data;
      $scope.patOxi.measured_at = $filter("unixTodate")(data.measured_at);
      console.log(data);
    }, function(error) {
      console.log(error);
    });
  };
  $scope.getPatOxi();
  $scope.disabledBtn = false;
  $scope.savePatOxi = function() {
    $scope.disabledBtn = true;
    $scope.patOxi.measured_at = $filter("dateTounix")($filter("date")($scope.patOxi.measured_at, "yyyy-M-dd H:mm:ss"));
    return health_data.saveOximeters($scope.entity.measurement_id, $scope.patOxi).then(function(data) {
      $scope.addAlert("success", "\u63a8\u9001\u6210\u529f\uff0c3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
      $timeout(function() {
        $scope.disabledBtn = false;
        $scope.cancel();
      }, 3E3);
      $scope.patOxi.measured_at = $filter("unixTodate")($scope.patOxi.measured_at);
    }, function(error) {
      $scope.addAlert("danger", "\u63a8\u9001\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      $scope.disabledBtn = false;
    });
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.dt = new Date;
  $scope.minDate = new Date("1900/01/01");
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[2];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxmgrsec.health_data_modals.sphygmomanometer_modal.Ctrl");
jxmgrsec.health_data_modals.sphygmomanometer_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "$timeout", "constants", "entity", "health_data"];
jxmgrsec.health_data_modals.sphygmomanometer_modal.Ctrl = function($scope, $filter, $modalInstance, $q, $timeout, constants, entity, health_data) {
  $scope.entity = entity;
  console.log("$scope.entity");
  console.log($scope.entity);
  $scope.patSphy = {measured_at:undefined, systolic_pressure:undefined, diastolic_pressure:undefined, heart_rate:undefined, proposal:undefined};
  $scope.getPatSphy = function() {
    health_data.getSphygmomanometers($scope.entity.measurement_id).then(function(data) {
      $scope.patSphy = data;
      $scope.patSphy.measured_at = $filter("unixTodate")(data.measured_at);
      console.log(data);
    }, function(error) {
      console.log(error);
    });
  };
  $scope.getPatSphy();
  $scope.disabledBtn = false;
  $scope.savePatSphy = function() {
    $scope.disabledBtn = true;
    $scope.patSphy.measured_at = $filter("dateTounix")($filter("date")($scope.patSphy.measured_at, "yyyy-M-dd H:mm:ss"));
    health_data.saveSphygmomanometers($scope.entity.measurement_id, $scope.patSphy).then(function(data) {
      $scope.addAlert("success", "\u63a8\u9001\u6210\u529f\uff0c3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
      $timeout(function() {
        $scope.disabledBtn = false;
        $scope.cancel();
      }, 3E3);
      $scope.patSphy.measured_at = $filter("unixTodate")($scope.patSphy.measured_at);
    }, function(error) {
      $scope.addAlert("danger", "\u63a8\u9001\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      $scope.disabledBtn = false;
    });
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.dt = new Date;
  $scope.minDate = new Date("1900/01/01");
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[2];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxmgrsec.health_data_modals.thermometer_modal.Ctrl");
jxmgrsec.health_data_modals.thermometer_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "$timeout", "constants", "entity", "health_data"];
jxmgrsec.health_data_modals.thermometer_modal.Ctrl = function($scope, $filter, $modalInstance, $q, $timeout, constants, entity, health_data) {
  $scope.entity = entity;
  console.log(entity);
  $scope.patThermome = {measured_at:undefined, thermometer_value:undefined, proposal:undefined};
  $scope.getPatThermome = function() {
    health_data.getThermometers($scope.entity.measurement_id).then(function(data) {
      $scope.patThermome = data;
      $scope.patThermome.measured_at = $filter("unixTodate")(data.measured_at);
    }, function(error) {
      console.log(error);
    });
  };
  $scope.getPatThermome();
  $scope.disabledBtn = false;
  $scope.savePatThermome = function() {
    $scope.disabledBtn = true;
    $scope.patThermome.measured_at = $filter("dateTounix")($filter("date")($scope.patThermome.measured_at, "yyyy-M-dd H:mm:ss"));
    health_data.saveThermometers($scope.entity.measurement_id, $scope.patThermome).then(function(data) {
      $scope.addAlert("success", "\u63a8\u9001\u6210\u529f\uff0c3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
      $timeout(function() {
        $scope.disabledBtn = false;
        $scope.cancel();
      }, 3E3);
      $scope.patThermome.measured_at = $filter("unixTodate")($scope.patThermome.measured_at);
    }, function(error) {
      console.log(error);
      $scope.addAlert("danger", "\u63a8\u9001\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      $scope.disabledBtn = false;
    });
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.dt = new Date;
  $scope.minDate = new Date("1900/01/01");
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[2];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxmgrsec.health_data_modals.wristband_modal.Ctrl");
jxmgrsec.health_data_modals.wristband_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "$timeout", "constants", "entity", "health_data"];
jxmgrsec.health_data_modals.wristband_modal.Ctrl = function($scope, $filter, $modalInstance, $q, $timeout, constants, entity, health_data) {
  $scope.entity = entity;
  $scope.patWrist = {step_count:undefined, distance:undefined, calories:undefined, walk_count:undefined, walk_distance:undefined, walk_calories:undefined, run_count:undefined, run_distance:undefined, run_calories:undefined, deep_duration:undefined, shallow_duration:undefined, heart_rate:undefined, symptom:undefined, measured_at:undefined};
  $scope.getPatWrist = function() {
    return health_data.getWristbands($scope.entity.measurement_id).then(function(data) {
      if (!isNaN(data.distance)) {
        data.distance /= 10;
      }
      if (!isNaN(data.walk_distance)) {
        data.walk_distance /= 10;
      }
      $scope.patWrist = data;
      $scope.patWrist.measured_at = $filter("unixTodate")(data.measured_at);
    }, function(error) {
      console.log(error);
    });
  };
  $scope.getPatWrist();
  $scope.disabledBtn = false;
  $scope.savePatWrist = function() {
    if (!isNaN($scope.patWrist.distance)) {
      $scope.patWrist.distance *= 10;
    }
    if (!isNaN($scope.patWrist.walk_distance)) {
      $scope.patWrist.walk_distance *= 10;
    }
    $scope.patWrist.measured_at = $filter("dateTounix")($filter("date")($scope.patWrist.measured_at, "yyyy-M-dd H:mm:ss"));
    return health_data.saveWristbands($scope.entity.measurement_id, $scope.patWrist).then(function(data) {
      $scope.disabledBtn = true;
      $scope.addAlert("success", "\u63a8\u9001\u6210\u529f\uff0c3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
      $timeout(function() {
        $scope.cancel();
      }, 3E3);
      $scope.patWrist.measured_at = $filter("unixTodate")($scope.patWrist.measured_at);
      if (!isNaN($scope.patWrist.distance)) {
        $scope.patWrist.distance /= 10;
      }
      if (!isNaN($scope.patWrist.walk_distance)) {
        $scope.patWrist.walk_distance /= 10;
      }
    }, function(error) {
      $scope.addAlert("danger", "\u63a8\u9001\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      $scope.disabledBtn = false;
    });
  };
  $scope.entity = entity;
  $scope.product_types = [];
  $scope.product_types_selected = {selected:undefined};
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.dt = new Date;
  $scope.minDate = new Date("1900/01/01");
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[2];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxmgrsec.main.health_data.module");
goog.require("jxmgrsec.main.health_data.Ctrl");
goog.require("jxmgrsec.health_data_modals.fat_modal.Ctrl");
goog.require("jxmgrsec.health_data_modals.glucosemeter_modal.Ctrl");
goog.require("jxmgrsec.health_data_modals.oximeter_modal.Ctrl");
goog.require("jxmgrsec.health_data_modals.sphygmomanometer_modal.Ctrl");
goog.require("jxmgrsec.health_data_modals.thermometer_modal.Ctrl");
goog.require("jxmgrsec.health_data_modals.wristband_modal.Ctrl");
jxmgrsec.main.health_data.module = angular.module("main.health_data", ["ui.router", "ui.select", "ui.bootstrap", "ngSanitize"]);
jxmgrsec.main.health_data.module.configuration = function($stateProvider) {
  $stateProvider.state("main.health_data", {url:"/health_data", templateUrl:"states/main/health_data/health_data.html", controller:"HealthDataCtrl as healthData", resolve:{"HEALTHDATASTATUSPromise":function(constants) {
    return constants.HEALTHDATASTATUSPromise;
  }, "DATATYPESPromise":function(constants) {
    return constants.gotDATATYPES;
  }, "PERIODSPromise":function(constants) {
    return constants.PERIODSPromise;
  }}});
};
jxmgrsec.main.health_data.module.config(jxmgrsec.main.health_data.module.configuration).controller("HealthDataCtrl", jxmgrsec.main.health_data.Ctrl).controller("FatModalCtrl", jxmgrsec.health_data_modals.fat_modal.Ctrl).controller("GlucosemeterModalCtrl", jxmgrsec.health_data_modals.glucosemeter_modal.Ctrl).controller("OximeterModalCtrl", jxmgrsec.health_data_modals.oximeter_modal.Ctrl).controller("SphygmomanometerModalCtrl", jxmgrsec.health_data_modals.sphygmomanometer_modal.Ctrl).controller("ThermometerModalCtrl", 
jxmgrsec.health_data_modals.thermometer_modal.Ctrl).controller("WristbandModalCtrl", jxmgrsec.health_data_modals.wristband_modal.Ctrl);
goog.provide("jxmgrsec.edit_manufactory_permission_modal.Ctrl");
jxmgrsec.edit_manufactory_permission_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$timeout", "$q", "entity", "constants", "manufactory"];
jxmgrsec.edit_manufactory_permission_modal.Ctrl = function($scope, $filter, $modalInstance, $timeout, $q, entity, constants, manufactory) {
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  var device_length = 6;
  $scope.deviceTypes_selects = constants.gotDEVICETYPES();
  if (validParam($scope.deviceTypes_selects)) {
    device_length = $scope.deviceTypes_selects.length;
  }
  $scope.entity = entity;
  $scope.checkedValid = function() {
    if ($scope.entity.device_type_ids.length > 4) {
      $scope.isErr = true;
      $scope.entity.device_type_ids.splice(4);
      $scope.addAlert("warning", "\u6700\u591a\u53ef\u7ba1\u7406\uff14\u79cd\u8bbe\u5907\uff01");
      console.log($scope.entity.device_type_ids);
    }
  };
  var Right = {device_type_id:undefined, enabled:0};
  var RightLists = function(rights) {
    var allRights = [];
    for (var i = 0;i < device_length;i++) {
      Right.device_type_id = i + 1;
      if (validParam(rights.length && rights.length != 0)) {
        if (rights.contains(i + 1)) {
          Right.enabled = 1;
        }
      }
      allRights.push(angular.copy(Right));
      Right = {device_type_id:undefined, enabled:0};
    }
    return allRights;
  };
  $scope.clear = function() {
    $scope.entity.device_type_ids = [];
    $scope.isErr = false;
  };
  $scope.disabledBtn = false;
  $scope.updateManufactoryPermission = function() {
    $scope.disabledBtn = true;
    if (validParam($scope.entity)) {
      if (validParam($scope.entity.device_type_ids) && $scope.entity.device_type_ids.length > 4) {
        $scope.addAlert("warning", "\u6700\u591a\u53ef\u7ba1\u7406\uff14\u79cd\u8bbe\u5907\uff01");
        $scope.disabledBtn = false;
        return;
      }
      return manufactory.editManPermission($scope.entity.manufactory_id, {right_list:RightLists($scope.entity.device_type_ids)}).then(function(data) {
        if (data.error_message == undefined) {
          $scope.addAlert("success", "\u4fdd\u5b58\u6210\u529f,3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
          $timeout(function() {
            $scope.disabledBtn = false;
            $scope.cancel();
          }, 3E3);
        }
      }, function(error) {
        $scope.addAlert("danger", "\u4fdd\u5b58\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      });
    }
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  Array.prototype.contains = function(obj) {
    var i = this.length;
    while (i--) {
      if (this[i] === obj) {
        return true;
      }
    }
    return false;
  };
};
goog.provide("jxmgrsec.main.permission.manufactory_permission.module");
goog.require("jxmgrsec.main.permission.manufactory_permission.Ctrl");
goog.require("jxmgrsec.edit_manufactory_permission_modal.Ctrl");
jxmgrsec.main.permission.manufactory_permission.module = angular.module("main.permission.manufactory_permission", ["ui.router", "ui.grid", "ui.grid.pinning", "ui.grid.resizeColumns", "ui.grid.saveState", "ui.grid.edit", "ui.grid.pagination", "ui.select", "ui.bootstrap", "ngSanitize"]);
jxmgrsec.main.permission.manufactory_permission.module.configuration = function($stateProvider) {
  $stateProvider.state("main.permission.manufactory_permission", {url:"/manufactory_permission", templateUrl:"states/main/permission/manufactory_permission/manufactory_permission.html", controller:"ManufactoryPermissionCtrl as manufactoryPermission", resolve:{"DEVICETYPESPromise":function(constants) {
    return constants.DEVICETYPESPromise;
  }, "MANUFACTORYSTATUSPromise":function(constants) {
    return constants.MANUFACTORYSTATUSPromise;
  }}});
};
jxmgrsec.main.permission.manufactory_permission.module.config(jxmgrsec.main.permission.manufactory_permission.module.configuration).controller("ManufactoryPermissionCtrl", jxmgrsec.main.permission.manufactory_permission.Ctrl).controller("EditManufactoryPermissionModalCtrl", jxmgrsec.edit_manufactory_permission_modal.Ctrl);
goog.provide("jxmgrsec.main.permission.module");
goog.require("jxmgrsec.main.permission.manufactory_permission.module");
goog.require("jxmgrsec.main.permission.doctor_permission.module");
goog.require("jxmgrsec.main.permission.doctor_permission_list.module");
goog.require("jxmgrsec.main.permission.Ctrl");
jxmgrsec.main.permission.module = angular.module("main.permission", ["ui.router", "ui.grid", "ui.grid.pinning", "ui.grid.resizeColumns", "ui.grid.saveState", "ui.grid.edit", "ui.grid.pagination", jxmgrsec.main.permission.manufactory_permission.module.name, jxmgrsec.main.permission.doctor_permission.module.name, jxmgrsec.main.permission.doctor_permission_list.module.name]);
jxmgrsec.main.permission.module.configuration = function($stateProvider) {
  $stateProvider.state("main.permission", {url:"/permission", templateUrl:"states/main/permission/permission.html", controller:"Permissiontrl as permission"});
};
jxmgrsec.main.permission.module.config(jxmgrsec.main.permission.module.configuration).controller("Permissiontrl", jxmgrsec.main.permission.Ctrl);
goog.provide("jxmgrsec.manufacturer_detail_modal.Ctrl");
jxmgrsec.manufacturer_detail_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "entity", "constants", "db_operation", "basic", "$timeout", "md5"];
jxmgrsec.manufacturer_detail_modal.Ctrl = function($scope, $filter, $modalInstance, $q, entity, constants, db_operation, basic, $timeout, md5) {
  $scope.manuId = entity;
  $scope.company_departments = constants.gotCOMPANYDEPARTMENTS();
  $scope.device_types = constants.gotDEVICETYPES();
  $scope.company_members_list = constants.gotCOMPANYMEMBERS();
  $scope.company_industry_list = constants.gotCOMPANYINDUSTRIES();
  $scope.company_nature_list = constants.gotCOMPANYNATURES();
  $scope.province_list = constants.gotPROVINCES();
  $scope.city_list = constants.gotCITIES();
  $scope.county_list = constants.gotZONES();
  $scope.business_licencefile = undefined;
  $scope.internal_certificatefile = undefined;
  $scope.local_certificatefile = undefined;
  $scope.code_certificatefile = undefined;
  $scope.logo_file = undefined;
  $scope.manufactory = {login_name:undefined, full_name:undefined, contactor:undefined, password:undefined, department:undefined, telephone:undefined, phone:undefined, email:undefined, code:undefined, profile:undefined, province_id:undefined, city_id:undefined, zone_id:undefined, address:undefined, device_type_ids:undefined, members:undefined, industry:undefined, nature:undefined, business_licence:undefined, internal_certificate:undefined, local_certificate:undefined, code_certificate:undefined, 
  logo_url:undefined};
  $scope.new_password = "";
  $scope.confirm_password = "";
  $scope.getManuById = function() {
    db_operation.getManuDetail($scope.manuId).then(function(res) {
      $scope.manufactory = res;
    });
  };
  $scope.activate = function() {
    var promises = [$scope.getManuById()];
    return $q.all(promises).then(function() {
    });
  };
  $scope.activate();
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxmgrsec.add_mode_blackname_modal.Ctrl");
jxmgrsec.add_mode_blackname_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "constants", "twatch", "entity", "imei"];
jxmgrsec.add_mode_blackname_modal.Ctrl = function($scope, $filter, $modalInstance, $q, constants, twatch, entity, imei) {
  console.log(entity);
  var getAllData = function() {
    for (var i = entity.length - 1;i >= 0;i--) {
      addblack.blacklist.push(entity[i]);
    }
    addblack.blacklist.push($scope.black);
  };
  $scope.black = {name:undefined, number:undefined};
  var addblack = {imei:imei, blacklist:[]};
  $scope.addBlack = function() {
    getAllData();
    console.log(addblack);
    twatch.addBlackList(addblack).then(function(res) {
      console.log(res);
      $scope.cancel();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxmgrsec.add_mode_pieroid_modal.Ctrl");
jxmgrsec.add_mode_pieroid_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "constants", "twatch", "entity"];
jxmgrsec.add_mode_pieroid_modal.Ctrl = function($scope, $filter, $modalInstance, $q, constants, twatch, entity) {
  console.log(entity);
  $scope.week_days = constants.gotWEEKDAYS();
  $scope.weekdays = {week:[]};
  $scope.time = {runmode:2, start:undefined, stop:undefined, weeks:undefined};
  $scope.addModePeriod = {imei:entity, mode_periods:[$scope.time]};
  $scope.addPeriod = function() {
    $scope.time.weeks = constants.weekDayHelperArray2Int($scope.weekdays.week);
    twatch.addModePeriods($scope.addModePeriod).then(function(res) {
      console.log(res);
      $scope.cancel();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxmgrsec.add_mode_whitename_modal.Ctrl");
jxmgrsec.add_mode_whitename_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "constants", "twatch", "entity", "imei"];
jxmgrsec.add_mode_whitename_modal.Ctrl = function($scope, $filter, $modalInstance, $q, constants, twatch, entity, imei) {
  var getAllData = function() {
    for (var i = entity.length - 1;i >= 0;i--) {
      addwhite.whitelist.push(entity[i]);
    }
    addwhite.whitelist.push($scope.white);
  };
  $scope.white = {name:undefined, number:undefined};
  var addwhite = {imei:imei, whitelist:[]};
  $scope.addWhite = function() {
    getAllData();
    console.log(addwhite);
    twatch.addWhiteList(addwhite).then(function(res) {
      console.log(res);
      $scope.cancel();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxmgrsec.delete_mode_blackname_modal.Ctrl");
jxmgrsec.delete_mode_blackname_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "constants", "entity", "twatch", "griddata", "imei"];
jxmgrsec.delete_mode_blackname_modal.Ctrl = function($scope, $filter, $modalInstance, $q, constants, entity, twatch, griddata, imei) {
  console.log(entity);
  console.log(griddata);
  console.log(imei);
  var getAllData = function() {
    for (var i = griddata.length - 1;i >= 0;i--) {
      if (entity.$$hashKey == griddata[i].$$hashKey) {
      } else {
        addblack.blacklist.push(griddata[i]);
      }
    }
  };
  $scope.black = {name:entity.name, number:entity.number};
  var addblack = {imei:imei, blacklist:[]};
  $scope.deleteBlack = function() {
    getAllData();
    console.log(addblack);
    twatch.addBlackList(addblack).then(function(res) {
      console.log(res);
      $scope.cancel();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxmgrsec.delete_mode_pieroid_modal.Ctrl");
jxmgrsec.delete_mode_pieroid_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "constants", "entity", "twatch"];
jxmgrsec.delete_mode_pieroid_modal.Ctrl = function($scope, $filter, $modalInstance, $q, constants, entity, twatch) {
  $scope.pieroid_submit = {"start":entity.start, "stop":entity.stop, "runmode":[{"mode_id":"2", "mode_name":"GPS\u6a21\u5f0f"}], "runmode_selected":{"mode_id":"2", "mode_name":"GPS\u6a21\u5f0f"}};
  $scope.ok = function() {
    console.log(pieroid_submit);
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxmgrsec.delete_mode_whitename_modal.Ctrl");
jxmgrsec.delete_mode_whitename_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "constants", "entity", "twatch", "griddata", "imei"];
jxmgrsec.delete_mode_whitename_modal.Ctrl = function($scope, $filter, $modalInstance, $q, constants, entity, twatch, imei, griddata) {
  console.log(entity);
  console.log(griddata.length);
  console.log(imei);
  var getAllData = function() {
    for (var i = griddata.length - 1;i >= 0;i--) {
      if (entity.$$hashKey == griddata[i].$$hashKey) {
      } else {
        addwhite.whitelist.push(griddata[i]);
      }
    }
  };
  $scope.white = {name:entity.name, number:entity.number};
  var addwhite = {imei:imei, whitelist:[]};
  $scope.deleteWhite = function() {
    getAllData();
    console.log(addwhite);
    twatch.addWhiteList(addwhite).then(function(res) {
      console.log(res);
      $scope.cancel();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxmgrsec.modify_mode_blackname_modal.Ctrl");
jxmgrsec.modify_mode_blackname_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "constants", "entity", "twatch", "griddata", "imei"];
jxmgrsec.modify_mode_blackname_modal.Ctrl = function($scope, $filter, $modalInstance, $q, constants, entity, twatch, griddata, imei) {
  console.log(entity);
  console.log(griddata);
  console.log(imei);
  var getAllData = function() {
    for (var i = griddata.length - 1;i >= 0;i--) {
      if (entity.$$hashKey == griddata[i].$$hashKey) {
        addblack.blacklist.push($scope.black);
      } else {
        addblack.blacklist.push(griddata[i]);
      }
    }
  };
  $scope.black = {name:entity.name, number:entity.number};
  var addblack = {imei:imei, blacklist:[]};
  $scope.modifyBlack = function() {
    getAllData();
    console.log(addblack);
    twatch.addBlackList(addblack).then(function(res) {
      console.log(res);
      $scope.cancel();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxmgrsec.modify_mode_pieroid_modal.Ctrl");
jxmgrsec.modify_mode_pieroid_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "constants", "entity", "twatch", "imei"];
jxmgrsec.modify_mode_pieroid_modal.Ctrl = function($scope, $filter, $modalInstance, $q, constants, entity, twatch, imei) {
  console.log(entity);
  console.log(imei);
  $scope.week_days = constants.gotWEEKDAYS();
  $scope.weekdays = {week:constants.weekDayHelperInt2Array(entity.weeks)};
  $scope.period_submit = {period_id:entity.period_id, start:entity.start, stop:entity.stop, runmode:2, weeks:undefined};
  var modifyperiod = {imei:imei, period:$scope.period_submit};
  $scope.modifyPeriod = function() {
    $scope.period_submit.weeks = constants.weekDayHelperArray2Int($scope.weekdays.week);
    console.log(modifyperiod);
    twatch.modifyModePeriods(modifyperiod).then(function(res) {
      console.log(res);
      $scope.cancel();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxmgrsec.modify_mode_whitename_modal.Ctrl");
jxmgrsec.modify_mode_whitename_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "constants", "entity", "twatch", "griddata", "imei"];
jxmgrsec.modify_mode_whitename_modal.Ctrl = function($scope, $filter, $modalInstance, $q, constants, entity, twatch, imei, griddata) {
  console.log(entity);
  console.log(griddata);
  console.log(imei);
  var getAllData = function() {
    for (var i = griddata.length - 1;i >= 0;i--) {
      if (entity.$$hashKey == griddata[i].$$hashKey) {
        addwhite.whitelist.push($scope.white);
      } else {
        addwhite.whitelist.push(griddata[i]);
      }
    }
  };
  $scope.white = {name:entity.name, number:entity.number};
  var addwhite = {imei:imei, whitelist:[]};
  $scope.modifyWhite = function() {
    getAllData();
    console.log(addwhite);
    twatch.addWhiteList(addwhite).then(function(res) {
      console.log(res);
      $scope.cancel();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxmgrsec.main.twatch.mode.module");
goog.require("jxmgrsec.main.twatch.mode.Ctrl");
goog.require("jxmgrsec.modify_mode_whitename_modal.Ctrl");
goog.require("jxmgrsec.add_mode_whitename_modal.Ctrl");
goog.require("jxmgrsec.delete_mode_whitename_modal.Ctrl");
goog.require("jxmgrsec.modify_mode_blackname_modal.Ctrl");
goog.require("jxmgrsec.add_mode_blackname_modal.Ctrl");
goog.require("jxmgrsec.delete_mode_blackname_modal.Ctrl");
goog.require("jxmgrsec.modify_mode_pieroid_modal.Ctrl");
goog.require("jxmgrsec.add_mode_pieroid_modal.Ctrl");
goog.require("jxmgrsec.delete_mode_pieroid_modal.Ctrl");
jxmgrsec.main.twatch.mode.module = angular.module("main.twatch.mode", ["ui.router"]);
jxmgrsec.main.twatch.mode.module.configuration = function($stateProvider) {
  $stateProvider.state("main.twatch.mode", {url:"/mode", templateUrl:"states/main/twatch/mode/mode.html", controller:"ModeCtrl as mode", resolve:{"WORKMODESPromise":function(constants) {
    return constants.WORKMODESPromise;
  }, "WORKTYPESPromise":function(constants) {
    return constants.WORKTYPESPromise;
  }}});
};
jxmgrsec.main.twatch.mode.module.config(jxmgrsec.main.twatch.mode.module.configuration).controller("ModeCtrl", jxmgrsec.main.twatch.mode.Ctrl).controller("ModifyModeWhitenameModalCtrl", jxmgrsec.modify_mode_whitename_modal.Ctrl).controller("AddModeWhitenameModalCtrl", jxmgrsec.add_mode_whitename_modal.Ctrl).controller("DeleteModeWhitenameModalCtrl", jxmgrsec.delete_mode_whitename_modal.Ctrl).controller("ModifyModeBlacknameModalCtrl", jxmgrsec.modify_mode_blackname_modal.Ctrl).controller("AddModeBlacknameModalCtrl", 
jxmgrsec.add_mode_blackname_modal.Ctrl).controller("DeleteModeBlacknameModalCtrl", jxmgrsec.delete_mode_blackname_modal.Ctrl).controller("ModifyModePieroidModalCtrl", jxmgrsec.modify_mode_pieroid_modal.Ctrl).controller("AddModePieroidModalCtrl", jxmgrsec.add_mode_pieroid_modal.Ctrl).controller("DeleteModePieroidModalCtrl", jxmgrsec.delete_mode_pieroid_modal.Ctrl);
goog.provide("jxmgrsec.modify_device_type_modal.Ctrl");
jxmgrsec.modify_device_type_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "constants", "entity", "db_operation"];
jxmgrsec.modify_device_type_modal.Ctrl = function($scope, $filter, $modalInstance, $q, constants, entity, $timeout, db_operation) {
  $scope.product_types = [];
  $scope.product_types_selected = {selected:undefined};
  console.log("device entity");
  console.log(entity);
  $scope.device_submit = {"device_name":$filter("mapDeviceType")(entity.device_type_id), "product_type_id":entity.product_type_id};
  activate();
  function activate() {
    var promises = [getProductTypes()];
    return $q.all(promises).then(function() {
    });
  }
  function getProductTypes() {
    return constants.getProductTypes().then(function(data) {
      $scope.product_types = data.product_types;
      return $scope.product_types;
    });
  }
  $scope.ok = function() {
    $scope.jsonData = {name:$scope.device_submit.device_name, product_type_id:$scope.device_submit.product_type_id};
    db_operation.putEditDeviceTypes(entity.device_type_id, $scope.jsonData).then(function(succ) {
      $scope.addAlert("success", "\u4fee\u6539\u6210\u529f");
    }, function(error) {
      console.log(error);
      $scope.addAlert("danger", "\u4fee\u6539\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxmgrsec.main.db_operation.device_type.module");
goog.require("jxmgrsec.main.db_operation.device_type.Ctrl");
goog.require("jxmgrsec.check_manufacturers_modal.Ctrl");
goog.require("jxmgrsec.add_device_type_modal.Ctrl");
goog.require("jxmgrsec.modify_device_type_modal.Ctrl");
jxmgrsec.main.db_operation.device_type.module = angular.module("main.db_operation.device_type", ["ui.router", "ngResource", "ui.select", "ngSanitize", "ui.bootstrap", "angularModalService"]);
jxmgrsec.main.db_operation.device_type.module.configuration = function($stateProvider) {
  $stateProvider.state("main.db_operation.device_type", {url:"/device_type", templateUrl:"states/main/db_operation/device_type/device_type.html", controller:"DeviceTypeCtrl as deviceType", resolve:{"DEVICETYPESPromise":function(constants) {
    return constants.DEVICETYPESPromise;
  }}});
};
jxmgrsec.main.db_operation.device_type.module.config(jxmgrsec.main.db_operation.device_type.module.configuration).controller("DeviceTypeCtrl", jxmgrsec.main.db_operation.device_type.Ctrl).controller("CheckManufacturersModalCtrl", jxmgrsec.check_manufacturers_modal.Ctrl).controller("AddDeviceTypeModalCtrl", jxmgrsec.add_device_type_modal.Ctrl).controller("ModifyDeviceTypeModalCtrl", jxmgrsec.modify_device_type_modal.Ctrl);
goog.provide("jxmgrsec.modify_doctor_modal.Ctrl");
jxmgrsec.modify_doctor_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "entity", "constants", "db_operation", "basic", "$timeout", "md5"];
jxmgrsec.modify_doctor_modal.Ctrl = function($scope, $filter, $modalInstance, $q, entity, constants, db_operation, basic, $timeout, md5) {
  $scope.doctorId = entity;
  $scope.genders = [];
  $scope.districts = [];
  $scope.departments = [];
  $scope.headUrl = "../../../../img/touxiang.png";
  $scope.headFile = undefined;
  $scope.physicianUrl = "../../../../img/touxiang.png";
  $scope.physicianFile = undefined;
  $scope.practicingUrl = "../../../../img/touxiang.png";
  $scope.practicingFile = undefined;
  $scope.birthday_date = undefined;
  $scope.signUpInf = {login_name:"", password:"", full_name:"", identification_number:"", gender:undefined, birthday:"", email:"", avatar_url:"", phone:"", department_id:undefined, district_id:undefined, profile:"", physician_certificate:"", practicing_certificate:""};
  $scope.new_password = "";
  $scope.confirm_password = "";
  $scope.getDoctorById = function() {
    db_operation.getDoctorDetail($scope.doctorId).then(function(res) {
      console.log(res);
      $scope.signUpInf = res;
      if (validParam($scope.signUpInf.birthday)) {
        $scope.birthday_date = new Date($scope.signUpInf.birthday);
      }
      if (validParam($scope.signUpInf.avatar_url)) {
        $scope.headUrl = $scope.signUpInf.avatar_url;
      }
      if (validParam($scope.signUpInf.physician_certificate)) {
        $scope.physicianUrl = $scope.signUpInf.physician_certificate;
      }
      if (validParam($scope.signUpInf.practicing_certificate)) {
        $scope.practicingUrl = $scope.signUpInf.practicing_certificate;
      }
    });
  };
  $scope.initArray = function() {
    $scope.genders = constants.gotGENDERS();
    $scope.districts = constants.gotDISTRICTS();
    $scope.departments = constants.gotDEPARTMENTS();
  };
  $scope.dt = new Date;
  $scope.open_form_birthday = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.birthday_opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.checkMobile = function(str) {
    var re = /^1\d{10}$/;
    if (re.test(str)) {
      return true;
    } else {
      return false;
    }
  };
  $scope.toDDMMMYYYY = function(date) {
    var d = new Date(date.getTime());
    var dd = d.getDate() < 10 ? "0" + d.getDate() : d.getDate().toString();
    var mmm = d.getMonth() < 10 ? "0" + d.getMonth() : d.getMonth().toString();
    var yyyy = d.getFullYear().toString();
    return yyyy + "-" + mmm + "-" + dd;
  };
  $scope.checkPassword = function() {
    if (validParam($scope.new_password)) {
      if (!validParam($scope.confirm_password)) {
        $scope.addAlert("danger", "\u8f93\u5165\u786e\u8ba4\u5bc6\u7801");
        return false;
      } else {
        if ($scope.confirm_password != $scope.new_password) {
          $scope.addAlert("danger", "\u5bc6\u7801\u4e0d\u4e00\u81f4");
          return false;
        } else {
          $scope.signUpInf.password = md5.createHash($scope.new_password);
          return true;
        }
      }
    } else {
      return true;
    }
  };
  $scope.uploadInfo = function() {
    $scope.uploadHeadImg();
  };
  $scope.uploadHeadImg = function() {
    if (validParam($scope.headFile)) {
      basic.fileUpload($scope.headFile).then(function(res) {
        console.log("\u4e0a\u4f20\u5934\u50cf");
        console.log(res);
        $scope.headUrl = res.success_message[0];
        $scope.signUpInf.avatar_url = res.success_message[0];
        $scope.uploadPhysImg();
      }, function(error) {
        console.log(error);
        $scope.addAlert("danger", "\u4e0a\u4f20\u5934\u50cf\u7570\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      });
    } else {
      $scope.uploadPhysImg();
    }
  };
  $scope.uploadPhysImg = function() {
    if (validParam($scope.physicianFile)) {
      basic.fileUpload($scope.physicianFile).then(function(res) {
        console.log("\u4e0a\u4f20\u8d44\u683c\u8bc1\u4e66");
        console.log(res);
        $scope.headUrl = res.success_message[0];
        $scope.signUpInf.physician_certificate = res.success_message[0];
        $scope.uploadPracImg();
      }, function(error) {
        console.log(error);
        $scope.addAlert("danger", "\u4e0a\u4f20\u8d44\u683c\u8bc1\u4e66\u7570\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      });
    } else {
      $scope.uploadPracImg();
    }
  };
  $scope.uploadPracImg = function() {
    if (validParam($scope.practicingFile)) {
      basic.fileUpload($scope.practicingFile).then(function(res) {
        console.log("\u4e0a\u4f20\u6267\u4e1a\u8bc1\u4e66");
        console.log(res);
        $scope.headUrl = res.success_message[0];
        $scope.signUpInf.practicing_certificate = res.success_message[0];
        $scope.modifyDoctor();
      }, function(error) {
        console.log(error);
        $scope.addAlert("danger", "\u4e0a\u4f20\u6267\u4e1a\u8bc1\u4e66\u7570\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      });
    } else {
      $scope.modifyDoctor();
    }
  };
  $scope.checkParam = function() {
    if (!validParam($scope.signUpInf.login_name)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u7528\u6237\u540d\uff01");
      return false;
    }
    if (!validParam($scope.signUpInf.full_name)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u533b\u751f\u59d3\u540d\uff01");
      return false;
    }
    if (!$scope.checkPassword()) {
      return false;
    }
    if (!validParam($scope.signUpInf.identification_number)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u5de5\u53f7\uff01");
      return false;
    }
    if (undefined == $scope.signUpInf.gender) {
      console.log($scope.signUpInf.gender);
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u6027\u522b\uff01");
      return false;
    }
    if (validParam($scope.birthday_date)) {
      $scope.signUpInf.birthday = $filter("date")($scope.birthday_date, "yyyy-MM-dd");
    } else {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u51fa\u751f\u65e5\u671f\uff01");
      return false;
    }
    if (!validParam($scope.signUpInf.email)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u90ae\u7bb1\uff01");
      return false;
    }
    if (!validParam($scope.signUpInf.phone) || !$scope.checkMobile($scope.signUpInf.phone)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u6b63\u786e\u7684\u8054\u7cfb\u7535\u8bdd\uff01");
      return false;
    }
    if (undefined == $scope.signUpInf.department_id) {
      $scope.addAlert("danger", "\u8bf7\u9009\u62e9\u79d1\u5ba4\uff01");
      return false;
    }
    if (undefined == $scope.signUpInf.district_id) {
      $scope.addAlert("danger", "\u8bf7\u9009\u62e9\u5730\u533a\uff01");
      return false;
    }
    if (!validParam($scope.signUpInf.physician_certificate) && !validParam($scope.physicianFile)) {
      $scope.addAlert("danger", "\u8bf7\u4e0a\u4f20\u8d44\u683c\u8bc1\u4e66");
      return false;
    }
    if (!validParam($scope.signUpInf.practicing_certificate) && !validParam($scope.practicingFile)) {
      $scope.addAlert("danger", "\u8bf7\u4e0a\u4f20\u6267\u4e1a\u8bc1\u4e66");
      return false;
    }
    if (!$scope.uploadHeadImg()) {
      return;
    }
    if (!$scope.uploadPhysImg()) {
      console.log("uploadPhysImg return");
      return false;
    }
    if (!$scope.uploadPracImg()) {
      return false;
    }
  };
  $scope.disabledBtn = false;
  $scope.modifyDoctor = function() {
    $scope.disabledBtn = true;
    db_operation.modifyDoctor($scope.doctorId, $scope.signUpInf).then(function(res) {
      console.log("\u4fee\u6539\u7528\u6237\u6210\u529f");
      $scope.addAlert("success", "\u4fee\u6539\u7528\u6237\u6210\u529f,3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
      $timeout(function() {
        $scope.cancel();
      }, 3E3);
    }, function(error) {
      $scope.disabledBtn = false;
      $scope.addAlert("danger", "\u4fee\u6539\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.signUp = function() {
    if ($scope.checkParam()) {
      $scope.uploadInfo();
    }
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  $scope.activate = function() {
    var promises = [$scope.initArray(), $scope.getDoctorById()];
    return $q.all(promises).then(function() {
    });
  };
  $scope.activate();
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
};
goog.provide("jxmgrsec.modify_manufactory_modal.Ctrl");
jxmgrsec.modify_manufactory_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "entity", "constants", "db_operation", "basic", "$timeout", "md5"];
jxmgrsec.modify_manufactory_modal.Ctrl = function($scope, $filter, $modalInstance, $q, entity, constants, db_operation, basic, $timeout, md5) {
  $scope.manuId = entity;
  $scope.company_departments = constants.gotCOMPANYDEPARTMENTS();
  $scope.device_types = constants.gotDEVICETYPES();
  $scope.company_members_list = constants.gotCOMPANYMEMBERS();
  $scope.company_industry_list = constants.gotCOMPANYINDUSTRIES();
  $scope.company_nature_list = constants.gotCOMPANYNATURES();
  $scope.province_list = constants.gotPROVINCES();
  $scope.city_list = constants.gotCITIES();
  $scope.county_list = constants.gotZONES();
  $scope.business_licencefile = undefined;
  $scope.internal_certificatefile = undefined;
  $scope.local_certificatefile = undefined;
  $scope.code_certificatefile = undefined;
  $scope.logo_file = undefined;
  $scope.manufactory = {login_name:undefined, full_name:undefined, contactor:undefined, password:undefined, department:undefined, telephone:undefined, phone:undefined, email:undefined, code:undefined, profile:undefined, province_id:undefined, city_id:undefined, zone_id:undefined, address:undefined, device_type_ids:undefined, members:undefined, industry:undefined, nature:undefined, business_licence:undefined, internal_certificate:undefined, local_certificate:undefined, code_certificate:undefined, 
  logo_url:undefined};
  $scope.new_password = "";
  $scope.confirm_password = "";
  $scope.changeProvince = function(province_id) {
    if (validParam($scope.city_list)) {
      $scope.city_select_list = [];
      $scope.manufactory.city_id = undefined;
      $scope.manufactory.zone_id = undefined;
      for (var i = 0;i < $scope.city_list.length;i++) {
        if ($scope.city_list[i].province_id == province_id) {
          $scope.city_select_list.push($scope.city_list[i]);
        }
      }
    }
  };
  $scope.changeCity = function(city_id) {
    if (validParam($scope.county_list)) {
      $scope.county_select_list = [];
      $scope.manufactory.zone_id = undefined;
      for (var i = 0;i < $scope.county_list.length;i++) {
        if ($scope.county_list[i].city_id == city_id) {
          $scope.county_select_list.push($scope.county_list[i]);
        }
      }
    }
  };
  $scope.getManuById = function() {
    return db_operation.getManuDetail($scope.manuId).then(function(res) {
      $scope.changeProvince(res.province_id);
      $scope.changeCity(res.city_id);
      $scope.manufactory = res;
    });
  };
  $scope.activate = function() {
    var promises = [$scope.getManuById()];
    return $q.all(promises).then(function() {
    });
  };
  $scope.activate();
  function checkMobile(str) {
    var re = /^1\d{10}$/;
    if (re.test(str)) {
      return true;
    } else {
      return false;
    }
  }
  function isTelephone(str) {
    var tel = /^0\d{2,3}-?\d{7,8}$/;
    if (tel.test(str)) {
      return true;
    }
    return false;
  }
  $scope.checkPassword = function() {
    if (validParam($scope.new_password)) {
      if (!validParam($scope.confirm_password)) {
        $scope.addAlert("danger", "\u8f93\u5165\u786e\u8ba4\u5bc6\u7801");
        return false;
      } else {
        if ($scope.confirm_password != $scope.new_password) {
          $scope.addAlert("danger", "\u5bc6\u7801\u4e0d\u4e00\u81f4");
          return false;
        } else {
          $scope.manufactory.password = md5.createHash($scope.new_password);
          return true;
        }
      }
    } else {
      return true;
    }
  };
  $scope.modifyManuInfo = function() {
    if ($scope.checkParam()) {
      uploadBusiness_licenceFile();
    }
  };
  var uploadBusiness_licenceFile = function() {
    if (validParam($scope.business_licencefile)) {
      return basic.fileUpload($scope.business_licencefile).then(function(res) {
        $scope.manufactory.business_licence = res.success_message[0];
        console.log("\u4e0a\u4f20\u5de5\u5546\u8425\u4e1a\u6267\u7167\u6210\u529f\uff01");
        uploadInternal_certificateFile();
      }, function(error) {
        console.log("\u4e0a\u4f20\u5de5\u5546\u8425\u4e1a\u6267\u7167\u5931\u8d25\uff01");
        console.log(error);
      });
    } else {
      uploadInternal_certificateFile();
    }
  };
  var uploadInternal_certificateFile = function() {
    if (validParam($scope.internal_certificatefile)) {
      return basic.fileUpload($scope.internal_certificatefile).then(function(res) {
        $scope.manufactory.internal_certificate = res.success_message[0];
        console.log("\u4e0a\u4f20\u7ec4\u7ec7\u673a\u6784\u4ee3\u7801\u8bc1\u6210\u529f\uff01");
        uploadLocal_certificateFile();
      }, function(error) {
        console.log("\u4e0a\u4f20\u7ec4\u7ec7\u673a\u6784\u4ee3\u7801\u8bc1\u5931\u8d25\uff01");
        console.log(error);
      });
    } else {
      uploadLocal_certificateFile();
    }
  };
  var uploadLocal_certificateFile = function() {
    if (validParam($scope.local_certificatefile)) {
      return basic.fileUpload($scope.local_certificatefile).then(function(res) {
        $scope.manufactory.local_certificate = res.success_message[0];
        console.log("\u4e0a\u4f20\u7a0e\u52a1\u767b\u8bb0\u8bc1-\u56fd\u7a0e\u6210\u529f\uff01");
        uploadCode_certificateFile();
      }, function(error) {
        console.log("\u4e0a\u4f20\u7a0e\u52a1\u767b\u8bb0\u8bc1-\u56fd\u7a0e\u5931\u8d25\uff01");
        console.log(error);
      });
    } else {
      uploadCode_certificateFile();
    }
  };
  var uploadCode_certificateFile = function() {
    if (validParam($scope.code_certificatefile)) {
      return basic.fileUpload($scope.code_certificatefile).then(function(res) {
        $scope.manufactory.code_certificate = res.success_message[0];
        console.log("\u4e0a\u4f20\u7a0e\u52a1\u767b\u8bb0\u8bc1-\u5730\u7a0e\u6210\u529f\uff01");
        uploadLogoFile();
      }, function(error) {
        console.log("\u4e0a\u4f20\u7a0e\u52a1\u767b\u8bb0\u8bc1-\u5730\u7a0e\u5931\u8d25\uff01");
        console.log(error);
      });
    } else {
      uploadLogoFile();
    }
  };
  var uploadLogoFile = function() {
    if (validParam($scope.logo_file)) {
      return basic.fileUpload($scope.logo_file).then(function(res) {
        $scope.manufactory.logo_url = res.success_message[0];
        console.log("\u4e0a\u4f20\u5382\u5546\u5546\u6807\u6210\u529f\uff01");
        $scope.modifyManu();
      }, function(error) {
        console.log("\u4e0a\u4f20\u5382\u5546\u5546\u6807\u5931\u8d25\uff01");
        console.log(error);
      });
    } else {
      $scope.modifyManu();
    }
  };
  $scope.checkParam = function() {
    if (!$scope.checkPassword()) {
      return false;
    }
    if (!validParam($scope.manufactory.contactor)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u8054\u7cfb\u4eba\u59d3\u540d\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.department)) {
      $scope.addAlert("danger", "\u8bf7\u9009\u62e9\u6240\u5728\u90e8\u95e8\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.telephone) || !isTelephone($scope.manufactory.telephone)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u6b63\u786e\u7684\u56fa\u5b9a\u7535\u8bdd\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.phone) || !checkMobile($scope.manufactory.phone)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u6b63\u786e\u7684\u624b\u673a\u53f7\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.email)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u8054\u7cfb\u4eba\u90ae\u7bb1\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.full_name)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u5382\u5546\u540d\u79f0\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.code)) {
      $scope.addAlert("danger", "\u5382\u5546\u7f16\u7801\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.profile)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u5382\u5546\u7b80\u4ecb\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.province_id)) {
      $scope.addAlert("danger", "\u8bf7\u9009\u62e9\u4e00\u7ea7\u884c\u653f\u533a\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.city_id)) {
      $scope.addAlert("danger", "\u8bf7\u9009\u62e9\u4e8c\u7ea7\u884c\u653f\u533a\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.zone_id)) {
      $scope.addAlert("danger", "\u8bf7\u9009\u62e9\u4e09\u7ea7\u884c\u653f\u533a\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.address)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u516c\u53f8\u5730\u5740\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.device_type_ids)) {
      $scope.addAlert("danger", "\u8bf7\u9009\u62e9\u8d1f\u8d23\u9500\u552e\u8bbe\u5907\u7c7b\u578b\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.members)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u4f01\u4e1a\u4eba\u6570\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.industry)) {
      $scope.addAlert("danger", "\u8bf7\u9009\u62e9\u516c\u53f8\u884c\u4e1a\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.nature)) {
      $scope.addAlert("danger", "\u8bf7\u9009\u62e9\u516c\u53f8\u6027\u8d28\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.members)) {
      $scope.addAlert("danger", "\u8bf7\u8f93\u5165\u4f01\u4e1a\u4eba\u6570\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.business_licence) && !validParam($scope.business_licencefile)) {
      $scope.addAlert("danger", "\u8bf7\u4e0a\u4f20\u5de5\u5546\u8425\u4e1a\u6267\u7167\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.internal_certificate) && !validParam($scope.internal_certificatefile)) {
      $scope.addAlert("danger", "\u8bf7\u4e0a\u4f20\u7ec4\u7ec7\u673a\u6784\u4ee3\u7801\u8bc1\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.local_certificate) && !validParam($scope.local_certificatefile)) {
      $scope.addAlert("danger", "\u8bf7\u4e0a\u4f20\u7a0e\u52a1\u767b\u8bb0\u8bc1-\u56fd\u7a0e\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.code_certificate) && !validParam($scope.code_certificatefile)) {
      $scope.addAlert("danger", "\u8bf7\u4e0a\u4f20\u7a0e\u52a1\u767b\u8bb0\u8bc1-\u5730\u7a0e\uff01");
      return false;
    }
    if (!validParam($scope.manufactory.logo_url) && !validParam($scope.logo_file)) {
      $scope.addAlert("danger", "\u8bf7\u4e0a\u4f20\u5382\u5546\u5546\u6807\uff01");
      return false;
    }
    return true;
  };
  $scope.disabledBtn = false;
  $scope.modifyManu = function() {
    $scope.disabledBtn = true;
    db_operation.modifyManu($scope.manuId, $scope.manufactory).then(function(res) {
      $scope.addAlert("success", "\u4fee\u6539\u5382\u5546\u4fe1\u606f\u6210\u529f\uff0c3\u79d2\u949f\u540e\u81ea\u52a8\u5173\u95ed\uff01");
      $timeout(function() {
        $scope.cancel();
      }, 3E3);
    }, function(error) {
      console.log(error);
      $scope.addAlert("danger", "\u4fee\u6539\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  function validParam(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  }
};
goog.provide("jxmgrsec.main.db_operation.manufactory.module");
goog.require("jxmgrsec.main.db_operation.manufactory.Ctrl");
goog.require("jxmgrsec.manufacturer_detail_modal.Ctrl");
goog.require("jxmgrsec.add_manufactory_modal.Ctrl");
goog.require("jxmgrsec.modify_manufactory_modal.Ctrl");
goog.require("jxmgrsec.delete_manufactory_modal.Ctrl");
jxmgrsec.main.db_operation.manufactory.module = angular.module("main.db_operation.manufactory", ["ui.router", "ngResource", "ui.select", "ngSanitize", "ui.bootstrap", "angularModalService"]);
jxmgrsec.main.db_operation.manufactory.module.configuration = function($stateProvider) {
  $stateProvider.state("main.db_operation.manufactory", {url:"/manufactory", templateUrl:"states/main/db_operation/manufactory/manufactory.html", controller:"ManufactoryCtrl as manufactory", resolve:{"DEVICETYPESPromise":function(constants) {
    return constants.DEVICETYPESPromise;
  }, "GENDERSPromise":function(constants) {
    return constants.GENDERSPromise;
  }, "DISTRICTSPromise":function(constants) {
    return constants.DISTRICTSPromise;
  }, "DEPARTMENTSPromise":function(constants) {
    return constants.DEPARTMENTSPromise;
  }, "MANUFACTORYSTATUSPromise":function(constants) {
    return constants.MANUFACTORYSTATUSPromise;
  }, "MANUFACTORIESPromise":function(constants) {
    return constants.MANUFACTORIESPromise;
  }, "COMPANYDEPARTMENTSPromise":function(constants) {
    return constants.COMPANYDEPARTMENTSPromise;
  }, "COMPANYMEMBERSPromise":function(constants) {
    return constants.COMPANYMEMBERSPromise;
  }, "COMPANYNATURESPromise":function(constants) {
    return constants.COMPANYNATURESPromise;
  }, "COMPANYINDUSTRIESPromise":function(constants) {
    return constants.COMPANYINDUSTRIESPromise;
  }, "PROVINCESPromise":function(constants) {
    return constants.PROVINCESPromise;
  }, "CITIESPromise":function(constants) {
    return constants.CITIESPromise;
  }, "ZONESPromise":function(constants) {
    return constants.ZONESPromise;
  }}});
};
jxmgrsec.main.db_operation.manufactory.module.config(jxmgrsec.main.db_operation.manufactory.module.configuration).controller("ManufactoryCtrl", jxmgrsec.main.db_operation.manufactory.Ctrl).controller("ManugfacturerDetailModal", jxmgrsec.manufacturer_detail_modal.Ctrl).controller("AddManufactoryModal", jxmgrsec.add_manufactory_modal.Ctrl).controller("ModifyManufactoryModal", jxmgrsec.modify_manufactory_modal.Ctrl).controller("DeleteManufactoryModal", jxmgrsec.delete_manufactory_modal.Ctrl);
goog.provide("jxmgrsec.modify_number_modal.Ctrl");
jxmgrsec.modify_number_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "constants", "entity", "twatch"];
jxmgrsec.modify_number_modal.Ctrl = function($scope, $filter, $modalInstance, $q, constants, entity, twatch) {
  $scope.qing_names = constants.gotQINGNAMES();
  $scope.currentNumber = {name:entity.name, number:entity.number};
  $scope.myPlaceholder = "\u9009\u62e9\u4eb2\u60c5\u53f7\u7801\u79f0\u547c";
  if ($scope.currentNumber.name == "SOS") {
    $scope.currentNumber.name = undefined;
    $scope.name_disabled = true;
    $scope.myPlaceholder = "SOS";
  }
  $scope.modifynumber = function() {
    if ($scope.currentNumber.name == undefined) {
      entity.number = $scope.currentNumber.number;
    } else {
      entity.name = $scope.currentNumber.name;
      entity.number = $scope.currentNumber.number;
    }
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxmgrsec.main.twatch.number.module");
goog.require("jxmgrsec.main.twatch.number.Ctrl");
goog.require("jxmgrsec.modify_number_modal.Ctrl");
jxmgrsec.main.twatch.number.module = angular.module("main.twatch.number", ["ui.router"]);
jxmgrsec.main.twatch.number.module.configuration = function($stateProvider) {
  $stateProvider.state("main.twatch.number", {url:"/number", templateUrl:"states/main/twatch/number/number.html", controller:"NumberCtrl as number", resolve:{"SOSNAMESPromise":function(constants) {
    return constants.SOSNAMESPromise;
  }, "QINGNAMESPromise":function(constants) {
    return constants.QINGNAMESPromise;
  }}});
};
jxmgrsec.main.twatch.number.module.config(jxmgrsec.main.twatch.number.module.configuration).controller("NumberCtrl", jxmgrsec.main.twatch.number.Ctrl).controller("ModifyNumberModalCtrl", jxmgrsec.modify_number_modal.Ctrl);
goog.provide("jxmgrsec.modify_product_type_modal.Ctrl");
jxmgrsec.modify_product_type_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "entity", "$q", "constants", "db_operation"];
jxmgrsec.modify_product_type_modal.Ctrl = function($scope, $filter, $modalInstance, entity, $q, constants, db_operation, $timeout) {
  $scope.device_types = constants.gotDEVICETYPES();
  console.log(constants.gotDEVICETYPES());
  console.log(entity);
  $scope.help = {device_types_selected:undefined};
  $scope.help.device_types_selected = [];
  $scope.productName = entity.product_type_name;
  $scope.disabledBtn = false;
  $scope.submit = function() {
    $scope.disabledBtn = true;
    $scope.jsonData = {name:$scope.productName, device_type_ids:$scope.help.device_types_selected};
    db_operation.putEditProductTypes(entity.product_type_id, $scope.jsonData).then(function(succ) {
      $scope.addAlert("success", "\u4fdd\u5b58\u6210\u529f,3\u79d2\u949f\u540e\u81ea\u52a8\u5173\u95ed\uff01");
      $timeout(function() {
        $scope.disabledBtn = false;
        $scope.cancel();
      }, 3E3);
    }, function(error) {
      $scope.disabledBtn = false;
      $scope.addAlert("danger", "\u4fdd\u5b58\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxmgrsec.modify_route_period_modal.Ctrl");
jxmgrsec.modify_route_period_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "constants", "twatch", "entity", "imei", "$timeout"];
jxmgrsec.modify_route_period_modal.Ctrl = function($scope, $timeout, $filter, $modalInstance, $q, constants, twatch, entity, imei) {
  console.log(entity);
  $scope.time = {imei:imei, set_en:entity.set_en, start:entity.start, stop:entity.stop, weeks:constants.weekDayHelperInt2Array(entity.weeks), route_period_id:entity.route_period_id};
  $scope.weeks = constants.gotWEEKDAYS();
  $scope.addPeriod = function() {
    $scope.time.weeks = constants.weekDayHelperArray2Int($scope.time.weeks);
    twatch.putRoutePeriod($scope.time).then(function(succ) {
      $scope.addAlert("success", "\u4fee\u6539\u6210\u529f");
    }, function(error) {
      console.log(error);
      $scope.addAlert("danger", "\u4fee\u6539\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
    console.log($scope.time);
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxmgrsec.main.twatch.route_setting.module");
goog.require("jxmgrsec.main.twatch.route_setting.Ctrl");
goog.require("jxmgrsec.add_route_period_modal.Ctrl");
goog.require("jxmgrsec.modify_route_period_modal.Ctrl");
jxmgrsec.main.twatch.route_setting.module = angular.module("main.twatch.route_setting", ["ui.router", "ngResource", "ui.select", "ngSanitize", "ui.bootstrap", "angularModalService"]);
jxmgrsec.main.twatch.route_setting.module.configuration = function($stateProvider) {
  $stateProvider.state("main.twatch.route_setting", {url:"/route_setting", templateUrl:"states/main/twatch/route_setting/route_setting.html", controller:"RouteSettingCtrl as routeSetting", resolve:{"GPSMODESPromise":function(constants) {
    return constants.GPSMODESPromise;
  }, "ROUTESTATESPromise":function(constants) {
    return constants.ROUTESTATESPromise;
  }}});
};
jxmgrsec.main.twatch.route_setting.module.config(jxmgrsec.main.twatch.route_setting.module.configuration).controller("RouteSettingCtrl", jxmgrsec.main.twatch.route_setting.Ctrl).controller("AddRoutePeriodModal", jxmgrsec.add_route_period_modal.Ctrl).controller("ModifyRoutePeriodModal", jxmgrsec.modify_route_period_modal.Ctrl);
goog.provide("jxmgrsec.modify_user_modal.modify_user_modal.Ctrl");
jxmgrsec.modify_user_modal.modify_user_modal.Ctrl.$inject = ["$scope", "$modalInstance", "$q", "entity", "constants", "db_operation", "basic", "$timeout", "md5", "$filter"];
jxmgrsec.modify_user_modal.modify_user_modal.Ctrl = function($scope, $filter, $modalInstance, $q, entity, constants, db_operation, basic, $timeout, md5) {
  var ctrl = this;
  $scope.userId = entity;
  $scope.imgUrl = "../../../../img/touxiang.png";
  $scope.userInfo = {nick_name:undefined, full_name:undefined, password:undefined, phone:undefined, status:undefined, email:undefined, avatar_url:undefined, gender:undefined, birthday:undefined, height:undefined, weight:undefined, target_weight:undefined, address:undefined, qq:undefined, operation_type:undefined, delta_points:undefined, reason:undefined};
  $scope.uploadFile = undefined;
  $scope.genders = [];
  $scope.operationTypes = [{"id":1, "name":"\u589e\u52a0"}, {"id":2, "name":"\u51cf\u5c11"}];
  $scope.birthday_date = new Date;
  $scope.chPassword = {confirm_password:undefined, new_password:undefined};
  $scope.ChenPosNum = function(num) {
    var reg = /^\d+(?=\.{0,1}\d+$|$)/;
    if (reg.test(num)) {
      return true;
    }
    return false;
  };
  $scope.checkMobile = function(str) {
    var re = /^1\d{10}$/;
    if (re.test(str)) {
      return true;
    } else {
      return false;
    }
  };
  $scope.checkEmail = function(str) {
    var re = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(.[a-zA-Z0-9_-])+/;
    if (re.test(str)) {
      return true;
    } else {
      return false;
    }
  };
  $scope.checkNumData = function(data) {
    if (data == undefined || data == "") {
      return true;
    } else {
      if ($scope.ChenPosNum(data)) {
        return true;
      } else {
        return false;
      }
    }
  };
  $scope.checkMobileData = function(data) {
    if (data == undefined || data == "") {
      return true;
    } else {
      if ($scope.checkMobile(data)) {
        return true;
      } else {
        return false;
      }
    }
  };
  $scope.checkEmailData = function(data) {
    if (data == undefined || data == "") {
      return true;
    } else {
      if ($scope.checkEmail(data)) {
        return true;
      } else {
        return false;
      }
    }
  };
  $scope.checkPassword = function() {
    if (validParam($scope.chPassword.new_password)) {
      if (!validParam($scope.chPassword.confirm_password)) {
        $scope.addAlert("danger", "\u8f93\u5165\u786e\u8ba4\u5bc6\u7801");
        return false;
      } else {
        if ($scope.chPassword.confirm_password != $scope.chPassword.new_password) {
          $scope.addAlert("danger", "\u5bc6\u7801\u4e0d\u4e00\u81f4");
          return false;
        } else {
          $scope.userInfo.password = md5.createHash($scope.chPassword.new_password);
          return true;
        }
      }
    } else {
      return true;
    }
  };
  $scope.putUserModel = function() {
    console.log("submit");
    $scope.userInfo.birthday = $filter("date")($scope.birthday_date, "yyyy-MM-dd");
    if (validParam($scope.uploadFile)) {
      console.log("fileUpload");
      basic.fileUpload($scope.uploadFile).then(function(res) {
        console.log(res);
        $scope.imgUrl = res.success_message[0];
        $scope.userInfo.avatar_url = res.success_message[0];
        upload();
      }, function(error) {
        console.log(error);
        $scope.addAlert("danger", "\u4e0a\u4f20\u5934\u50cf\u7570\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      });
    } else {
      upload();
    }
  };
  $scope.disableBtn = false;
  var upload = function() {
    $scope.disableBtn = true;
    if (!validParam($scope.userInfo.gender)) {
      $scope.addAlert("danger", "\u6027\u522b\u5fc5\u586b\uff01");
      $scope.disableBtn = false;
      return;
    }
    if (!validParam($scope.userInfo.email)) {
      $scope.addAlert("danger", "\u90ae\u7bb1\u5fc5\u586b\uff01");
      $scope.disableBtn = false;
      return;
    }
    if (!validParam($scope.userInfo.address)) {
      $scope.addAlert("danger", "\u5730\u5740\u5fc5\u586b\uff01");
      $scope.disableBtn = false;
      return;
    }
    if (!$scope.checkPassword()) {
      $scope.disableBtn = false;
      return;
    }
    if (!$scope.checkEmailData($scope.userInfo.email)) {
      $scope.addAlert("danger", "\u8f93\u5165\u6b63\u786e\u90ae\u7bb1");
      $scope.disableBtn = false;
      return;
    }
    if (!$scope.checkNumData($scope.userInfo.height)) {
      $scope.addAlert("danger", "\u8f93\u5165\u6b63\u786e\u8eab\u9ad8");
      $scope.disableBtn = false;
      return;
    }
    if (!$scope.checkNumData($scope.userInfo.weight)) {
      $scope.addAlert("danger", "\u8f93\u5165\u6b63\u786e\u4f53\u91cd");
      $scope.disableBtn = false;
      return;
    }
    if (!$scope.checkNumData($scope.userInfo.target_weight)) {
      $scope.addAlert("danger", "\u8f93\u5165\u6b63\u786e\u76ee\u6807\u4f53\u91cd");
      $scope.disableBtn = false;
      return;
    }
    if (!$scope.checkNumData($scope.userInfo.delta_points)) {
      $scope.addAlert("danger", "\u8f93\u5165\u6b63\u786e\u53d8\u66f4\u5206\u503c");
      $scope.disableBtn = false;
      return;
    }
    if (!isNaN($scope.userInfo.weight)) {
      $scope.userInfo.weight = $scope.userInfo.weight * 10;
    }
    if (!isNaN($scope.userInfo.target_weight)) {
      $scope.userInfo.target_weight = $scope.userInfo.target_weight * 10;
    }
    db_operation.putUser($scope.userId, $scope.userInfo).then(function(res) {
      $scope.addAlert("success", "\u4fee\u6539\u7528\u6237\u4fe1\u606f\u6210\u529f\uff0c3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
      $timeout(function() {
        $scope.disableBtn = true;
        $scope.cancel();
      }, 3E3);
    }, function(error) {
      console.log(error);
    });
  };
  $scope.cancel = function() {
    console.log("cancel");
    $modalInstance.dismiss("cancel");
  };
  $scope.clear = function() {
    console.log("666666666666");
    $scope.userInfo = undefined;
    $scope.chPassword = {confirm_password:undefined, new_password:undefined};
  };
  $scope.dt = new Date;
  $scope.open_form_birthday = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.birthday_opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.getGenders = function() {
    return constants.getGenders().then(function(data) {
      console.log(data);
      $scope.genders = data.genders;
      return $scope.genders;
    });
  };
  $scope.getUsersById = function() {
    db_operation.getUserDetail($scope.userId).then(function(res) {
      console.log(res);
      $scope.userInfo = res;
      if (validParam($scope.userInfo.birthday)) {
        $scope.birthday_date = new Date($scope.userInfo.birthday);
      }
      if (!isNaN($scope.userInfo.weight)) {
        $scope.userInfo.weight = $scope.userInfo.weight / 10;
      }
      if (!isNaN($scope.userInfo.target_weight)) {
        $scope.userInfo.target_weight = $scope.userInfo.target_weight / 10;
      }
      if ($scope.userInfo.avatar_url == undefined || $scope.userInfo.avatar_url == "") {
      } else {
        $scope.imgUrl = $scope.userInfo.avatar_url;
      }
    });
  };
  $scope.activate = function() {
    var promises = [$scope.getGenders(), $scope.getUsersById()];
    return $q.all(promises).then(function() {
    });
  };
  $scope.activate();
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
};
goog.provide("jxmgrsec.pen_point_modal.Ctrl");
jxmgrsec.pen_point_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "constants", "entity"];
jxmgrsec.pen_point_modal.Ctrl = function($scope, $filter, $modalInstance, $q, constants, entity) {
  $scope.entity = entity;
  console.log($scope.entity);
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxmgrsec.main.twatch.pen.module");
goog.require("jxmgrsec.main.twatch.pen.Ctrl");
goog.require("jxmgrsec.pen_point_modal.Ctrl");
jxmgrsec.main.twatch.pen.module = angular.module("main.twatch.pen", ["ui.router", "oc.lazyLoad"]);
jxmgrsec.main.twatch.pen.module.configuration = function($stateProvider) {
  $stateProvider.state("main.twatch.pen", {url:"/pen", templateUrl:"states/main/twatch/pen/pen.html", controller:"PenCtrl as pen"});
};
jxmgrsec.main.twatch.pen.module.config(jxmgrsec.main.twatch.pen.module.configuration).controller("PenCtrl", jxmgrsec.main.twatch.pen.Ctrl).controller("PenPointModalCtrl", jxmgrsec.pen_point_modal.Ctrl);
goog.provide("jxmgrsec.check_devices_modal.Ctrl");
jxmgrsec.check_devices_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "entity", "$q", "constants", "db_operation"];
jxmgrsec.check_devices_modal.Ctrl = function($scope, $filter, $modalInstance, entity, $q, constants, db_operation) {
  $scope.entity = entity;
  $scope.device_types = [];
  $scope.deviceTypes_selects = constants.gotDEVICETYPES();
  activate();
  function activate() {
    var promises = [getDeviceTypes($scope.entity.product_type_id)];
    return $q.all(promises).then(function() {
    });
  }
  function getDeviceTypes(product_id) {
    return db_operation.getDBProductTypeDetails(product_id).then(function(data) {
      $scope.device_types = data.device_type_ids;
      return $scope.device_types;
    });
  }
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxmgrsec.main.db_operation.product_type.module");
goog.require("jxmgrsec.main.db_operation.product_type.Ctrl");
goog.require("jxmgrsec.check_devices_modal.Ctrl");
goog.require("jxmgrsec.add_product_type_modal.Ctrl");
goog.require("jxmgrsec.modify_product_type_modal.Ctrl");
jxmgrsec.main.db_operation.product_type.module = angular.module("main.db_operation.product_type", ["ui.router", "ngResource", "ui.select", "ngSanitize", "ui.bootstrap", "angularModalService"]);
jxmgrsec.main.db_operation.product_type.module.configuration = function($stateProvider) {
  $stateProvider.state("main.db_operation.product_type", {url:"/product_type", templateUrl:"states/main/db_operation/product_type/product_type.html", controller:"ProductTypeCtrl as productType", resolve:{"PRODUCTTYPESPromise":function(constants) {
    return constants.PRODUCTTYPESPromise;
  }}});
};
jxmgrsec.main.db_operation.product_type.module.config(jxmgrsec.main.db_operation.product_type.module.configuration).controller("ProductTypeCtrl", jxmgrsec.main.db_operation.product_type.Ctrl).controller("CheckDevicesModalCtrl", jxmgrsec.check_devices_modal.Ctrl).controller("AddProductTypeModalCtrl", jxmgrsec.add_product_type_modal.Ctrl).controller("ModifyProductTypeModalCtrl", jxmgrsec.modify_product_type_modal.Ctrl);
goog.provide("jxmgrsec.show_cs_template_modal.show_cs_template_modal.Ctrl");
jxmgrsec.show_cs_template_modal.show_cs_template_modal.Ctrl.$inject = ["$scope", "$modalInstance", "entity"];
jxmgrsec.show_cs_template_modal.show_cs_template_modal.Ctrl = function($scope, $modalInstance, entity) {
  this.label = "some label from custom modal controller";
};
goog.provide("jxmgrsec.main.page.category_system_template.module");
goog.require("jxmgrsec.main.page.category_system_template.Ctrl");
goog.require("jxmgrsec.show_cs_template_modal.show_cs_template_modal.Ctrl");
goog.require("jxmgrsec.add_template_modal.Ctrl");
jxmgrsec.main.page.category_system_template.module = angular.module("main.page.category_system_template", ["ui.router", "ui.grid", "ui.grid.pinning", "ui.grid.resizeColumns", "ui.grid.saveState", "ui.grid.edit", "ui.grid.pagination", "ui.select", "ui.bootstrap", "ngSanitize", "angularModalService"]);
jxmgrsec.main.page.category_system_template.module.configuration = function($stateProvider) {
  $stateProvider.state("main.page.category_system_template", {url:"/category_system_template", templateUrl:"states/main/page/category_system_template/category_system_template.html", controller:"CategorySystemTemplateCtrl as categorySystemTemplate"});
};
jxmgrsec.main.page.category_system_template.module.config(jxmgrsec.main.page.category_system_template.module.configuration).controller("CategorySystemTemplateCtrl", jxmgrsec.main.page.category_system_template.Ctrl).controller("ShowCSTemplateModalCtrl", jxmgrsec.show_cs_template_modal.show_cs_template_modal.Ctrl).controller("AddTemplateModalCtrl", jxmgrsec.add_template_modal.Ctrl);
goog.provide("jxmgrsec.main.page.module");
goog.require("jxmgrsec.main.page.category_system_template.module");
goog.require("jxmgrsec.main.page.exhibition.module");
goog.require("jxmgrsec.main.page.news.module");
goog.require("jxmgrsec.main.page.Ctrl");
jxmgrsec.main.page.module = angular.module("main.page", ["ui.router", "ui.grid", "ui.grid.pinning", "ui.grid.resizeColumns", "ui.grid.saveState", "ui.grid.edit", "ui.grid.pagination", jxmgrsec.main.page.category_system_template.module.name, jxmgrsec.main.page.exhibition.module.name, jxmgrsec.main.page.news.module.name]);
jxmgrsec.main.page.module.configuration = function($stateProvider) {
  $stateProvider.state("main.page", {url:"/page", templateUrl:"states/main/page/page.html", controller:"PageCtrl as page"});
};
jxmgrsec.main.page.module.config(jxmgrsec.main.page.module.configuration).controller("PageCtrl", jxmgrsec.main.page.Ctrl);
goog.provide("jxmgrsec.show_doctor_modal.Ctrl");
jxmgrsec.show_doctor_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "entity", "constants", "db_operation", "basic", "$timeout", "md5"];
jxmgrsec.show_doctor_modal.Ctrl = function($scope, $filter, $modalInstance, $q, entity, constants, db_operation, basic, $timeout, md5) {
  $scope.doctorId = entity;
  $scope.genders = [];
  $scope.districts = [];
  $scope.departments = [];
  $scope.headUrl = "../../../../img/touxiang.png";
  $scope.physicianUrl = "../../../../img/touxiang.png";
  $scope.practicingUrl = "../../../../img/touxiang.png";
  $scope.birthday_date = undefined;
  $scope.signUpInf = {login_name:"", password:"", full_name:"", identification_number:"", gender:undefined, birthday:"", email:"", avatar_url:"", phone:"", department_id:undefined, district_id:undefined, profile:"", physician_certificate:"", practicing_certificate:""};
  $scope.new_password = "";
  $scope.confirm_password = "";
  $scope.getDoctorById = function() {
    db_operation.getDoctorDetail($scope.doctorId).then(function(res) {
      $scope.signUpInf = res;
      if (validParam($scope.signUpInf.birthday)) {
        $scope.birthday_date = new Date($scope.signUpInf.birthday);
      }
      if (validParam($scope.signUpInf.avatar_url)) {
        $scope.headUrl = $scope.signUpInf.avatar_url;
      }
      if (validParam($scope.signUpInf.physician_certificate)) {
        $scope.physicianUrl = $scope.signUpInf.physician_certificate;
      }
      if (validParam($scope.signUpInf.practicing_certificate)) {
        $scope.practicingUrl = $scope.signUpInf.practicing_certificate;
      }
    });
  };
  $scope.initArray = function() {
    $scope.genders = constants.gotGENDERS();
    $scope.districts = constants.gotDISTRICTS();
    $scope.departments = constants.gotDEPARTMENTS();
  };
  $scope.dt = new Date;
  $scope.open_form_birthday = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.birthday_opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  $scope.activate = function() {
    var promises = [$scope.initArray(), $scope.getDoctorById()];
    return $q.all(promises).then(function() {
    });
  };
  $scope.activate();
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
};
goog.provide("jxmgrsec.main.db_operation.doctor.module");
goog.require("jxmgrsec.main.db_operation.doctor.Ctrl");
goog.require("jxmgrsec.add_doctor_modal.Ctrl");
goog.require("jxmgrsec.modify_doctor_modal.Ctrl");
goog.require("jxmgrsec.show_doctor_modal.Ctrl");
goog.require("jxmgrsec.delete_doctor_modal.Ctrl");
jxmgrsec.main.db_operation.doctor.module = angular.module("main.db_operation.doctor", ["ui.router", "ngResource", "ui.select", "ngSanitize", "ui.bootstrap", "angularModalService"]);
jxmgrsec.main.db_operation.doctor.module.configuration = function($stateProvider) {
  $stateProvider.state("main.db_operation.doctor", {url:"/doctor", templateUrl:"states/main/db_operation/doctor/doctor.html", controller:"DoctorCtrl as doctor", resolve:{"DEVICETYPESPromise":function(constants) {
    return constants.DEVICETYPESPromise;
  }, "USERSTATUSPromise":function(constants) {
    return constants.USERSTATUSPromise;
  }, "GENDERSPromise":function(constants) {
    return constants.GENDERSPromise;
  }, "DISTRICTSPromise":function(constants) {
    return constants.DISTRICTSPromise;
  }, "DEPARTMENTSPromise":function(constants) {
    return constants.DEPARTMENTSPromise;
  }, "DOCTORSTATUSPromise":function(constants) {
    return constants.DOCTORSTATUSPromise;
  }}});
};
jxmgrsec.main.db_operation.doctor.module.config(jxmgrsec.main.db_operation.doctor.module.configuration).controller("DoctorCtrl", jxmgrsec.main.db_operation.doctor.Ctrl).controller("AddDoctorModalCtrl", jxmgrsec.add_doctor_modal.Ctrl).controller("ModifyDoctorModalCtrl", jxmgrsec.modify_doctor_modal.Ctrl).controller("ShowDoctorModalCtrl", jxmgrsec.show_doctor_modal.Ctrl).controller("DeleteDoctorModalCtrl", jxmgrsec.delete_doctor_modal.Ctrl);
goog.provide("jxmgrsec.show_push_message_modal.show_push_message_modal.Ctrl");
jxmgrsec.show_push_message_modal.show_push_message_modal.Ctrl.$inject = ["$scope", "$modalInstance", "$timeout", "entity", "$filter", "push_message"];
jxmgrsec.show_push_message_modal.show_push_message_modal.Ctrl = function($scope, $filter, $modalInstance, $timeout, entity, push_message) {
  var ctrl = this;
  console.log(entity);
  $scope.pushMSG = {manufactory_id:entity.manufactory_id, terminal_catagory_id:entity.terminal_catagory_id, content:undefined};
  $scope.disableBtn = false;
  $scope.pushMessages = function() {
    $scope.disableBtn = true;
    push_message.pushMessage($scope.pushMSG).then(function(res) {
      $scope.addAlert("success", "\u63a8\u9001\u6210\u529f,\u4e09\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
      $timeout(function() {
        $scope.cancel();
      }, 3E3);
    }, function(error) {
      $scope.addAlert("danger", "\u63a8\u9001\u5931\u8d25,\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      $scope.disableBtn = false;
    });
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxmgrsec.main.push_message.module");
goog.require("jxmgrsec.main.push_message.Ctrl");
goog.require("jxmgrsec.show_push_message_modal.show_push_message_modal.Ctrl");
jxmgrsec.main.push_message.module = angular.module("main.push_message", ["ui.router", "ui.grid", "ui.grid.pinning", "ui.grid.resizeColumns", "ui.grid.saveState", "ui.grid.edit", "ui.grid.pagination", "ui.select", "ui.bootstrap", "ngSanitize"]);
jxmgrsec.main.push_message.module.configuration = function($stateProvider) {
  $stateProvider.state("main.push_message", {url:"/push_message", templateUrl:"states/main/push_message/push_message.html", controller:"PushMessageCtrl as pushMessage", resolve:{"DEVICETYPESPromise":function(constants) {
    return constants.DEVICETYPESPromise;
  }}});
};
jxmgrsec.main.push_message.module.config(jxmgrsec.main.push_message.module.configuration).controller("PushMessageCtrl", jxmgrsec.main.push_message.Ctrl).controller("ShowPushMessageModalCtrl", jxmgrsec.show_push_message_modal.show_push_message_modal.Ctrl);
goog.provide("jxmgrsec.show_touch_button_modal.show_touch_button_modal.Ctrl");
jxmgrsec.show_touch_button_modal.show_touch_button_modal.Ctrl.$inject = ["$scope", "$modalInstance", "entity", "$filter", "home_security"];
jxmgrsec.show_touch_button_modal.show_touch_button_modal.Ctrl = function($scope, $filter, $modalInstance, entity, home_security) {
  this.label = "some label from custom modal controller";
  var ctrl = this;
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"touch_button_event_id", name:"\u89e6\u6478\u6309\u94ae\u4e8b\u4ef6\u7f16\u53f7", width:"20%", pinnedLeft:true}, {field:"uid", name:"UID", width:"20%"}, {field:"happened_at", name:"\u53d1\u751f\u65f6\u95f4", width:"30%", cellFilter:"unixTodate"}, {field:"sensor_id", name:"\u4f20\u611f\u5668\u7f16\u7801", width:"20%"}, {field:"sensor_type", name:"\u4f20\u611f\u5668\u7c7b\u578b", 
  width:"20%"}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.touchEvent.current_page = newPage - 1;
      $scope.touchEvent.page_size = pageSize;
      $scope.getButtonEvent();
    });
  }};
  $scope.query_date = {activated_from:new Date("2014-01-01"), activated_to:new Date};
  $scope.query_date.activated_to.setHours(23);
  $scope.query_date.activated_to.setMinutes(59);
  $scope.query_date.activated_to.setSeconds(59);
  var query_date = -1;
  $scope.touchEvent = {activated_from:$filter("dateTounix")($filter("date")($scope.query_date.activated_from, "yyyy-M-dd H:mm:ss")), activated_to:$filter("dateTounix")($filter("date")($scope.query_date.activated_to, "yyyy-M-dd H:mm:ss")), page_size:10, current_page:0, query_date:query_date};
  $scope.getButtonEvent = function() {
    $scope.touchEvent.activated_from = $filter("dateTounix")($filter("date")($scope.query_date.activated_from, "yyyy-M-dd H:mm:ss"));
    $scope.touchEvent.activated_to = $filter("dateTounix")($filter("date")($scope.query_date.activated_to, "yyyy-M-dd H:mm:ss"));
    return home_security.getButtonEvent(entity.touch_button_id, $scope.touchEvent).then(function(res) {
      $scope.gridOptions.data = res.events;
      $scope.gridOptions.totalItems = res.total_count;
      $scope.touchEvent.query_date = res.query_date;
    }, function(error) {
      console.log(error);
    });
  };
  $scope.getButtonEvent();
  $scope.dt = new Date;
  $scope.open_form_1 = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.form1_opened = true;
  };
  $scope.open_form_2 = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.form2_opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxmgrsec.main.home_security.button.module");
goog.require("jxmgrsec.main.home_security.button.Ctrl");
goog.require("jxmgrsec.show_touch_button_modal.show_touch_button_modal.Ctrl");
jxmgrsec.main.home_security.button.module = angular.module("main.home_security.button", ["ui.router", "ui.grid", "ui.grid.pinning", "ui.grid.resizeColumns", "ui.grid.saveState", "ui.grid.edit", "ui.grid.pagination", "ui.select", "ui.bootstrap", "ngSanitize", "angularModalService"]);
jxmgrsec.main.home_security.button.module.configuration = function($stateProvider) {
  $stateProvider.state("main.home_security.button", {url:"/button", templateUrl:"states/main/home_security/button/button.html", controller:"ButtonCtrl as button"});
};
jxmgrsec.main.home_security.button.module.config(jxmgrsec.main.home_security.button.module.configuration).controller("ButtonCtrl", jxmgrsec.main.home_security.button.Ctrl).controller("ShowTouchButtonModalCtrl", jxmgrsec.show_touch_button_modal.show_touch_button_modal.Ctrl);
goog.provide("jxmgrsec.main.home_security.module");
goog.require("jxmgrsec.main.home_security.camera.module");
goog.require("jxmgrsec.main.home_security.button.module");
goog.require("jxmgrsec.main.home_security.Ctrl");
jxmgrsec.main.home_security.module = angular.module("main.home_security", ["ui.router", jxmgrsec.main.home_security.camera.module.name, jxmgrsec.main.home_security.button.module.name]);
jxmgrsec.main.home_security.module.configuration = function($stateProvider) {
  $stateProvider.state("main.home_security", {url:"/home_security", templateUrl:"states/main/home_security/home_security.html", controller:"HomeSecurityCtrl as homeSecurity"});
};
jxmgrsec.main.home_security.module.config(jxmgrsec.main.home_security.module.configuration).controller("HomeSecurityCtrl", jxmgrsec.main.home_security.Ctrl);
goog.provide("jxmgrsec.show_user_modal.show_user_modal.Ctrl");
jxmgrsec.show_user_modal.show_user_modal.Ctrl.$inject = ["$scope", "$modalInstance", "$q", "entity", "constants", "db_operation", "basic"];
jxmgrsec.show_user_modal.show_user_modal.Ctrl = function($scope, $modalInstance, $q, entity, constants, db_operation, basic) {
  var ctrl = this;
  $scope.userId = entity;
  $scope.imgUrl = "../../../../img/touxiang.png";
  $scope.userInfo = {nick_name:undefined, full_name:undefined, password:undefined, phone:undefined, device_type_ids:undefined, status:undefined, email:undefined, avatar_url:"../../../img/touxiang.png", gender:undefined, birthday:undefined, height:undefined, weight:undefined, target_weight:undefined, address:undefined, qq:undefined, points:undefined};
  $scope.uploadFile = undefined;
  $scope.genders = [];
  $scope.birthday_date = new Date("2014-01-01");
  $scope.chPassword = {confirm_password:undefined, new_password:undefined};
  $scope.checkPassword = function() {
    if (validParam($scope.chPassword.new_password)) {
      if (!validParam($scope.chPassword.confirm_password)) {
        $scope.addAlert("danger", "\u8f93\u5165\u786e\u8ba4\u5bc6\u7801");
        return false;
      } else {
        if ($scope.chPassword.confirm_password != $scope.chPassword.new_password) {
          $scope.addAlert("danger", "\u5bc6\u7801\u4e0d\u4e00\u81f4");
          return false;
        } else {
          return true;
        }
      }
    } else {
      return true;
    }
  };
  $scope.toDDMMMYYYY = function(date) {
    var d = new Date(date.getTime());
    var dd = d.getDate() < 10 ? "0" + d.getDate() : d.getDate().toString();
    var mmm = d.getMonth() < 10 ? "0" + d.getMonth() : d.getMonth().toString();
    var yyyy = d.getFullYear().toString();
    return yyyy + "-" + mmm + "-" + dd;
  };
  $scope.putUserModel = function() {
    console.log("submit");
    $scope.userInfo.birthday = $scope.toDDMMMYYYY($scope.birthday_date);
    if (validParam($scope.uploadFile)) {
      console.log("fileUpload");
      basic.fileUpload($scope.uploadFile).then(function(res) {
        console.log(res);
        $scope.userInfo.avatar_url = res.success_message[0];
        upload();
      }, function(error) {
        console.log(error);
        $scope.addAlert("danger", "\u4e0a\u4f20\u5934\u50cf\u7570\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      });
    } else {
      upload();
    }
  };
  var upload = function() {
    if ($scope.checkPassword()) {
      db_operation.putUser($scope.userId, $scope.userInfo).then(function(res) {
        console.log(res);
        $scope.cancel();
      }, function(error) {
        console.log(error);
      });
    }
  };
  $scope.cancel = function() {
    console.log("cancel");
    $modalInstance.dismiss("cancel");
  };
  $scope.clear = function() {
    console.log("666666666666");
    $scope.userInfo = undefined;
  };
  $scope.dt = new Date;
  $scope.open_form_birthday = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.birthday_opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.getGenders = function() {
    return constants.getGenders().then(function(data) {
      console.log(data);
      $scope.genders = data.genders;
      return $scope.genders;
    });
  };
  $scope.getUsersByName = function() {
    console.log($scope.userSearchNameData);
    db_operation.getUserDetail($scope.userId).then(function(res) {
      console.log(res);
      $scope.userInfo = res;
      if (!isNaN($scope.userInfo.weight)) {
        $scope.userInfo.weight = $scope.userInfo.weight / 10;
      }
      if (!isNaN($scope.userInfo.target_weight)) {
        $scope.userInfo.target_weight = $scope.userInfo.target_weight / 10;
      }
      if (validParam($scope.userInfo.birthday)) {
        $scope.birthday_date = new Date($scope.userInfo.birthday);
      }
      if ($scope.userInfo.avatar_url == undefined || $scope.userInfo.avatar_url == "") {
      } else {
        $scope.imgUrl = $scope.userInfo.avatar_url;
      }
    });
  };
  $scope.activate = function() {
    var promises = [$scope.getGenders(), $scope.getUsersByName()];
    return $q.all(promises).then(function() {
    });
  };
  $scope.activate();
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
};
goog.provide("jxmgrsec.main.db_operation.user.module");
goog.require("jxmgrsec.main.db_operation.user.Ctrl");
goog.require("jxmgrsec.show_user_modal.show_user_modal.Ctrl");
goog.require("jxmgrsec.modify_user_modal.modify_user_modal.Ctrl");
jxmgrsec.main.db_operation.user.module = angular.module("main.db_operation.user", ["ui.router", "ngResource", "ui.select", "ngSanitize", "ui.bootstrap", "angularModalService"]);
jxmgrsec.main.db_operation.user.module.configuration = function($stateProvider) {
  $stateProvider.state("main.db_operation.user", {url:"/user", templateUrl:"states/main/db_operation/user/user.html", controller:"UserCtrl as user", resolve:{"DEVICETYPESPromise":function(constants) {
    return constants.DEVICETYPESPromise;
  }, "USERSTATUSPromise":function(constants) {
    return constants.USERSTATUSPromise;
  }, "GENDERSPromise":function(constants) {
    return constants.GENDERSPromise;
  }}});
};
jxmgrsec.main.db_operation.user.module.config(jxmgrsec.main.db_operation.user.module.configuration).controller("UserCtrl", jxmgrsec.main.db_operation.user.Ctrl).controller("ModifyUserModalCtrl", jxmgrsec.modify_user_modal.modify_user_modal.Ctrl).controller("ShowUserModalCtrl", jxmgrsec.show_user_modal.show_user_modal.Ctrl);
goog.provide("jxmgrsec.main.db_operation.module");
goog.require("jxmgrsec.main.db_operation.product_type.module");
goog.require("jxmgrsec.main.db_operation.device_type.module");
goog.require("jxmgrsec.main.db_operation.terminal_category.module");
goog.require("jxmgrsec.main.db_operation.terminal.module");
goog.require("jxmgrsec.main.db_operation.manufactory.module");
goog.require("jxmgrsec.main.db_operation.doctor.module");
goog.require("jxmgrsec.main.db_operation.user.module");
goog.require("jxmgrsec.main.db_operation.Ctrl");
jxmgrsec.main.db_operation.module = angular.module("main.db_operation", ["ui.router", jxmgrsec.main.db_operation.product_type.module.name, jxmgrsec.main.db_operation.device_type.module.name, jxmgrsec.main.db_operation.terminal_category.module.name, jxmgrsec.main.db_operation.terminal.module.name, jxmgrsec.main.db_operation.manufactory.module.name, jxmgrsec.main.db_operation.doctor.module.name, jxmgrsec.main.db_operation.user.module.name]);
jxmgrsec.main.db_operation.module.configuration = function($stateProvider) {
  $stateProvider.state("main.db_operation", {url:"/db_operation", templateUrl:"states/main/db_operation/db_operation.html", controller:"DbOperationCtrl as dbOperation"});
};
jxmgrsec.main.db_operation.module.config(jxmgrsec.main.db_operation.module.configuration).controller("DbOperationCtrl", jxmgrsec.main.db_operation.Ctrl);
goog.provide("jxmgrsec.add_voice_pieroid_modal.Ctrl");
jxmgrsec.add_voice_pieroid_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "constants", "twatch", "entity"];
jxmgrsec.add_voice_pieroid_modal.Ctrl = function($scope, $filter, $modalInstance, $q, constants, twatch, entity) {
  console.log(entity);
  $scope.alarm_events = constants.gotALARMEVENTS();
  $scope.week_days = constants.gotWEEKDAYS();
  $scope.weekdays = {week:[]};
  $scope.period_states = constants.gotPERIODSTATES();
  console.log($scope.week_days);
  $scope.playvoice = {imei:entity, eventname:undefined, start:undefined, msg:undefined, times:1, interval:1, weeks:undefined, playvoice_en:1};
  $scope.addVoicePeriod = function() {
    $scope.playvoice.weeks = constants.weekDayHelperArray2Int($scope.weekdays.week);
    console.log($scope.playvoice);
    twatch.addPlayVoices($scope.playvoice).then(function(res) {
      console.log(res);
      $scope.cancel();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.defaulttime = [{"time_id":"1", "time_name":"1"}, {"time_id":"2", "time_name":"2"}, {"time_id":"5", "time_name":"5"}, {"time_id":"10", "time_name":"10"}];
  $scope.defaultinterval = [{"interval_id":"1", "interval_name":"1"}, {"interval_id":"2", "interval_name":"2"}, {"interval_id":"3", "interval_name":"3"}, {"interval_id":"4", "interval_name":"4"}, {"interval_id":"5", "interval_name":"5"}];
};
goog.provide("jxmgrsec.modify_voice_pieroid_modal.Ctrl");
jxmgrsec.modify_voice_pieroid_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "$q", "constants", "entity", "twatch", "imei"];
jxmgrsec.modify_voice_pieroid_modal.Ctrl = function($scope, $filter, $modalInstance, $q, constants, entity, twatch, imei) {
  console.log(entity);
  console.log(imei);
  $scope.alarm_events = constants.gotALARMEVENTS();
  $scope.week_days = constants.gotWEEKDAYS();
  $scope.weekdays = {week:constants.weekDayHelperInt2Array(entity.weeks)};
  $scope.period_states = constants.gotPERIODSTATES();
  $scope.modifyplayvoice = {imei:imei, eventid:entity.eventid, eventname:entity.eventname, start:entity.start, msg:entity.msg, times:entity.times, interval:entity.interval, weeks:undefined, playvoice_en:entity.playvoice_en};
  $scope.modifyVoicePeriod = function() {
    $scope.modifyplayvoice.weeks = constants.weekDayHelperArray2Int($scope.weekdays.week);
    console.log($scope.modifyplayvoice);
    twatch.putPlayVoices($scope.modifyplayvoice).then(function(res) {
      console.log(res);
      $scope.cancel();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.defaulttime = [{"time_id":"1", "time_name":"1\u5206\u949f"}, {"time_id":"2", "time_name":"2\u5206\u949f"}, {"time_id":"5", "time_name":"5\u5206\u949f"}, {"time_id":"10", "time_name":"10\u5206\u949f"}];
  $scope.defaultinterval = [{"interval_id":"1", "interval_name":"1"}, {"interval_id":"2", "interval_name":"2"}, {"interval_id":"3", "interval_name":"3"}, {"interval_id":"4", "interval_name":"4"}, {"interval_id":"5", "interval_name":"5"}];
  Array.prototype.contains = function(obj) {
    var i = this.length;
    while (i--) {
      if (this[i] === obj) {
        return true;
      }
    }
    return false;
  };
};
goog.provide("jxmgrsec.main.twatch.alarm.module");
goog.require("jxmgrsec.main.twatch.alarm.Ctrl");
goog.require("jxmgrsec.modify_voice_pieroid_modal.Ctrl");
goog.require("jxmgrsec.add_voice_pieroid_modal.Ctrl");
jxmgrsec.main.twatch.alarm.module = angular.module("main.twatch.alarm", ["ui.router"]);
jxmgrsec.main.twatch.alarm.module.configuration = function($stateProvider) {
  $stateProvider.state("main.twatch.alarm", {url:"/alarm", templateUrl:"states/main/twatch/alarm/alarm.html", controller:"AlarmCtrl as alarm"});
};
jxmgrsec.main.twatch.alarm.module.config(jxmgrsec.main.twatch.alarm.module.configuration).controller("ModifyVoicePieroidModalCtrl", jxmgrsec.modify_voice_pieroid_modal.Ctrl).controller("AddVoicePieroidModalCtrl", jxmgrsec.add_voice_pieroid_modal.Ctrl).controller("AlarmCtrl", jxmgrsec.main.twatch.alarm.Ctrl);
goog.provide("jxmgrsec.main.twatch.module");
goog.require("jxmgrsec.main.twatch.number.module");
goog.require("jxmgrsec.main.twatch.mode.module");
goog.require("jxmgrsec.main.twatch.alarm.module");
goog.require("jxmgrsec.main.twatch.route_setting.module");
goog.require("jxmgrsec.main.twatch.pen.module");
goog.require("jxmgrsec.main.twatch.loc.module");
goog.require("jxmgrsec.main.twatch.route.module");
goog.require("jxmgrsec.main.twatch.command.module");
goog.require("jxmgrsec.main.twatch.Ctrl");
jxmgrsec.main.twatch.module = angular.module("main.twatch", ["ui.router", jxmgrsec.main.twatch.number.module.name, jxmgrsec.main.twatch.mode.module.name, jxmgrsec.main.twatch.alarm.module.name, jxmgrsec.main.twatch.route_setting.module.name, jxmgrsec.main.twatch.pen.module.name, jxmgrsec.main.twatch.loc.module.name, jxmgrsec.main.twatch.route.module.name, jxmgrsec.main.twatch.command.module.name]);
jxmgrsec.main.twatch.module.configuration = function($stateProvider) {
  $stateProvider.state("main.twatch", {url:"/twatch", templateUrl:"states/main/twatch/twatch.html", controller:"TwatchCtrl as twatch"});
};
jxmgrsec.main.twatch.module.config(jxmgrsec.main.twatch.module.configuration).controller("TwatchCtrl", jxmgrsec.main.twatch.Ctrl);
goog.provide("jxmgrsec.main.module");
goog.require("jxmgrsec.main.db_operation.module");
goog.require("jxmgrsec.main.health_data.module");
goog.require("jxmgrsec.main.home_security.module");
goog.require("jxmgrsec.main.push_message.module");
goog.require("jxmgrsec.main.permission.module");
goog.require("jxmgrsec.main.page.module");
goog.require("jxmgrsec.main.twatch.module");
goog.require("jxmgrsec.main.user_center.module");
goog.require("jxmgrsec.main.Ctrl");
jxmgrsec.main.module = angular.module("main", ["ui.router", "ui.bootstrap", "ui.navbar", jxmgrsec.main.db_operation.module.name, jxmgrsec.main.health_data.module.name, jxmgrsec.main.home_security.module.name, jxmgrsec.main.push_message.module.name, jxmgrsec.main.permission.module.name, jxmgrsec.main.page.module.name, jxmgrsec.main.twatch.module.name, jxmgrsec.main.user_center.module.name]);
jxmgrsec.main.module.configuration = function($stateProvider) {
  $stateProvider.state("main", {url:"/main", templateUrl:"states/main/main.html", controller:"MainCtrl as main"});
};
jxmgrsec.main.module.config(jxmgrsec.main.module.configuration).controller("MainCtrl", jxmgrsec.main.Ctrl);
goog.require("jxmgrsec.main.module");
goog.require("jxmgrsec.version.Directive.factory");
goog.require("jxmgrsec.fileModel.Directive.factory");
goog.require("jxmgrsec.version.Service");
goog.require("jxmgrsec.district.Filter.factory");
goog.require("jxmgrsec.province.Filter.factory");
goog.require("jxmgrsec.city.Filter.factory");
goog.require("jxmgrsec.zone.Filter.factory");
goog.require("jxmgrsec.product_type.Filter.factory");
goog.require("jxmgrsec.device_type.Filter.factory");
goog.require("jxmgrsec.device_type_array.Filter.factory");
goog.require("jxmgrsec.data_type.Filter.factory");
goog.require("jxmgrsec.file_type.Filter.factory");
goog.require("jxmgrsec.wristband_column.Filter.factory");
goog.require("jxmgrsec.sphygmomanometer_column.Filter.factory");
goog.require("jxmgrsec.glucosemeter_column.Filter.factory");
goog.require("jxmgrsec.thermometer_column.Filter.factory");
goog.require("jxmgrsec.oximeter_column.Filter.factory");
goog.require("jxmgrsec.fat_column.Filter.factory");
goog.require("jxmgrsec.comparison_ops.Filter.factory");
goog.require("jxmgrsec.logical_ops.Filter.factory");
goog.require("jxmgrsec.periods.Filter.factory");
goog.require("jxmgrsec.user_status.Filter.factory");
goog.require("jxmgrsec.manufactory_status.Filter.factory");
goog.require("jxmgrsec.terminal_status.Filter.factory");
goog.require("jxmgrsec.doctor_status.Filter.factory");
goog.require("jxmgrsec.helath_consultation_status.Filter.factory");
goog.require("jxmgrsec.health_data_status.Filter.factory");
goog.require("jxmgrsec.health_file_status.Filter.factory");
goog.require("jxmgrsec.company_department.Filter.factory");
goog.require("jxmgrsec.company_member.Filter.factory");
goog.require("jxmgrsec.company_nature.Filter.factory");
goog.require("jxmgrsec.company_industry.Filter.factory");
goog.require("jxmgrsec.department.Filter.factory");
goog.require("jxmgrsec.gender.Filter.factory");
goog.require("jxmgrsec.twatch_qing_name.Filter.factory");
goog.require("jxmgrsec.twatch_sos_name.Filter.factory");
goog.require("jxmgrsec.twatch_work_mode.Filter.factory");
goog.require("jxmgrsec.twatch_work_type.Filter.factory");
goog.require("jxmgrsec.twatch_alarm_event.Filter.factory");
goog.require("jxmgrsec.twatch_period_state.Filter.factory");
goog.require("jxmgrsec.twatch_route_state.Filter.factory");
goog.require("jxmgrsec.twatch_gps_mode.Filter.factory");
goog.require("jxmgrsec.twatch_pen_shape.Filter.factory");
goog.require("jxmgrsec.twatch_week_day.Filter.factory");
goog.require("jxmgrsec.twatch_week_days.Filter.factory");
goog.require("jxmgrsec.unixTodate.Filter.factory");
goog.require("jxmgrsec.dateTounix.Filter.factory");
goog.require("jxmgrsec.basic.Service");
goog.require("jxmgrsec.constants.Factory");
goog.require("jxmgrsec.health_con.Service");
goog.require("jxmgrsec.health_data.Service");
goog.require("jxmgrsec.home_security.Service");
goog.require("jxmgrsec.push_message.Service");
goog.require("jxmgrsec.page.Service");
goog.require("jxmgrsec.twatch.Service");
goog.require("jxmgrsec.db_operation.Service");
goog.require("jxmgrsec.doctor.Service");
goog.require("jxmgrsec.manufactory.Service");
function config($stateProvider, $urlRouterProvider, $locationProvider, $httpProvider) {
  $urlRouterProvider.otherwise("/main/db_operation/product_type");
  $httpProvider.defaults.withCredentials = true;
  if (!$httpProvider.defaults.headers.get) {
    $httpProvider.defaults.headers.get = {};
  }
  $httpProvider.defaults.headers.get["If-Modified-Since"] = "Mon, 26 Jul 1997 05:00:00 GMT";
  $httpProvider.defaults.headers.get["Cache-Control"] = "no-cache";
  $httpProvider.defaults.headers.get["Pragma"] = "no-cache";
  $httpProvider.interceptors.push(function($q, $window) {
    return {response:function(response) {
      return response;
    }, responseError:function(response) {
      if (response.status === 401) {
        $window.location.href = "/manager/open";
      }
      if (response.status === 403) {
        if (response.data.role === "manager") {
          alert("\u60a8\u65e0\u64cd\u4f5c\u6743\u9650\uff01");
        } else {
          $window.location.href = "/manager/open";
        }
      }
      return $q.reject(response);
    }};
  });
}
var onChangeConfig = ["$rootScope", "$state", function($rootScope, $state) {
  $rootScope.$on("$stateChangeStart", function(event, toState) {
    if (toState.name === "main.user_center") {
      event.preventDefault();
      $state.go("main.user_center.basics", {});
    } else {
      if (toState.name === "main.home_security") {
        event.preventDefault();
        $state.go("main.home_security.camera", {});
      } else {
        if (toState.name === "main.permission") {
          event.preventDefault();
          $state.go("main.permission.manager_permission", {});
        } else {
          if (toState.name === "main.page") {
            event.preventDefault();
            $state.go("main.page.category_system_template", {});
          } else {
            if (toState.name === "main.db_operation") {
              event.preventDefault();
              $state.go("main.db_operation.product_type", {});
            }
          }
        }
      }
    }
  });
}];
var endPointConfig = ["$rootScope", function($rootScope, $state) {
  $rootScope.endPoint = "";
  $rootScope.imei = undefined;
}];
angular.module("app", ["ui.router", "ngResource", jxmgrsec.main.module.name]).config(config).run(onChangeConfig).run(endPointConfig).directive("version", jxmgrsec.version.Directive.factory).directive("fileModel", jxmgrsec.fileModel.Directive.factory).service("version", jxmgrsec.version.Service).filter("mapDistrict", jxmgrsec.district.Filter.factory).filter("mapProvince", jxmgrsec.province.Filter.factory).filter("mapCity", jxmgrsec.city.Filter.factory).filter("mapZone", jxmgrsec.zone.Filter.factory).filter("mapProductType", 
jxmgrsec.product_type.Filter.factory).filter("mapDeviceType", jxmgrsec.device_type.Filter.factory).filter("mapDeviceTypeArray", jxmgrsec.device_type_array.Filter.factory).filter("mapDataType", jxmgrsec.data_type.Filter.factory).filter("mapFileType", jxmgrsec.file_type.Filter.factory).filter("mapWristbandColumn", jxmgrsec.wristband_column.Filter.factory).filter("mapSphygmomanometerColumn", jxmgrsec.sphygmomanometer_column.Filter.factory).filter("mapGlucosemeterColumn", jxmgrsec.glucosemeter_column.Filter.factory).filter("mapThermometerColumn", 
jxmgrsec.thermometer_column.Filter.factory).filter("mapOximeterColumn", jxmgrsec.oximeter_column.Filter.factory).filter("mapFatColumn", jxmgrsec.fat_column.Filter.factory).filter("mapComparisonOps", jxmgrsec.comparison_ops.Filter.factory).filter("mapLogicalOps", jxmgrsec.logical_ops.Filter.factory).filter("mapPeriods", jxmgrsec.periods.Filter.factory).filter("mapUserStatus", jxmgrsec.user_status.Filter.factory).filter("mapManufactoryStatus", jxmgrsec.manufactory_status.Filter.factory).filter("mapTerminalStatus", 
jxmgrsec.terminal_status.Filter.factory).filter("mapDoctorStatus", jxmgrsec.doctor_status.Filter.factory).filter("mapHelathConsultationStatus", jxmgrsec.helath_consultation_status.Filter.factory).filter("mapHalthDataStatus", jxmgrsec.health_data_status.Filter.factory).filter("mapHealthFileStatus", jxmgrsec.health_file_status.Filter.factory).filter("mapCompanyDepartment", jxmgrsec.company_department.Filter.factory).filter("mapCompanyMember", jxmgrsec.company_member.Filter.factory).filter("mapCompanyNature", 
jxmgrsec.company_nature.Filter.factory).filter("mapCompanyIndustry", jxmgrsec.company_industry.Filter.factory).filter("mapDepartment", jxmgrsec.department.Filter.factory).filter("mapGender", jxmgrsec.gender.Filter.factory).filter("mapTwatchQingName", jxmgrsec.twatch_qing_name.Filter.factory).filter("mapTwatchSosName", jxmgrsec.twatch_sos_name.Filter.factory).filter("mapTwatchWorkMode", jxmgrsec.twatch_work_mode.Filter.factory).filter("mapTwatchWorkType", jxmgrsec.twatch_work_type.Filter.factory).filter("mapTwatchAlarmEvent", 
jxmgrsec.twatch_alarm_event.Filter.factory).filter("mapTwatchPeriodState", jxmgrsec.twatch_period_state.Filter.factory).filter("mapTwatchRouteState", jxmgrsec.twatch_route_state.Filter.factory).filter("mapTwatchGpsMode", jxmgrsec.twatch_gps_mode.Filter.factory).filter("mapPenShape", jxmgrsec.twatch_pen_shape.Filter.factory).filter("mapWeekDay", jxmgrsec.twatch_week_day.Filter.factory).filter("mapWeekDays", jxmgrsec.twatch_week_days.Filter.factory).filter("unixTodate", jxmgrsec.unixTodate.Filter.factory).filter("dateTounix", 
jxmgrsec.dateTounix.Filter.factory).service("basic", jxmgrsec.basic.Service).service("health_con", jxmgrsec.health_con.Service).factory("constants", jxmgrsec.constants.Factory).service("health_data", jxmgrsec.health_data.Service).service("db_operation", jxmgrsec.db_operation.Service).service("doctor", jxmgrsec.doctor.Service).service("push_message", jxmgrsec.push_message.Service).service("home_security", jxmgrsec.home_security.Service).service("page", jxmgrsec.page.Service).service("twatch", jxmgrsec.twatch.Service).service("manufactory", 
jxmgrsec.manufactory.Service);

