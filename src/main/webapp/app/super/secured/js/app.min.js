'use strict';var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return !goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('<script type="text/javascript" src="' + src + '"></' + "script>");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return !!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return (fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return +new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ = 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("jxsprsec.main.db_operation.Ctrl");
jxsprsec.main.db_operation.Ctrl.$inject = ["$scope", "$http", "i18nService", "$q", "constants", "basic"];
jxsprsec.main.db_operation.Ctrl = function($scope, $http, i18nService, $q, constants, $modal, ModalService, basic) {
  var ctrl = this;
  ctrl.label = "some label from db operation controller";
  $scope.manager = {login_name:undefined, page_size:10, current_page:0, query_date:undefined};
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"login_name", name:"\u8d26\u6237\u540d", width:"10%", pinnedLeft:true}, {field:"full_name", name:"\u771f\u5b9e\u59d3\u540d", width:"10%"}, {field:"gender", name:"\u6027\u522b", width:"10%", cellFilter:"mapGender"}, {field:"birthday", name:"\u51fa\u751f\u65e5\u671f", width:"10%"}, {field:"phone", name:"\u624b\u673a", width:"10%"}, {field:"email", name:"\u90ae\u7bb1", 
  width:"20%"}, {name:"\u64cd\u4f5c", width:"35%", cellTemplate:'<div class="row"><div class="col-md-offset-1 col-md-2"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.popup(row.entity)" >\u4fee\u6539\u8d44\u6599</button></div><div class="col-md-offset-1 col-md-2"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.setRight(row.entity)">\u8bbe\u7f6e\u6743\u9650</button></div><div class="col-md-offset-1 col-md-2"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.changeManStatus(row.entity)">{{row.entity.status == 1 ? "\u7981\u7528" : "\u542f\u7528"}}</button></div></div>', 
  pinnedRight:true}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.manager.current_page = newPage - 1;
      $scope.manager.page_size = pageSize;
      $scope.getNormalManagers();
    });
  }};
  $scope.getNormalManagers = function() {
    basic.getNormalManagers($scope.manager).then(function(data) {
      if ($scope.validParam(data)) {
        $scope.gridOptions.data = data.success_message.normal_managers;
        $scope.gridOptions.totalItems = data.success_message.total_count;
        $scope.manager.query_date = data.success_message.query_date;
      } else {
        console.log(data);
      }
    }, function(error) {
      console.log(error);
    });
  };
  $scope.getNormalManagers();
  i18nService.setCurrentLang("zh-CN");
  ctrl.device_types = [];
  ctrl.device_types_selected = [];
  ctrl.device_states = [{"id":"1", "state":"\u6b63\u5e38"}, {"id":"2", "state":"\u7981\u7528"}];
  ctrl.device_state_selected = {selected:undefined};
  function activate() {
    var promises = [getDeviceTypes()];
    return $q.all(promises).then(function() {
    });
  }
  function getDeviceTypes() {
    return constants.getDeviceTypes().then(function(data) {
      ctrl.device_types = data.device_types;
      ctrl.device_types_selected = [];
      return ctrl.device_types;
    });
  }
  $scope.addManagerModal = function() {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/add_manager_modal/add_manager_modal.html", controller:"AddManagerModalCtrl", size:"lg"});
    modalInstance.result.then(function() {
      console.log("Modal closed at: " + new Date);
    }, function() {
      $scope.getNormalManagers();
    });
  };
  $scope.popup = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/modify_manager_modal/modify_manager_modal.html", controller:"ModifyManagerModalCtrl", size:"lg", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
      console.log("Modal closed at: " + new Date);
    }, function() {
      $scope.getNormalManagers();
    });
  };
  $scope.setRight = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/setRight_manager_modal/setRight_manager_modal.html", controller:"SetRightManagerModalCtrl as SetRightManagerModalCtrl", size:"lg", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
      console.log("Modal closed at: " + new Date);
    }, function() {
      $scope.getNormalManagers();
    });
  };
  $scope.changeManStatus = function(entity) {
    if (entity.status == 1) {
      basic.updateStatus(entity.administrator_id, {status:2}).then(function(data) {
        if ($scope.validParam(data.success_message)) {
          $scope.addAlert("success", "\u7981\u7528\u6210\u529f!");
          $scope.getNormalManagers();
        } else {
          $scope.addAlert("danger", "\u7981\u7528\u5931\u8d25!");
        }
      }, function(error) {
        $scope.addAlert("danger", "\u7981\u7528\u5931\u8d25!");
      });
    } else {
      if (entity.status == 2) {
        basic.updateStatus(entity.administrator_id, {status:1}).then(function(data) {
          if ($scope.validParam(data.success_message)) {
            $scope.addAlert("success", "\u542f\u7528\u6210\u529f!");
            $scope.getNormalManagers();
          } else {
            $scope.addAlert("danger", "\u542f\u7528\u5931\u8d25!");
          }
        }, function(error) {
          $scope.addAlert("danger", "\u542f\u7528\u5931\u8d25!");
        });
      }
    }
  };
  $scope.deleteManager = function(entity) {
    if ($scope.validParam(entity.administrator_id)) {
      basic.deleteManager(entity.administrator_id).then(function(data) {
        if ($scope.validParam(data.success_message)) {
          $scope.addAlert("success", "\u5220\u9664\u7ba1\u7406\u5458\u6210\u529f!");
          $scope.getNormalManagers();
        } else {
          $scope.addAlert("danger", "\u5220\u9664\u7ba1\u7406\u5458\u5931\u8d25!");
        }
      }, function(error) {
        $scope.addAlert("danger", "\u5220\u9664\u7ba1\u7406\u5458\u51fa\u9519\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5!");
      });
    }
  };
};
jxsprsec.main.db_operation.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxsprsec.main.log_manage.Ctrl");
jxsprsec.main.log_manage.Ctrl.$inject = ["$scope", "$http", "$filter", "i18nService", "$q", "constants", "basic", "log_manage"];
jxsprsec.main.log_manage.Ctrl = function($scope, $http, $filter, i18nService, $q, constants, $modal, ModalService, basic, log_manage) {
  i18nService.setCurrentLang("zh-CN");
  $scope.query_date = {happened_from:new Date("2015/07/01"), happened_to:new Date};
  $scope.query_date.happened_to.setHours(23);
  $scope.query_date.happened_to.setMinutes(59);
  $scope.query_date.happened_to.setSeconds(59);
  $scope.log = {user_role:undefined, user_login_name:undefined, op_title:undefined, happened_from:undefined, happened_to:undefined, page_size:10, current_page:0, query_date:undefined};
  $scope.ops = constants.gotOPERATIONS();
  $scope.roles = constants.gotUSERROLES();
  $scope.getOperationLogs = function() {
    $scope.log.happened_from = $filter("dateTounix")($filter("date")($scope.query_date.happened_from, "yyyy-M-dd H:mm:ss"));
    $scope.log.happened_to = $filter("dateTounix")($filter("date")($scope.query_date.happened_to, "yyyy-M-dd H:mm:ss"));
    return log_manage.getOperationLogs($scope.log).then(function(res) {
      $scope.gridOptions.data = res.operations;
      $scope.gridOptions.totalItems = res.total_count;
      $scope.log.query_date = res.query_date;
    }, function(error) {
      $scope.addAlert("danger", "\u52a0\u8f7d\u6570\u636e\u5f02\u5e38,\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.getOperationLogs();
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"user_login_name", name:"\u7528\u6237\u540d\u79f0", width:"20%", pinnedLeft:true}, {field:"user_role", name:"\u7528\u6237\u89d2\u8272", width:"20%", cellFilter:"mapUserRole"}, {field:"op_title", name:"\u64cd\u4f5c\u7c7b\u578b", width:"20%", cellFilter:"mapOperation"}, {field:"happened_at", name:"\u53d1\u751f\u65f6\u95f4", width:"20%", cellFilter:"unixTodate"}, {field:"origin_ip", 
  name:"\u6765\u6e90 IP", width:"20%"}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.log.current_page = newPage - 1;
      $scope.log.page_size = pageSize;
      $scope.getOperationLogs();
    });
  }};
  $scope.dt = new Date;
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.open_form_1 = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.form1_opened = true;
  };
  $scope.open_form_2 = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.form2_opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
};
jxsprsec.main.log_manage.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxsprsec.main.log_manage.module");
goog.require("jxsprsec.main.log_manage.Ctrl");
jxsprsec.main.log_manage.module = angular.module("main.log_manage", ["ui.router", "ui.grid", "ui.grid.pinning", "ui.grid.resizeColumns", "ui.grid.saveState", "ui.grid.edit", "ui.grid.pagination", "ui.select", "ui.bootstrap", "ngSanitize", "angularModalService"]);
jxsprsec.main.log_manage.module.configuration = function($stateProvider) {
  $stateProvider.state("main.log_manage", {url:"/log_manage", templateUrl:"states/main/log_manage/log_manage.html", controller:"LogManageCtrl as logManageCtrl", resolve:{"USERROLESPromise":function(constants) {
    return constants.USERROLESPromise;
  }, "OPERATIONSPromise":function(constants) {
    return constants.OPERATIONSPromise;
  }}});
};
jxsprsec.main.log_manage.module.config(jxsprsec.main.log_manage.module.configuration).controller("LogManageCtrl", jxsprsec.main.log_manage.Ctrl);
goog.provide("jxsprsec.main.Ctrl");
jxsprsec.main.Ctrl.$inject = ["$scope", "$timeout", "basic", "$window"];
jxsprsec.main.Ctrl = function($scope, basic, $window, $timeout) {
  var ctrl = this;
  ctrl.label = "some label from main controller";
  ctrl.user_center_submenus = [{name:"\u57fa\u672c\u8d44\u6599", link:"main.user_center.basics"}, {name:"\u4fee\u6539\u5934\u50cf", link:"main.user_center.avatar"}, {name:"\u4fee\u6539\u5bc6\u7801", link:"main.user_center.password"}];
  $scope.avatarurl = "../../img/shangbiaokuang.png";
  $scope.superName = "\u8d85\u7ea7\u7ba1\u7406\u5458\u59d3\u540d";
  $scope.getSuperBasics = function() {
    console.log("\u8d85\u7ea7\u7ba1\u7406\u5458\u57fa\u672c\u4fe1\u606f\uff01");
    basic.getManagerBasics().then(function(data) {
      if ($scope.validParam(data.success_message.avatar_url)) {
        $scope.avatarurl = data.success_message.avatar_url;
        console.log($scope.avatarurl);
      }
      if ($scope.validParam(data.success_message.full_name)) {
        $scope.superName = data.success_message.full_name;
      }
    }, function(error) {
      $scope.addAlert("danger", "\u6570\u636e\u52a0\u8f7d\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.getSuperBasics();
  $scope.signOut = function() {
    basic.signOut().then(function(data) {
      $window.location.href = "/super/open";
    }, function(error) {
      console.log(error);
      $window.location.href = "/super/open";
    });
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  $scope.validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
};
jxsprsec.main.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxsprsec.main.user_center.avatar.Ctrl");
jxsprsec.main.user_center.avatar.Ctrl.$inject = ["$scope", "basic"];
jxsprsec.main.user_center.avatar.Ctrl = function($scope, basic) {
  this.label = "some other label from main.user_center.avatar controller";
  $scope.avatarFile = undefined;
  $scope.avatarurl = "../../../img/touxiang.png";
  $scope.getManagerBasics = function() {
    basic.getManagerBasics().then(function(data) {
      if (validParam(data.success_message.avatar_url)) {
        $scope.avatarurl = data.success_message.avatar_url;
      }
    }, function(error) {
      $scope.addAlert("danger", "\u6570\u636e\u52a0\u8f7d\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.getManagerBasics();
  $scope.saveAvatar = function() {
    if (validParam($scope.avatarFile)) {
      if (validPic($scope.avatarFile, "png|jpg|jpeg|bmp|gif")) {
        basic.fileUpload($scope.avatarFile).then(function(res) {
          console.log(res);
          $scope.avatarurl = res.success_message[0];
          basic.updateManAvatar({avatar_url:$scope.avatarurl}).then(function(res) {
            $scope.addAlert("success", "\u4e0a\u4f20\u5934\u50cf\u6210\u529f");
            $scope.getManagerBasics();
          }, function(error) {
            $scope.addAlert("danger", "\u4e0a\u4f20\u5934\u50cf\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
          });
        }, function(error) {
          console.log(error);
          $scope.addAlert("danger", "\u4e0a\u4f20\u5934\u50cf\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
        });
      } else {
        $scope.addAlert("warning", "\u8bf7\u4e0a\u4f20png\u3001jpg\u3001gif\u7c7b\u578b\u7684\u6587\u4ef6\uff01");
      }
    } else {
      $scope.addAlert("warning", "\u8bf7\u9009\u62e9\u6587\u4ef6\uff01");
    }
  };
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  function validPic(file, str) {
    if (file != undefined && file.type != undefined && str != undefined && str != "" && str.length != 0) {
      var suffixs = str.split("|");
      var fileSuf = file.type.split("/");
      var res = suffixs.filter(function(item) {
        return item == fileSuf[1];
      });
      if (res.length != 0) {
        return true;
      }
      return false;
    }
  }
};
goog.provide("jxsprsec.main.user_center.avatar.module");
goog.require("jxsprsec.main.user_center.avatar.Ctrl");
jxsprsec.main.user_center.avatar.module = angular.module("main.user_center.avatar", ["ui.router"]);
jxsprsec.main.user_center.avatar.module.configuration = function($stateProvider) {
  $stateProvider.state("main.user_center.avatar", {url:"/avatar", templateUrl:"states/main/user_center/avatar/avatar.html", controller:"AvatarCtrl as avatar"});
};
jxsprsec.main.user_center.avatar.module.config(jxsprsec.main.user_center.avatar.module.configuration).controller("AvatarCtrl", jxsprsec.main.user_center.avatar.Ctrl);
goog.provide("jxsprsec.main.user_center.password.Ctrl");
jxsprsec.main.user_center.password.Ctrl.$inject = ["basic", "md5", "$timeout"];
jxsprsec.main.user_center.password.Ctrl = function($scope, basic, md5) {
  this.label = "some other label from user_center.password controller";
  $scope.chPassword = {password:undefined, confirm_password:undefined, new_password:undefined};
  $scope.activeSave = false;
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  $scope.checkUserName = function() {
    var node = document.getElementById("user_name_group");
    var helper = document.getElementById("user_name_helper");
    if (validParam($scope.chPassword.password)) {
      node.className = "form-group has-success";
      helper.innerHTML = "\u5df2\u586b";
      if (validParam($scope.chPassword.new_password) && validParam($scope.chPassword.password) && validParam($scope.chPassword.confirm_password)) {
        $scope.activeSave = true;
      }
    } else {
      node.className = "form-group has-error";
      helper.innerHTML = "\u5fc5\u586b";
      $scope.activeSave = false;
    }
  };
  $scope.checkPassword = function() {
    var node = document.getElementById("password_group");
    var helper = document.getElementById("password_helper");
    if (validParam($scope.chPassword.password)) {
      node.className = "form-group has-success";
      helper.innerHTML = "\u5df2\u586b";
    } else {
      node.className = "form-group has-error";
      helper.innerHTML = "\u5fc5\u586b";
      $scope.activeSave = false;
    }
  };
  $scope.checkPasswordRepeat = function() {
    var node = document.getElementById("password_repeat_group");
    var helper = document.getElementById("password_repeat_helper");
    if (validParam($scope.chPassword.confirm_password)) {
      node.className = "form-group has-success";
      helper.innerHTML = "\u5df2\u586b";
      if (validParam($scope.chPassword.new_password) && $scope.chPassword.confirm_password == $scope.chPassword.new_password) {
        $scope.activeSave = true;
      }
    } else {
      node.className = "form-group has-error";
      helper.innerHTML = "\u5fc5\u586b";
      $scope.activeSave = false;
    }
    if ($scope.chPassword.confirm_password != $scope.chPassword.new_password) {
      node.className = "form-group has-error";
      helper.innerHTML = "\u5bc6\u7801\u4e0d\u4e00\u81f4";
      $scope.activeSave = false;
    }
  };
  $scope.saveNewPwd = function() {
    console.log("test");
    basic.change_password({old_password:md5.createHash($scope.chPassword.password), new_password:md5.createHash($scope.chPassword.new_password)}).then(function(res) {
      if (validParam(res.success_message)) {
        $scope.addAlert("success", "\u4fee\u6539\u5bc6\u7801\u6210\u529f\uff01");
        clearData();
      }
      if (validParam(res.error_message)) {
        $scope.addAlert("danger", res.error_message.faultstring);
      }
    }, function(error) {
      $scope.addAlert("danger", "\u4fee\u6539\u5bc6\u7801\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  var clearData = function() {
    $scope.chPassword.password = null;
    $scope.chPassword.new_password = null;
    $scope.chPassword.confirm_password = null;
    var helper1 = document.getElementById("user_name_helper");
    helper1.innerHTML = "\u5fc5\u586b";
    var helper2 = document.getElementById("password_helper");
    helper2.innerHTML = "\u5fc5\u586b";
    var helper3 = document.getElementById("password_repeat_helper");
    helper3.innerHTML = "\u5fc5\u586b";
  };
};
goog.provide("jxsprsec.main.user_center.password.module");
goog.require("jxsprsec.main.user_center.password.Ctrl");
jxsprsec.main.user_center.password.module = angular.module("main.user_center.password", ["ui.router", "angular-md5"]);
jxsprsec.main.user_center.password.module.configuration = function($stateProvider) {
  $stateProvider.state("main.user_center.password", {url:"/password", templateUrl:"states/main/user_center/password/password.html", controller:"PasswordCtrl as password"});
};
jxsprsec.main.user_center.password.module.config(jxsprsec.main.user_center.password.module.configuration).controller("PasswordCtrl", jxsprsec.main.user_center.password.Ctrl);
goog.provide("jxsprsec.main.user_center.Ctrl");
jxsprsec.main.user_center.Ctrl = function() {
  this.label = "some label from user center controller";
  this.a = function() {
    console.log("hi");
  };
};
jxsprsec.main.user_center.Ctrl.prototype.log = function(text) {
  console.log("hello");
};
goog.require("jxsprsec.main.user_center.Ctrl");
goog.provide("jxsprsec.main.user_center.basics.Ctrl");
jxsprsec.main.user_center.basics.Ctrl.$inject = ["$controller", "$scope", "$timeout", "$filter", "$q", "basic", "constants"];
jxsprsec.main.user_center.basics.Ctrl = function($controller, $scope, $timeout, $filter, $q, basic, constants) {
  this.label = "some other label from user_center.basics controller";
  this.parent = $controller(jxsprsec.main.user_center.Ctrl);
  this.parent.log("`log` function called from child controller");
  $scope.dt = new Date;
  $scope.genders = constants.gotGENDERS();
  $scope.admin = {full_name:undefined, email:undefined, gender:undefined, birthday:undefined};
  $scope.getAdminBasics = function() {
    basic.getAdminBasics().then(function(data) {
      $scope.admin = data.success_message;
      $scope.admin.last_login = $filter("unixTodate")($scope.admin.last_login);
    }, function(error) {
      $scope.addAlert("danger", "\u6570\u636e\u52a0\u8f7d\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.getAdminBasics();
  $scope.saveAdminBasic = function() {
    basic.putAdminBasic($scope.admin).then(function(succ) {
      $scope.addAlert("success", "\u4fdd\u5b58\u6210\u529f\uff01");
    }, function(error) {
      console.log(error);
      $scope.addAlert("danger", "\u4fdd\u5b58\u5931\u8d25,\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.maxDate = new Date;
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.opened = false;
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
};
goog.provide("jxsprsec.main.user_center.basics.module");
goog.require("jxsprsec.main.user_center.basics.Ctrl");
jxsprsec.main.user_center.basics.module = angular.module("main.user_center.basics", ["ui.router"]);
jxsprsec.main.user_center.basics.module.configuration = function($stateProvider) {
  $stateProvider.state("main.user_center.basics", {url:"/basics", templateUrl:"states/main/user_center/basics/basics.html", controller:"BasicsCtrl as basics", resolve:{"GENDERSPromise":function(constants) {
    return constants.GENDERSPromise;
  }}});
};
jxsprsec.main.user_center.basics.module.config(jxsprsec.main.user_center.basics.module.configuration).controller("BasicsCtrl", jxsprsec.main.user_center.basics.Ctrl);
goog.provide("jxsprsec.main.user_center.module");
goog.require("jxsprsec.main.user_center.basics.module");
goog.require("jxsprsec.main.user_center.avatar.module");
goog.require("jxsprsec.main.user_center.password.module");
goog.require("jxsprsec.main.user_center.Ctrl");
jxsprsec.main.user_center.module = angular.module("main.user_center", ["ui.router", jxsprsec.main.user_center.basics.module.name, jxsprsec.main.user_center.avatar.module.name, jxsprsec.main.user_center.password.module.name]);
jxsprsec.main.user_center.module.configuration = function($stateProvider) {
  $stateProvider.state("main.user_center", {url:"/user_center", templateUrl:"states/main/user_center/user_center.html", controller:"UserCenterCtrl as userCenter"});
};
jxsprsec.main.user_center.module.config(jxsprsec.main.user_center.module.configuration).controller("UserCenterCtrl", jxsprsec.main.user_center.Ctrl);
goog.provide("jxsprsec.fileModel.Directive.factory");
jxsprsec.fileModel.Directive = function($parse) {
  this.parse = $parse;
  this.link = this.link.bind(this);
  this.scope;
  this.elem;
  this.attrs;
};
jxsprsec.fileModel.Directive.factory = function($parse) {
  var dir = new jxsprsec.fileModel.Directive($parse);
  return {link:dir.link};
};
jxsprsec.fileModel.Directive.prototype.link = function(scope, elem, attrs) {
  this.scope = scope;
  this.elem = elem;
  this.attrs = attrs;
  this.restrict = "A";
  var model = this.parse(attrs.fileModel);
  var modelSetter = model.assign;
  elem.bind("change", function() {
    scope.$apply(function() {
      modelSetter(scope, elem[0].files[0]);
    });
  });
};
goog.provide("jxsprsec.version.Directive.factory");
jxsprsec.version.Directive = function(version) {
  this.version = version;
  this.link = this.link.bind(this);
  this.scope;
  this.elem;
  this.attrs;
};
jxsprsec.version.Directive.factory = function(version) {
  var dir = new jxsprsec.version.Directive(version);
  return {link:dir.link};
};
jxsprsec.version.Directive.prototype.link = function(scope, elem, attrs) {
  this.scope = scope;
  this.elem = elem;
  this.attrs = attrs;
  this.elem.text(this.version.get());
};
goog.provide("jxsprsec.constants.Factory");
jxsprsec.constants.Factory.$inject = ["$rootScope", "$http", "$q"];
jxsprsec.constants.Factory = function($rootScope, $http, $q) {
  function getConstants(req) {
    req.url = $rootScope.endPoint + req.url;
    return $http(req).then(success).catch(fail);
    function success(response) {
      return response.data.success_message;
    }
    function fail(error) {
      return $q.reject("rejected");
    }
  }
  var DISTRICTS = [];
  var DISTRICTSPromise = getDistricts().then(function(data) {
    DISTRICTS = data.districts;
  }, function(data) {
    DISTRICTS = [];
  });
  function getDistricts() {
    var req = {method:"GET", url:"/common/constants/districts"};
    return getConstants(req);
  }
  function gotDISTRICTS() {
    return DISTRICTS;
  }
  var PROVINCES = [];
  var PROVINCESPromise = getProvinces().then(function(data) {
    PROVINCES = data.provinces;
  }, function(data) {
    PROVINCES = [];
  });
  function getProvinces() {
    var req = {method:"GET", url:"/common/constants/provinces"};
    return getConstants(req);
  }
  function gotPROVINCES() {
    return PROVINCES;
  }
  var CITIES = [];
  var CITIESPromise = getCities().then(function(data) {
    CITIES = data.cities;
  }, function(data) {
    CITIES = [];
  });
  function getCities() {
    var req = {method:"GET", url:"/common/constants/cities"};
    return getConstants(req);
  }
  function gotCITIES() {
    return CITIES;
  }
  var ZONES = [];
  var ZONESPromise = getZones().then(function(data) {
    ZONES = data.zones;
  }, function(data) {
    ZONES = [];
  });
  function getZones() {
    var req = {method:"GET", url:"/common/constants/zones"};
    return getConstants(req);
  }
  function gotZONES() {
    return ZONES;
  }
  var PRODUCTTYPES = [];
  var PRODUCTTYPESPromise = getProductTypes().then(function(data) {
    PRODUCTTYPES = data.product_types;
  }, function(data) {
    PRODUCTTYPES = [];
  });
  function getProductTypes() {
    var req = {method:"GET", url:"/common/constants/product_types"};
    return getConstants(req);
  }
  function gotPRODUCTTYPES() {
    return PRODUCTTYPES;
  }
  var DEVICETYPES = [];
  var DEVICETYPESPromise = getDeviceTypes().then(function(data) {
    DEVICETYPES = data.device_types;
  }, function(data) {
    DEVICETYPES = [];
  });
  function getDeviceTypes() {
    var req = {method:"GET", url:"/common/constants/device_types"};
    return getConstants(req);
  }
  function gotDEVICETYPES() {
    return DEVICETYPES;
  }
  var DATATYPES = [];
  var DATATYPESPromise = getDataTypes().then(function(data) {
    DATATYPES = data.data_types;
  }, function(data) {
    DATATYPES = [];
  });
  function getDataTypes() {
    var req = {method:"GET", url:"/common/constants/data_types"};
    return getConstants(req);
  }
  function gotDATATYPES() {
    return DATATYPES;
  }
  var FILETYPES = [];
  var FILETYPESPromise = getFileTypes().then(function(data) {
    FILETYPES = data.file_types;
  }, function(data) {
    FILETYPES = [];
  });
  function getFileTypes() {
    var req = {method:"GET", url:"/common/constants/file_types"};
    return getConstants(req);
  }
  function gotFILETYPES() {
    return FILETYPES;
  }
  var WRISTBANDCOLUMNS = [];
  var WRISTBANDCOLUMNSPromise = getWristbandColumns().then(function(data) {
    WRISTBANDCOLUMNS = data.columns;
  }, function(data) {
    WRISTBANDCOLUMNS = [];
  });
  function getWristbandColumns() {
    var req = {method:"GET", url:"/common/constants/wristband_columns"};
    return getConstants(req);
  }
  function gotWRISTBANDCOLUMNS() {
    return WRISTBANDCOLUMNS;
  }
  var SPHYGMOMANOMETERCOLUMNS = [];
  var SPHYGMOMANOMETERCOLUMNSPromise = getSphygmomanometerColumns().then(function(data) {
    SPHYGMOMANOMETERCOLUMNS = data.columns;
  }, function(data) {
    SPHYGMOMANOMETERCOLUMNS = [];
  });
  function getSphygmomanometerColumns() {
    var req = {method:"GET", url:"/common/constants/sphygmomanometer_columns"};
    return getConstants(req);
  }
  function gotSPHYGMOMANOMETERCOLUMNS() {
    return SPHYGMOMANOMETERCOLUMNS;
  }
  var GLUCOSEMETERCOLUMNS = [];
  var GLUCOSEMETERCOLUMNSPromise = getGlucosemeterColumns().then(function(data) {
    GLUCOSEMETERCOLUMNS = data.columns;
  }, function(data) {
    GLUCOSEMETERCOLUMNS = [];
  });
  function getGlucosemeterColumns() {
    var req = {method:"GET", url:"/common/constants/glucosemeter_columns"};
    return getConstants(req);
  }
  function gotGLUCOSEMETERCOLUMNS() {
    return GLUCOSEMETERCOLUMNS;
  }
  var THERMOMETERCOLUMNS = [];
  var THERMOMETERCOLUMNSPromise = getThermometerColumns().then(function(data) {
    THERMOMETERCOLUMNS = data.columns;
  }, function(data) {
    THERMOMETERCOLUMNS = [];
  });
  function getThermometerColumns() {
    var req = {method:"GET", url:"/common/constants/thermometer_columns"};
    return getConstants(req);
  }
  function gotTHERMOMETERCOLUMNS() {
    return THERMOMETERCOLUMNS;
  }
  var OXIMETERCOLUMNS = [];
  var OXIMETERCOLUMNSPromise = getOximeterColumns().then(function(data) {
    OXIMETERCOLUMNS = data.columns;
  }, function(data) {
    OXIMETERCOLUMNS = [];
  });
  function getOximeterColumns() {
    var req = {method:"GET", url:"/common/constants/oximeter_columns"};
    return getConstants(req);
  }
  function gotOXIMETERCOLUMNS() {
    return OXIMETERCOLUMNS;
  }
  var FATCOLUMNS = [];
  var FATCOLUMNSPromise = getFatColumns().then(function(data) {
    FATCOLUMNS = data.columns;
  }, function(data) {
    FATCOLUMNS = [];
  });
  function getFatColumns() {
    var req = {method:"GET", url:"/common/constants/fat_columns"};
    return getConstants(req);
  }
  function gotFATCOLUMNS() {
    return FATCOLUMNS;
  }
  var COMPARISONOPS = [];
  var COMPARISONOPSPromise = getComparisonOps().then(function(data) {
    COMPARISONOPS = data.ops;
  }, function(data) {
    COMPARISONOPS = [];
  });
  function getComparisonOps() {
    var req = {method:"GET", url:"/common/constants/comparison_ops"};
    return getConstants(req);
  }
  function gotCOMPARISONOPS() {
    return COMPARISONOPS;
  }
  var LOGICALOPS = [];
  var LOGICALOPSPromise = getLogicalOps().then(function(data) {
    LOGICALOPS = data.ops;
  }, function(data) {
    LOGICALOPS = [];
  });
  function getLogicalOps() {
    var req = {method:"GET", url:"/common/constants/logical_ops"};
    return getConstants(req);
  }
  function gotLOGICALOPS() {
    return LOGICALOPS;
  }
  var PERIODS = [];
  var PERIODSPromise = getPeriods().then(function(data) {
    PERIODS = data.periods;
  }, function(data) {
    PERIODS = [];
  });
  function getPeriods() {
    var req = {method:"GET", url:"/common/constants/periods"};
    return getConstants(req);
  }
  function gotPERIODS() {
    return PERIODS;
  }
  var USERSTATUS = [];
  var USERSTATUSPromise = getUserStatus().then(function(data) {
    USERSTATUS = data.user_status_list;
  }, function(data) {
    USERSTATUS = [];
  });
  function getUserStatus() {
    var req = {method:"GET", url:"/common/constants/user_status"};
    return getConstants(req);
  }
  function gotUSERSTATUS() {
    return USERSTATUS;
  }
  var MANUFACTORYSTATUS = [];
  var MANUFACTORYSTATUSPromise = getManufactoryStatus().then(function(data) {
    MANUFACTORYSTATUS = data.manufactory_status_list;
  }, function(data) {
    MANUFACTORYSTATUS = [];
  });
  function getManufactoryStatus() {
    var req = {method:"GET", url:"/common/constants/manufactory_status"};
    return getConstants(req);
  }
  function gotMANUFACTORYSTATUS() {
    return MANUFACTORYSTATUS;
  }
  var TERMINALSTATUS = [];
  var TERMINALSTATUSPromise = getTerminalStatus().then(function(data) {
    TERMINALSTATUS = data.terminal_status_list;
  }, function(data) {
    TERMINALSTATUS = [];
  });
  function getTerminalStatus() {
    var req = {method:"GET", url:"/common/constants/terminal_status"};
    return getConstants(req);
  }
  function gotTERMINALSTATUS() {
    return TERMINALSTATUS;
  }
  var DOCTORSTATUS = [];
  var DOCTORSTATUSPromise = getDoctorStatus().then(function(data) {
    DOCTORSTATUS = data.doctor_status_list;
  }, function(data) {
    DOCTORSTATUS = [];
  });
  function getDoctorStatus() {
    var req = {method:"GET", url:"/common/constants/doctor_status"};
    return getConstants(req);
  }
  function gotDOCTORSTATUS() {
    return DOCTORSTATUS;
  }
  var HEALTHCONSULTATIONSTATUS = [];
  var HEALTHCONSULTATIONSTATUSPromise = getHealthConsultationStatus().then(function(data) {
    HEALTHCONSULTATIONSTATUS = data.consultation_status_list;
  }, function(data) {
    HEALTHCONSULTATIONSTATUS = [];
  });
  function getHealthConsultationStatus() {
    var req = {method:"GET", url:"/common/constants/health_consultation_status"};
    return getConstants(req);
  }
  function gotHEALTHCONSULTATIONSTATUS() {
    return HEALTHCONSULTATIONSTATUS;
  }
  var HEALTHDATASTATUS = [];
  var HEALTHDATASTATUSPromise = getHealthDataStatus().then(function(data) {
    HEALTHDATASTATUS = data.data_status_list;
  }, function(data) {
    HEALTHDATASTATUS = [];
  });
  function getHealthDataStatus() {
    var req = {method:"GET", url:"/common/constants/health_data_status"};
    return getConstants(req);
  }
  function gotHEALTHDATASTATUS() {
    return HEALTHDATASTATUS;
  }
  var HEALTHFILESTATUS = [];
  var HEALTHFILESTATUSPromise = getHealthFileStatus().then(function(data) {
    HEALTHFILESTATUS = data.file_status_list;
  }, function(data) {
    HEALTHFILESTATUS = [];
  });
  function getHealthFileStatus() {
    var req = {method:"GET", url:"/common/constants/health_file_status"};
    return getConstants(req);
  }
  function gotHEALTHFILESTATUS() {
    return HEALTHFILESTATUS;
  }
  var COMPANYDEPARTMENTS = [];
  var COMPANYDEPARTMENTSPromise = getCompanyDepartments().then(function(data) {
    COMPANYDEPARTMENTS = data.departments;
  }, function(data) {
    COMPANYDEPARTMENTS = [];
  });
  function getCompanyDepartments() {
    var req = {method:"GET", url:"/common/constants/company_departments"};
    return getConstants(req);
  }
  function gotCOMPANYDEPARTMENTS() {
    return COMPANYDEPARTMENTS;
  }
  var COMPANYMEMBERS = [];
  var COMPANYMEMBERSPromise = getCompanyMembers().then(function(data) {
    COMPANYMEMBERS = data.members;
  }, function(data) {
    COMPANYMEMBERS = [];
  });
  function getCompanyMembers() {
    var req = {method:"GET", url:"/common/constants/company_members"};
    return getConstants(req);
  }
  function gotCOMPANYMEMBERS() {
    return COMPANYMEMBERS;
  }
  var COMPANYNATURES = [];
  var COMPANYNATURESPromise = getCompanyNatures().then(function(data) {
    COMPANYNATURES = data.natures;
  }, function(data) {
    COMPANYNATURES = [];
  });
  function getCompanyNatures() {
    var req = {method:"GET", url:"/common/constants/company_natures"};
    return getConstants(req);
  }
  function gotCOMPANYNATURES() {
    return COMPANYNATURES;
  }
  var COMPANYINDUSTRIES = [];
  var COMPANYINDUSTRIESPromise = getCompanyIndustries().then(function(data) {
    COMPANYINDUSTRIES = data.industries;
  }, function(data) {
    COMPANYINDUSTRIES = [];
  });
  function getCompanyIndustries() {
    var req = {method:"GET", url:"/common/constants/company_industries"};
    return getConstants(req);
  }
  function gotCOMPANYINDUSTRIES() {
    return COMPANYINDUSTRIES;
  }
  var DEPARTMENTS = [];
  var DEPARTMENTSPromise = getDepartments().then(function(data) {
    DEPARTMENTS = data.departments;
  }, function(data) {
    DEPARTMENTS = [];
  });
  function getDepartments() {
    var req = {method:"GET", url:"/common/constants/departments"};
    return getConstants(req);
  }
  function gotDEPARTMENTS() {
    return DEPARTMENTS;
  }
  var GENDERS = [];
  var GENDERSPromise = getGenders().then(function(data) {
    GENDERS = data.genders;
  }, function(data) {
    GENDERS = [];
  });
  function getGenders() {
    var req = {method:"GET", url:"/common/constants/genders"};
    return getConstants(req);
  }
  function gotGENDERS() {
    return GENDERS;
  }
  var USERROLES = [];
  var USERROLESPromise = getUserRoles().then(function(data) {
    USERROLES = data.role_list;
  }, function(data) {
    USERROLES = [];
  });
  function getUserRoles() {
    var req = {method:"GET", url:"/common/constants/user_roles"};
    return getConstants(req);
  }
  function gotUSERROLES() {
    return USERROLES;
  }
  var OPERATIONS = [];
  var OPERATIONSPromise = getOperations().then(function(data) {
    OPERATIONS = data.title_list;
  }, function(data) {
    OPERATIONS = [];
  });
  function getOperations() {
    var req = {method:"GET", url:"/common/constants/op_titles"};
    return getConstants(req);
  }
  function gotOPERATIONS() {
    return OPERATIONS;
  }
  var service = {getConstants:getConstants, getDistricts:getDistricts, gotDISTRICTS:gotDISTRICTS, DISTRICTSPromise:DISTRICTSPromise, getProvinces:getProvinces, gotPROVINCES:gotPROVINCES, PROVINCESPromise:PROVINCESPromise, getCities:getCities, gotCITIES:gotCITIES, CITIESPromise:CITIESPromise, getZones:getZones, gotZONES:gotZONES, ZONESPromise:ZONESPromise, getProductTypes:getProductTypes, gotPRODUCTTYPES:gotPRODUCTTYPES, PRODUCTTYPESPromise:PRODUCTTYPESPromise, getDeviceTypes:getDeviceTypes, gotDEVICETYPES:gotDEVICETYPES, 
  DEVICETYPESPromise:DEVICETYPESPromise, getDataTypes:getDataTypes, gotDATATYPES:gotDATATYPES, DATATYPESPromise:DATATYPESPromise, getFileTypes:getFileTypes, gotFILETYPES:gotFILETYPES, FILETYPESPromise:FILETYPESPromise, getWristbandColumns:getWristbandColumns, gotWRISTBANDCOLUMNS:gotWRISTBANDCOLUMNS, WRISTBANDCOLUMNSPromise:WRISTBANDCOLUMNSPromise, getSphygmomanometerColumns:getSphygmomanometerColumns, gotSPHYGMOMANOMETERCOLUMNS:gotSPHYGMOMANOMETERCOLUMNS, SPHYGMOMANOMETERCOLUMNSPromise:SPHYGMOMANOMETERCOLUMNSPromise, 
  getGlucosemeterColumns:getGlucosemeterColumns, gotGLUCOSEMETERCOLUMNS:gotGLUCOSEMETERCOLUMNS, GLUCOSEMETERCOLUMNSPromise:GLUCOSEMETERCOLUMNSPromise, getThermometerColumns:getThermometerColumns, gotTHERMOMETERCOLUMNS:gotTHERMOMETERCOLUMNS, THERMOMETERCOLUMNSPromise:THERMOMETERCOLUMNSPromise, getOximeterColumns:getOximeterColumns, gotOXIMETERCOLUMNS:gotOXIMETERCOLUMNS, OXIMETERCOLUMNSPromise:OXIMETERCOLUMNSPromise, getFatColumns:getFatColumns, gotFATCOLUMNS:gotFATCOLUMNS, FATCOLUMNSPromise:FATCOLUMNSPromise, 
  getComparisonOps:getComparisonOps, gotCOMPARISONOPS:gotCOMPARISONOPS, COMPARISONOPSPromise:COMPARISONOPSPromise, getLogicalOps:getLogicalOps, gotLOGICALOPS:gotLOGICALOPS, LOGICALOPSPromise:LOGICALOPSPromise, getPeriods:getPeriods, gotPERIODS:gotPERIODS, PERIODSPromise:PERIODSPromise, getUserStatus:getUserStatus, gotUSERSTATUS:gotUSERSTATUS, USERSTATUSPromise:USERSTATUSPromise, getManufactoryStatus:getManufactoryStatus, gotMANUFACTORYSTATUS:gotMANUFACTORYSTATUS, MANUFACTORYSTATUSPromise:MANUFACTORYSTATUSPromise, 
  getTerminalStatus:getTerminalStatus, gotTERMINALSTATUS:gotTERMINALSTATUS, TERMINALSTATUSPromise:TERMINALSTATUSPromise, getDoctorStatus:getDoctorStatus, gotDOCTORSTATUS:gotDOCTORSTATUS, DOCTORSTATUSPromise:DOCTORSTATUSPromise, getHealthConsultationStatus:getHealthConsultationStatus, gotHEALTHCONSULTATIONSTATUS:gotHEALTHCONSULTATIONSTATUS, HEALTHCONSULTATIONSTATUSPromise:HEALTHCONSULTATIONSTATUSPromise, getHealthDataStatus:getHealthDataStatus, gotHEALTHDATASTATUS:gotHEALTHDATASTATUS, HEALTHDATASTATUSPromise:HEALTHDATASTATUSPromise, 
  getHealthFileStatus:getHealthFileStatus, gotHEALTHFILESTATUS:gotHEALTHFILESTATUS, HEALTHFILESTATUSPromise:HEALTHFILESTATUSPromise, getCompanyDepartments:getCompanyDepartments, gotCOMPANYDEPARTMENTS:gotCOMPANYDEPARTMENTS, COMPANYDEPARTMENTSPromise:COMPANYDEPARTMENTSPromise, getCompanyMembers:getCompanyMembers, gotCOMPANYMEMBERS:gotCOMPANYMEMBERS, COMPANYMEMBERSPromise:COMPANYMEMBERSPromise, getCompanyNatures:getCompanyNatures, gotCOMPANYNATURES:gotCOMPANYNATURES, COMPANYNATURESPromise:COMPANYNATURESPromise, 
  getCompanyIndustries:getCompanyIndustries, gotCOMPANYINDUSTRIES:gotCOMPANYINDUSTRIES, COMPANYINDUSTRIESPromise:COMPANYINDUSTRIESPromise, getDepartments:getDepartments, gotDEPARTMENTS:gotDEPARTMENTS, DEPARTMENTSPromise:DEPARTMENTSPromise, getGenders:getGenders, gotGENDERS:gotGENDERS, GENDERSPromise:GENDERSPromise, getUserRoles:getUserRoles, gotUSERROLES:gotUSERROLES, USERROLESPromise:USERROLESPromise, getOperations:getOperations, gotOPERATIONS:gotOPERATIONS, OPERATIONSPromise:OPERATIONSPromise};
  return service;
};
goog.provide("jxsprsec.company_department.Filter.factory");
jxsprsec.company_department.Filter = function(constants) {
  this.gotCOMPANYDEPARTMENTS = constants.gotCOMPANYDEPARTMENTS;
  this.convert = this.convert.bind(this);
};
jxsprsec.company_department.Filter.factory = function(constants) {
  var filter = new jxsprsec.company_department.Filter(constants);
  return filter.convert;
};
jxsprsec.company_department.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var company_departments = this.gotCOMPANYDEPARTMENTS();
    var company_department = company_departments.filter(function(item) {
      return input === item.department_id;
    });
    return company_department.length > 0 ? company_department[0].department_name : "";
  }
};
goog.provide("jxsprsec.company_member.Filter.factory");
jxsprsec.company_member.Filter = function(constants) {
  this.gotCOMPANYMEMBERS = constants.gotCOMPANYMEMBERS;
  this.convert = this.convert.bind(this);
};
jxsprsec.company_member.Filter.factory = function(constants) {
  var filter = new jxsprsec.company_member.Filter(constants);
  return filter.convert;
};
jxsprsec.company_member.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var company_members = this.gotCOMPANYMEMBERS();
    var company_member = company_members.filter(function(item) {
      return input === item.member_id;
    });
    return company_member.length > 0 ? company_member[0].member_name : "";
  }
};
goog.provide("jxsprsec.company_nature.Filter.factory");
jxsprsec.company_nature.Filter = function(constants) {
  this.gotCOMPANYNATURES = constants.gotCOMPANYNATURES;
  this.convert = this.convert.bind(this);
};
jxsprsec.company_nature.Filter.factory = function(constants) {
  var filter = new jxsprsec.company_nature.Filter(constants);
  return filter.convert;
};
jxsprsec.company_nature.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var company_natures = this.gotCOMPANYNATURES();
    var company_nature = company_natures.filter(function(item) {
      return input === item.nature_id;
    });
    return company_nature.length > 0 ? company_nature[0].nature_name : "";
  }
};
goog.provide("jxsprsec.company_industry.Filter.factory");
jxsprsec.company_industry.Filter = function(constants) {
  this.gotCOMPANYINDUSTRIES = constants.gotCOMPANYINDUSTRIES;
  this.convert = this.convert.bind(this);
};
jxsprsec.company_industry.Filter.factory = function(constants) {
  var filter = new jxsprsec.company_industry.Filter(constants);
  return filter.convert;
};
jxsprsec.company_industry.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var company_industries = this.gotCOMPANYINDUSTRIES();
    var company_industry = company_industries.filter(function(item) {
      return input === item.industry_id;
    });
    return company_industry.length > 0 ? company_industry[0].industry_name : "";
  }
};
goog.provide("jxsprsec.dateTounix.Filter.factory");
jxsprsec.dateTounix.Filter = function() {
  this.checkmark = "\u2714";
  this.cross = "\u2718";
  this.convert = this.convert.bind(this);
};
jxsprsec.dateTounix.Filter.factory = function() {
  var filter = new jxsprsec.dateTounix.Filter;
  return filter.convert;
};
jxsprsec.dateTounix.Filter.prototype.convert = function(input) {
  if (!input) {
    return "";
  } else {
    var tmp_datetime = input.toString().replace(/:/g, "-");
    tmp_datetime = tmp_datetime.toString().replace(/ /g, "-");
    var arr = tmp_datetime.split("-");
    var now = new Date(Date.UTC(arr[0], arr[1] - 1, arr[2], arr[3] - 8, arr[4], arr[5]));
    return parseInt(now.getTime() / 1E3);
  }
};
goog.provide("jxsprsec.gender.Filter.factory");
jxsprsec.gender.Filter = function(constants) {
  this.gotGENDERS = constants.gotGENDERS;
  this.convert = this.convert.bind(this);
};
jxsprsec.gender.Filter.factory = function(constants) {
  var filter = new jxsprsec.gender.Filter(constants);
  return filter.convert;
};
jxsprsec.gender.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var genders = this.gotGENDERS();
    var gender = genders.filter(function(item) {
      return input === item.gender_id;
    });
    return gender.length > 0 ? gender[0].gender_name : "";
  }
};
goog.provide("jxsprsec.district.Filter.factory");
jxsprsec.district.Filter = function(constants) {
  this.gotDISTRICTS = constants.gotDISTRICTS;
  this.convert = this.convert.bind(this);
};
jxsprsec.district.Filter.factory = function(constants) {
  var filter = new jxsprsec.district.Filter(constants);
  return filter.convert;
};
jxsprsec.district.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var districts = this.gotDISTRICTS();
    var district = districts.filter(function(item) {
      return input === item.district_id;
    });
    return district.length > 0 ? district[0].district_name : "";
  }
};
goog.provide("jxsprsec.province.Filter.factory");
jxsprsec.province.Filter = function(constants) {
  this.gotPROVINCES = constants.gotPROVINCES;
  this.convert = this.convert.bind(this);
};
jxsprsec.province.Filter.factory = function(constants) {
  var filter = new jxsprsec.province.Filter(constants);
  return filter.convert;
};
jxsprsec.province.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var provinces = this.gotPROVINCES();
    var province = provinces.filter(function(item) {
      return input === item.province_id;
    });
    return province.length > 0 ? province[0].province_name : "";
  }
};
goog.provide("jxsprsec.city.Filter.factory");
jxsprsec.city.Filter = function(constants) {
  this.gotCITIES = constants.gotCITIES;
  this.convert = this.convert.bind(this);
};
jxsprsec.city.Filter.factory = function(constants) {
  var filter = new jxsprsec.city.Filter(constants);
  return filter.convert;
};
jxsprsec.city.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var cities = this.gotCITIES();
    var city = cities.filter(function(item) {
      return input === item.city_id;
    });
    return city.length > 0 ? city[0].city_name : "";
  }
};
goog.provide("jxsprsec.zone.Filter.factory");
jxsprsec.zone.Filter = function(constants) {
  this.gotZONES = constants.gotZONES;
  this.convert = this.convert.bind(this);
};
jxsprsec.zone.Filter.factory = function(constants) {
  var filter = new jxsprsec.zone.Filter(constants);
  return filter.convert;
};
jxsprsec.zone.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var zones = this.gotZONES();
    var zone = zones.filter(function(item) {
      return input === item.zone_id;
    });
    return zone.length > 0 ? zone[0].zone_name : "";
  }
};
goog.provide("jxsprsec.data_type.Filter.factory");
jxsprsec.data_type.Filter = function(constants) {
  this.gotDATATYPES = constants.gotDATATYPES;
  this.convert = this.convert.bind(this);
};
jxsprsec.data_type.Filter.factory = function(constants) {
  var filter = new jxsprsec.data_type.Filter(constants);
  return filter.convert;
};
jxsprsec.data_type.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var data_types = this.gotDATATYPES();
    var data_type = data_types.filter(function(item) {
      return input === item.data_type_id;
    });
    return data_type.length > 0 ? data_type[0].data_type_name : "";
  }
};
goog.provide("jxsprsec.file_type.Filter.factory");
jxsprsec.file_type.Filter = function(constants) {
  this.gotFILETYPES = constants.gotFILETYPES;
  this.convert = this.convert.bind(this);
};
jxsprsec.file_type.Filter.factory = function(constants) {
  var filter = new jxsprsec.file_type.Filter(constants);
  return filter.convert;
};
jxsprsec.file_type.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var file_types = this.gotFILETYPES();
    var file_type = file_types.filter(function(item) {
      return input === item.file_type_id;
    });
    return file_type.length > 0 ? file_type[0].file_type_name : "";
  }
};
goog.provide("jxsprsec.wristband_column.Filter.factory");
jxsprsec.wristband_column.Filter = function(constants) {
  this.checkmark = "\u2714";
  this.cross = "\u2718";
  this.gotWRISTBANDCOLUMNS = constants.gotWRISTBANDCOLUMNS;
  this.convert = this.convert.bind(this);
};
jxsprsec.wristband_column.Filter.factory = function(constants) {
  var filter = new jxsprsec.wristband_column.Filter(constants);
  return filter.convert;
};
jxsprsec.wristband_column.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var wristband_columns = this.gotWRISTBANDCOLUMNS();
    var wristband_column = wristband_columns.filter(function(item) {
      return input === item.column_id;
    });
    return wristband_column.length > 0 ? wristband_column[0].column_name : "";
  }
};
goog.provide("jxsprsec.sphygmomanometer_column.Filter.factory");
jxsprsec.sphygmomanometer_column.Filter = function(constants) {
  this.gotSPHYGMOMANOMETERCOLUMNS = constants.gotSPHYGMOMANOMETERCOLUMNS;
  this.convert = this.convert.bind(this);
};
jxsprsec.sphygmomanometer_column.Filter.factory = function(constants) {
  var filter = new jxsprsec.sphygmomanometer_column.Filter(constants);
  return filter.convert;
};
jxsprsec.sphygmomanometer_column.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var sphygmomanometer_columns = this.gotSPHYGMOMANOMETERCOLUMNS();
    var sphygmomanometer_column = sphygmomanometer_columns.filter(function(item) {
      return input === item.column_id;
    });
    return sphygmomanometer_column.length > 0 ? sphygmomanometer_column[0].column_name : "";
  }
};
goog.provide("jxsprsec.glucosemeter_column.Filter.factory");
jxsprsec.glucosemeter_column.Filter = function(constants) {
  this.gotGLUCOSEMETERCOLUMNS = constants.gotGLUCOSEMETERCOLUMNS;
  this.convert = this.convert.bind(this);
};
jxsprsec.glucosemeter_column.Filter.factory = function(constants) {
  var filter = new jxsprsec.glucosemeter_column.Filter(constants);
  return filter.convert;
};
jxsprsec.glucosemeter_column.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var glucosemeter_columns = this.gotGLUCOSEMETERCOLUMNS();
    var glucosemeter_column = glucosemeter_columns.filter(function(item) {
      return input === item.column_id;
    });
    return glucosemeter_column.length > 0 ? glucosemeter_column[0].column_name : "";
  }
};
goog.provide("jxsprsec.thermometer_column.Filter.factory");
jxsprsec.thermometer_column.Filter = function(constants) {
  this.gotTHERMOMETERCOLUMNS = constants.gotTHERMOMETERCOLUMNS;
  this.convert = this.convert.bind(this);
};
jxsprsec.thermometer_column.Filter.factory = function(constants) {
  var filter = new jxsprsec.thermometer_column.Filter(constants);
  return filter.convert;
};
jxsprsec.thermometer_column.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var thermometer_columns = this.gotTHERMOMETERCOLUMNS();
    var thermometer_column = thermometer_columns.filter(function(item) {
      return input === item.column_id;
    });
    return thermometer_column.length > 0 ? thermometer_column[0].column_name : "";
  }
};
goog.provide("jxsprsec.oximeter_column.Filter.factory");
jxsprsec.oximeter_column.Filter = function(constants) {
  this.gotOXIMETERCOLUMNS = constants.gotOXIMETERCOLUMNS;
  this.convert = this.convert.bind(this);
};
jxsprsec.oximeter_column.Filter.factory = function(constants) {
  var filter = new jxsprsec.oximeter_column.Filter(constants);
  return filter.convert;
};
jxsprsec.oximeter_column.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var oximeter_columns = this.gotOXIMETERCOLUMNS();
    var oximeter_column = oximeter_columns.filter(function(item) {
      return input === item.column_id;
    });
    return oximeter_column.length > 0 ? oximeter_column[0].column_name : "";
  }
};
goog.provide("jxsprsec.fat_column.Filter.factory");
jxsprsec.fat_column.Filter = function(constants) {
  this.gotFATCOLUMNS = constants.gotFATCOLUMNS;
  this.convert = this.convert.bind(this);
};
jxsprsec.fat_column.Filter.factory = function(constants) {
  var filter = new jxsprsec.fat_column.Filter(constants);
  return filter.convert;
};
jxsprsec.fat_column.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var fat_columns = this.gotFATCOLUMNS();
    var fat_column = fat_columns.filter(function(item) {
      return input === item.column_id;
    });
    return fat_column.length > 0 ? fat_column[0].column_name : "";
  }
};
goog.provide("jxsprsec.comparison_ops.Filter.factory");
jxsprsec.comparison_ops.Filter = function(constants) {
  this.gotCOMPARISONOPS = constants.gotCOMPARISONOPS;
  this.convert = this.convert.bind(this);
};
jxsprsec.comparison_ops.Filter.factory = function(constants) {
  var filter = new jxsprsec.comparison_ops.Filter(constants);
  return filter.convert;
};
jxsprsec.comparison_ops.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var comparison_ops = this.gotCOMPARISONOPS();
    var comparison_op = comparison_ops.filter(function(item) {
      return input === item.op_id;
    });
    return comparison_op.length > 0 ? comparison_op[0].op_name : "";
  }
};
goog.provide("jxsprsec.logical_ops.Filter.factory");
jxsprsec.logical_ops.Filter = function(constants) {
  this.gotLOGICALOPS = constants.gotLOGICALOPS;
  this.convert = this.convert.bind(this);
};
jxsprsec.logical_ops.Filter.factory = function(constants) {
  var filter = new jxsprsec.logical_ops.Filter(constants);
  return filter.convert;
};
jxsprsec.logical_ops.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var logical_ops = this.gotLOGICALOPS();
    var logical_op = logical_ops.filter(function(item) {
      return input === item.op_id;
    });
    return logical_op.length > 0 ? logical_op[0].op_name : "";
  }
};
goog.provide("jxsprsec.periods.Filter.factory");
jxsprsec.periods.Filter = function(constants) {
  this.gotPERIODS = constants.gotPERIODS;
  this.convert = this.convert.bind(this);
};
jxsprsec.periods.Filter.factory = function(constants) {
  var filter = new jxsprsec.periods.Filter(constants);
  return filter.convert;
};
jxsprsec.periods.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var periods = this.gotPERIODS();
    var period = periods.filter(function(item) {
      return input === item.period_id;
    });
    return period.length > 0 ? period[0].period_name : "";
  }
};
goog.provide("jxsprsec.helath_consultation_status.Filter.factory");
jxsprsec.helath_consultation_status.Filter = function(constants) {
  this.gotHEALTHCONSULTATIONSTATUS = constants.gotHEALTHCONSULTATIONSTATUS;
  this.convert = this.convert.bind(this);
};
jxsprsec.helath_consultation_status.Filter.factory = function(constants) {
  var filter = new jxsprsec.helath_consultation_status.Filter(constants);
  return filter.convert;
};
jxsprsec.helath_consultation_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var helath_consultation_statuses = this.gotHEALTHCONSULTATIONSTATUS();
    var helath_consultation_status = helath_consultation_statuses.filter(function(item) {
      return input === item.consultation_status_id;
    });
    return helath_consultation_status.length > 0 ? helath_consultation_status[0].consultation_status_name : "";
  }
};
goog.provide("jxsprsec.health_data_status.Filter.factory");
jxsprsec.health_data_status.Filter = function(constants) {
  this.gotHEALTHDATASTATUS = constants.gotHEALTHDATASTATUS;
  this.convert = this.convert.bind(this);
};
jxsprsec.health_data_status.Filter.factory = function(constants) {
  var filter = new jxsprsec.health_data_status.Filter(constants);
  return filter.convert;
};
jxsprsec.health_data_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var health_data_statuses = this.gotHEALTHDATASTATUS();
    var health_data_status = health_data_statuses.filter(function(item) {
      return input === item.data_status_id;
    });
    return health_data_status.length > 0 ? health_data_status[0].data_status_name : "";
  }
};
goog.provide("jxsprsec.health_file_status.Filter.factory");
jxsprsec.health_file_status.Filter = function(constants) {
  this.gotHEALTHFILESTATUS = constants.gotHEALTHFILESTATUS;
  this.convert = this.convert.bind(this);
};
jxsprsec.health_file_status.Filter.factory = function(constants) {
  var filter = new jxsprsec.health_file_status.Filter(constants);
  return filter.convert;
};
jxsprsec.health_file_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var health_file_statuses = this.gotHEALTHFILESTATUS();
    var health_file_status = health_file_statuses.filter(function(item) {
      return input === item.file_status_id;
    });
    return health_file_status.length > 0 ? health_file_status[0].file_status_name : "";
  }
};
goog.provide("jxsprsec.department.Filter.factory");
jxsprsec.department.Filter = function(constants) {
  this.gotDEPARTMENTS = constants.gotDEPARTMENTS;
  this.convert = this.convert.bind(this);
};
jxsprsec.department.Filter.factory = function(constants) {
  var filter = new jxsprsec.department.Filter(constants);
  return filter.convert;
};
jxsprsec.department.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var departments = this.gotDEPARTMENTS();
    var department = departments.filter(function(item) {
      return input === item.department_id;
    });
    return department.length > 0 ? department[0].department_name : "";
  }
};
goog.provide("jxsprsec.operation.Filter.factory");
jxsprsec.operation.Filter = function(constants) {
  this.gotOPERATIONS = constants.gotOPERATIONS;
  this.convert = this.convert.bind(this);
};
jxsprsec.operation.Filter.factory = function(constants) {
  var filter = new jxsprsec.operation.Filter(constants);
  return filter.convert;
};
jxsprsec.operation.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var operations = this.gotOPERATIONS();
    var operation = operations.filter(function(item) {
      return input === item.op_title_id;
    });
    return operation.length > 0 ? operation[0].op_title_name : "";
  }
};
goog.provide("jxsprsec.user_status.Filter.factory");
jxsprsec.user_status.Filter = function(constants) {
  this.gotUSERSTATUS = constants.gotUSERSTATUS;
  this.convert = this.convert.bind(this);
};
jxsprsec.user_status.Filter.factory = function(constants) {
  var filter = new jxsprsec.user_status.Filter(constants);
  return filter.convert;
};
jxsprsec.user_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var user_statuses = this.gotUSERSTATUS();
    var user_status = user_statuses.filter(function(item) {
      return input === item.user_status_id;
    });
    return user_status.length > 0 ? user_status[0].user_status_name : "";
  }
};
goog.provide("jxsprsec.manufactory_status.Filter.factory");
jxsprsec.manufactory_status.Filter = function(constants) {
  this.gotMANUFACTORYSTATUS = constants.gotMANUFACTORYSTATUS;
  this.convert = this.convert.bind(this);
};
jxsprsec.manufactory_status.Filter.factory = function(constants) {
  var filter = new jxsprsec.manufactory_status.Filter(constants);
  return filter.convert;
};
jxsprsec.manufactory_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var manufactory_statuses = this.gotMANUFACTORYSTATUS();
    var manufactory_status = manufactory_statuses.filter(function(item) {
      return input === item.manufactory_status_id;
    });
    return manufactory_status.length > 0 ? manufactory_status[0].manufactory_status_name : "";
  }
};
goog.provide("jxsprsec.terminal_status.Filter.factory");
jxsprsec.terminal_status.Filter = function(constants) {
  this.gotTERMINALSTATUS = constants.gotTERMINALSTATUS;
  this.convert = this.convert.bind(this);
};
jxsprsec.terminal_status.Filter.factory = function(constants) {
  var filter = new jxsprsec.terminal_status.Filter(constants);
  return filter.convert;
};
jxsprsec.terminal_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var terminal_statuses = this.gotTERMINALSTATUS();
    var terminal_status = terminal_statuses.filter(function(item) {
      return input === item.terminal_status_id;
    });
    return terminal_status.length > 0 ? terminal_status[0].terminal_status_name : "";
  }
};
goog.provide("jxsprsec.doctor_status.Filter.factory");
jxsprsec.doctor_status.Filter = function(constants) {
  this.gotDOCTORSTATUS = constants.gotDOCTORSTATUS;
  this.convert = this.convert.bind(this);
};
jxsprsec.doctor_status.Filter.factory = function(constants) {
  var filter = new jxsprsec.doctor_status.Filter(constants);
  return filter.convert;
};
jxsprsec.doctor_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var doctor_statuses = this.gotDOCTORSTATUS();
    var doctor_status = doctor_statuses.filter(function(item) {
      return input === item.doctor_status_id;
    });
    return doctor_status.length > 0 ? doctor_status[0].doctor_status_name : "";
  }
};
goog.provide("jxsprsec.product_type.Filter.factory");
jxsprsec.product_type.Filter = function(constants) {
  this.gotPRODUCTTYPES = constants.gotPRODUCTTYPES;
  this.convert = this.convert.bind(this);
};
jxsprsec.product_type.Filter.factory = function(constants) {
  var filter = new jxsprsec.product_type.Filter(constants);
  return filter.convert;
};
jxsprsec.product_type.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var product_types = this.gotPRODUCTTYPES();
    var product_type = product_types.filter(function(item) {
      return input === item.product_type_id;
    });
    return product_type.length > 0 ? product_type[0].product_type_name : "";
  }
};
goog.provide("jxsprsec.device_type.Filter.factory");
jxsprsec.device_type.Filter = function(constants) {
  this.gotDEVICETYPES = constants.gotDEVICETYPES;
  this.convert = this.convert.bind(this);
};
jxsprsec.device_type.Filter.factory = function(constants) {
  var filter = new jxsprsec.device_type.Filter(constants);
  return filter.convert;
};
jxsprsec.device_type.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var device_types = this.gotDEVICETYPES();
    var device_type = device_types.filter(function(item) {
      return input === item.device_type_id;
    });
    return device_type.length > 0 ? device_type[0].device_type_name : "";
  }
};
goog.provide("jxsprsec.unixTodate.Filter.factory");
jxsprsec.unixTodate.Filter = function() {
  this.checkmark = "\u2714";
  this.cross = "\u2718";
  this.convert = this.convert.bind(this);
};
jxsprsec.unixTodate.Filter.factory = function() {
  var filter = new jxsprsec.unixTodate.Filter;
  return filter.convert;
};
Date.prototype.Format = function(fmt) {
  var o = {"M+":this.getMonth() + 1, "d+":this.getDate(), "h+":this.getHours(), "m+":this.getMinutes(), "s+":this.getSeconds(), "q+":Math.floor((this.getMonth() + 3) / 3), "S":this.getMilliseconds()};
  if (/(y+)/.test(fmt)) {
    fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
  }
  for (var k in o) {
    if ((new RegExp("(" + k + ")")).test(fmt)) {
      fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
    }
  }
  return fmt;
};
jxsprsec.unixTodate.Filter.prototype.convert = function(input) {
  if (!input) {
    return "";
  } else {
    var now = (new Date(parseInt(input) * 1E3)).Format("yyyy-MM-dd hh:mm:ss");
    return now.toLocaleString().replace(/\u5e74|\u6708/g, "-").replace(/\u65e5/g, " ");
  }
};
goog.provide("jxsprsec.user_role.Filter.factory");
jxsprsec.user_role.Filter = function(constants) {
  this.gotUSERROLES = constants.gotUSERROLES;
  this.convert = this.convert.bind(this);
};
jxsprsec.user_role.Filter.factory = function(constants) {
  var filter = new jxsprsec.user_role.Filter(constants);
  return filter.convert;
};
jxsprsec.user_role.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var user_roles = this.gotUSERROLES();
    var user_role = user_roles.filter(function(item) {
      return input === item.user_role_id;
    });
    return user_role.length > 0 ? user_role[0].user_role_name : "";
  }
};
goog.provide("jxsprsec.basic.Service");
jxsprsec.basic.Service.$inject = ["$rootScope", "$http", "$q"];
jxsprsec.basic.Service = function($http, $q, $rootScope) {
  var basic = this;
  basic.signIn = function(rbody) {
    var defer = $q.defer();
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/sign_out", data:rbody};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.fileUpload = function(file) {
    var defer = $q.defer();
    if (file == undefined || file == null || file == "") {
      return null;
    }
    var uploadUrl = $rootScope.endPoint + "/common/uploads";
    var fd = new FormData;
    fd.append("files", file);
    $http.post(uploadUrl, fd, {transformRequest:angular.identity, headers:{"Content-Type":undefined}}).success(function(succ) {
      defer.resolve(succ);
    }).error(function(error) {
      defer.resolve(error);
    });
    return defer.promise;
  };
  basic.signOut = function() {
    var defer = $q.defer();
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/sign_out"};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.getManagerBasics = function() {
    var defer = $q.defer();
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/settings/basic"};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.getNormalManagers = function(manager) {
    var defer = $q.defer();
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/db/normal_managers", params:manager};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.updateNormalManagers = function(mid, manager) {
    var defer = $q.defer();
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/db/normal_managers/" + mid, data:manager};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.change_password = function(password) {
    var defer = $q.defer();
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/settings/password", data:password};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.updateManAvatar = function(avatar_url) {
    var defer = $q.defer();
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/settings/avatar", data:avatar_url};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.getAdminBasics = function() {
    var defer = $q.defer();
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/settings/basic"};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.putAdminBasic = function(admin) {
    var defer = $q.defer();
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/settings/basic", data:admin};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.addManager = function(manager) {
    var defer = $q.defer();
    var req = {method:"POST", url:$rootScope.endPoint + "/admins/db/normal_managers", data:manager};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.updateStatus = function(mid, status) {
    var defer = $q.defer();
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/db/normal_managers/status/" + mid, data:status};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.getManagerPermissions = function(mid) {
    var defer = $q.defer();
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/permissions/normal_managers/" + mid, data:status};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.editManagerPermissions = function(mid, permission) {
    var defer = $q.defer();
    var req = {method:"PUT", url:$rootScope.endPoint + "/admins/permissions/normal_managers/" + mid, data:permission};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.deleteManager = function(mid) {
    var defer = $q.defer();
    var req = {method:"DELETE", url:$rootScope.endPoint + "/admins/db/normal_managers/" + mid};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  return basic;
};
goog.provide("jxsprsec.db_operation.Service");
jxsprsec.db_operation.Service.$inject = ["$rootScope", "$http", "$q"];
jxsprsec.db_operation.Service = function($rootScope, $http, $q) {
  var db_operation = this;
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  function sendRequest(req) {
    return $http(req).then(success).catch(fail);
    function success(response) {
      return response.data.success_message;
    }
    function fail(error) {
      return $q.reject("rejected");
    }
  }
  db_operation.getFiles = function(file) {
    if (file == undefined || file == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/patients/files", data:file};
    return sendRequest(req);
  };
  db_operation.getPatFiles = function(pid, file) {
    if (!validParam(pid)) {
      return null;
    }
    console.log("service");
    console.log(file);
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/files", params:file};
    return sendRequest(req);
  };
  db_operation.getPatWrist = function(pid, wid) {
    if (!validParam(pid) || !validParam(wid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/wristbands/" + wid};
    return sendRequest(req);
  };
  db_operation.putPatWrist = function(pid, wid, patwrist) {
    if (!validParam(pid) || !validParam(wid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/wristbands/" + wid, data:patwrist};
    return sendRequest(req);
  };
  db_operation.getPatSphyg = function(pid, sid) {
    if (!validParam(pid) || !validParam(sid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/sphygmomanometers/" + sid};
    return sendRequest(req);
  };
  db_operation.putPatSphyg = function(pid, sid, patsphy) {
    if (!validParam(pid) || !validParam(sid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/sphygmomanometers/" + sid, data:patsphy};
    return sendRequest(req);
  };
  db_operation.getPatOxi = function(pid, oid) {
    if (!validParam(pid) || !validParam(oid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/oximeters/" + oid};
    return sendRequest(req);
  };
  db_operation.putPatOxi = function(pid, oid, patoxi) {
    if (!validParam(pid) || !validParam(oid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/oximeters/" + oid, data:patoxi};
    return sendRequest(req);
  };
  db_operation.getPatGlucose = function(pid, gid) {
    if (!validParam(pid) || !validParam(gid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/glucosemeters/" + gid};
    return sendRequest(req);
  };
  db_operation.putPatGlucose = function(pid, gid, patglucose) {
    if (!validParam(pid) || !validParam(gid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/glucosemeters/" + gid, data:patglucose};
    return sendRequest(req);
  };
  db_operation.getPatThermome = function(pid, tid) {
    if (!validParam(pid) || !validParam(tid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/thermometers/" + tid};
    return sendRequest(req);
  };
  db_operation.putPatThermome = function(pid, tid, patthermome) {
    if (!validParam(pid) || !validParam(tid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/thermometers/" + tid, data:patthermome};
    return sendRequest(req);
  };
  db_operation.getPatFat = function(pid, fid) {
    if (!validParam(pid) || !validParam(fid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/fats/" + fid};
    return sendRequest(req);
  };
  db_operation.putPatFat = function(pid, fid, patfat) {
    if (!validParam(pid) || !validParam(fid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/fats/" + fid, data:patfat};
    return sendRequest(req);
  };
  return db_operation;
};
goog.provide("jxsprsec.health_con.Service");
jxsprsec.health_con.Service.$inject = ["$rootScope", "$http", "$q"];
jxsprsec.health_con.Service = function($rootScope, $http, $q) {
  var health_con = this;
  function sendRequest(req) {
    return $http(req).then(success).catch(fail);
    function success(response) {
      return response.data.success_message;
    }
    function fail(error) {
      return $q.reject("rejected");
    }
  }
  health_con.dealConsultation = function(consultation) {
    if (consultation == undefined || consultation == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/consultations", data:consultation};
    return sendRequest(req);
  };
  health_con.getQAandReply = function(cid) {
    if (cid == undefined || cid == "") {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/consultations/" + cid};
    return sendRequest(req);
  };
  health_con.sendReply = function(cid, content) {
    if (cid == undefined || cid == "") {
      return null;
    }
    if (content == undefined || content == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/consultations/" + cid, data:content};
    return sendRequest(req);
  };
  return health_con;
};
goog.provide("jxsprsec.health_data.Service");
jxsprsec.health_data.Service.$inject = ["$rootScope", "$http", "$q"];
jxsprsec.health_data.Service = function($rootScope, $http, $q) {
  var health_data = this;
  function sendRequest(req) {
    return $http(req).then(success).catch(fail);
    function success(response) {
      return response.data.success_message;
    }
    function fail(error) {
      console.log(error);
      return $q.reject("rejected");
    }
  }
  health_data.saveWristbands = function(wid, wristband) {
    if (wid == undefined || wid == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/common/measurements/wristbands/" + wid, data:wristband};
    return sendRequest(req);
  };
  health_data.saveSphygmomanometers = function(sid, sphygmomanometer) {
    if (sid == undefined || sid == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/common/measurements/sphygmomanometers/" + sid, data:sphygmomanometer};
    return sendRequest(req);
  };
  health_data.saveOximeters = function(oid, oximeter) {
    if (oid == undefined || oid == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/common/measurements/oximeter/" + oid, data:oximeter};
    return sendRequest(req);
  };
  health_data.saveGlucosemeters = function(gid, glucosemeter) {
    if (gid == undefined || gid == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/common/measurements/glucosemeters/" + gid, data:glucosemeter};
    return sendRequest(req);
  };
  health_data.saveThermometers = function(tid, thermometer) {
    if (tid == undefined || tid == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/common/measurements/thermometers/" + tid, data:thermometer};
    return sendRequest(req);
  };
  health_data.saveFats = function(fid, fat) {
    if (fid == undefined || fid == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/common/measurements/fat/" + fid, data:fat};
    return sendRequest(req);
  };
  health_data.getPermissions = function(permission_list) {
    if (permission_list == undefined || permission_list == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/permissions", data:permission_list};
    return sendRequest(req);
  };
  health_data.getPermissionData = function(pid, page_params) {
    if (pid == undefined || pid == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/permissions/" + pid + "/query", data:page_params};
    return sendRequest(req);
  };
  return health_data;
};
goog.provide("jxsprsec.log_manage.Service");
jxsprsec.log_manage.Service.$inject = ["$rootScope", "$http", "$q"];
jxsprsec.log_manage.Service = function($rootScope, $http, $q) {
  var log_manage = this;
  function sendRequest(req) {
    return $http(req).then(success).catch(fail);
    function success(response) {
      return response.data.success_message;
    }
    function fail(error) {
      return $q.reject("rejected");
    }
  }
  log_manage.getOperationLogs = function(params) {
    if (params == undefined || params == "") {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/admins/users/operation_logs", params:params};
    return sendRequest(req);
  };
  return log_manage;
};
goog.provide("jxsprsec.version.Service");
jxsprsec.version.Service = function() {
  this.version = "0.0.1";
};
jxsprsec.version.Service.prototype.get = function() {
  return this.version;
};
goog.provide("jxsprsec.add_manager_modal.add_manager_modal.Ctrl");
jxsprsec.add_manager_modal.add_manager_modal.Ctrl.$inject = ["$scope", "$modalInstance", "$filter", "$q", "$timeout", "md5", "constants", "basic"];
jxsprsec.add_manager_modal.add_manager_modal.Ctrl = function($scope, $modalInstance, $filter, $q, $timeout, md5, constants, basic) {
  this.label = "some label from custom modal controller";
  $scope.new_manager = {login_name:undefined, password:undefined, confirm_password:undefined, full_name:undefined, avatar_url:undefined, gender:undefined, birthday:undefined, phone:undefined, email:undefined};
  $scope.genders = constants.gotGENDERS();
  $scope.avatarFile = undefined;
  var uploadAdvar = function() {
    if (validParam($scope.avatarFile)) {
      return basic.fileUpload($scope.avatarFile).then(function(res) {
        $scope.new_manager.avatar_url = res.success_message[0];
      }, function(error) {
        alert("\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      });
    }
  };
  $scope.addManager = function() {
    var promise = [uploadAdvar()];
    return $q.all(promise).then(function() {
      if ($scope.new_manager.confirm_password == $scope.new_manager.password) {
        $scope.new_manager.password = md5.createHash($scope.new_manager.password);
      } else {
        $scope.addAlert("danger", "\u4e24\u6b21\u5bc6\u7801\u4e0d\u4e00\u81f4\uff01");
        return;
      }
      $scope.new_manager.birthday = $filter("date")($scope.new_manager.birthday, "yyyy-MM-dd");
      delete $scope.new_manager.confirm_password;
      return basic.addManager($scope.new_manager).then(function(data) {
        if (validParam(data.success_message.administrator_id)) {
          $scope.addAlert("success", "\u65b0\u5efa\u7ba1\u7406\u5458\u6210\u529f\uff01");
          $timeout(function() {
            $scope.cancel();
          }, 6E3);
        } else {
          $scope.addAlert("danger", "\u65b0\u5efa\u7ba1\u7406\u5458\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
        }
      }, function(error) {
        console.log(error);
        $scope.addAlert("danger", "\u65b0\u5efa\u7ba1\u7406\u5458\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      });
    });
  };
  $scope.filled = false;
  $scope.isFilled = function() {
    if (validParam($scope.new_manager.password)) {
      $scope.filled = true;
    } else {
      $scope.filled = false;
    }
  };
  $scope.confirmSuccess = false;
  $scope.confirmPWD = function() {
    if ($scope.new_manager.password == $scope.new_manager.confirm_password) {
      $scope.confirmSuccess = true;
    } else {
      $scope.confirmSuccess = false;
    }
  };
  $scope.maxDate = new Date;
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.opened = false;
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  function validParam(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  }
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxsprsec.modify_manager_modal.modify_manager_modal.Ctrl");
jxsprsec.modify_manager_modal.modify_manager_modal.Ctrl.$inject = ["$scope", "$modalInstance", "$filter", "$q", "$timeout", "md5", "entity", "constants", "basic"];
jxsprsec.modify_manager_modal.modify_manager_modal.Ctrl = function($scope, $modalInstance, $filter, $q, $timeout, md5, entity, constants, basic) {
  this.label = "some label from custom modal controller";
  $scope.entity = entity;
  $scope.genders = constants.gotGENDERS();
  $scope.avatarFile = undefined;
  $scope.new_password = undefined;
  var uploadAdvar = function() {
    if (validParam($scope.avatarFile)) {
      return basic.fileUpload($scope.avatarFile).then(function(res) {
        $scope.entity.avatar_url = res.success_message[0];
      }, function(error) {
        alert("\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      });
    }
  };
  $scope.updateManager = function() {
    var promise = [uploadAdvar()];
    return $q.all(promise).then(function() {
      if (validParam($scope.new_password)) {
        $scope.entity.password = md5.createHash($scope.new_password);
      } else {
        $scope.entity.password = undefined;
      }
      $scope.entity.birthday = $filter("date")($scope.entity.birthday, "yyyy-MM-dd");
      return basic.updateNormalManagers($scope.entity.administrator_id, $scope.entity).then(function(data) {
        if (validParam(data.success_message)) {
          $scope.addAlert("success", "\u4fee\u6539\u6210\u529f\uff01");
          $timeout(function() {
            $scope.cancel();
          }, 6E3);
        } else {
          $scope.addAlert("danger", "\u4fee\u6539\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
        }
      }, function(error) {
        console.log(error);
        $scope.addAlert("danger", "\u4fee\u6539\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      });
    });
  };
  $scope.maxDate = new Date;
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.opened = false;
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  function validParam(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  }
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxsprsec.setRight_manager_modal.setRight_manager_modal.Ctrl");
jxsprsec.setRight_manager_modal.setRight_manager_modal.Ctrl.$inject = ["$scope", "$modalInstance", "$timeout", "entity", "constants", "basic"];
jxsprsec.setRight_manager_modal.setRight_manager_modal.Ctrl = function($scope, $modalInstance, $timeout, entity, constants, basic) {
  this.label = "some label from custom modal controller";
  $scope.district_list = constants.gotDISTRICTS();
  $scope.province_list = constants.gotPROVINCES();
  $scope.city_list = constants.gotCITIES();
  $scope.zone_list = constants.gotZONES();
  $scope.deviceTypes = constants.gotDEVICETYPES();
  $scope.manPermission = {};
  var getManagerPermissions = function(mid) {
    return basic.getManagerPermissions(mid).then(function(data) {
      $scope.manPermission = data.success_message;
      console.log(data);
      $scope.changeDistrict($scope.manPermission.district.district_id, 1);
      $scope.changeProvince($scope.manPermission.district.province_id, 1);
      $scope.changeCity($scope.manPermission.district.city_id, 1);
    });
  };
  getManagerPermissions(entity.administrator_id);
  $scope.changeDistrict = function(district_id, first) {
    if (validParam($scope.province_list)) {
      $scope.province_select_list = [];
      if (first != 1) {
        $scope.manPermission.district.province_id = undefined;
        $scope.manPermission.district.city_id = undefined;
        $scope.manPermission.district.zone_id = undefined;
        $scope.province_select_list = [];
        $scope.city_select_list = [];
        $scope.zone_select_list = [];
      }
      for (var i = 0;i < $scope.province_list.length;i++) {
        if ($scope.province_list[i].district_id == district_id) {
          $scope.province_select_list.push($scope.province_list[i]);
        }
      }
    }
  };
  $scope.changeProvince = function(province_id, first) {
    if (validParam($scope.city_list)) {
      $scope.city_select_list = [];
      if (first != 1) {
        $scope.manPermission.district.city_id = undefined;
        $scope.manPermission.district.zone_id = undefined;
        $scope.city_select_list = [];
        $scope.zone_select_list = [];
      }
      for (var i = 0;i < $scope.city_list.length;i++) {
        if ($scope.city_list[i].province_id == province_id) {
          $scope.city_select_list.push($scope.city_list[i]);
        }
      }
    }
  };
  $scope.changeCity = function(city_id, first) {
    if (validParam($scope.zone_list)) {
      $scope.zone_select_list = [];
      if (first != 1) {
        $scope.manPermission.district.zone_id = undefined;
        $scope.zone_select_list = [];
      }
      for (var i = 0;i < $scope.zone_list.length;i++) {
        if ($scope.zone_list[i].city_id == city_id) {
          $scope.zone_select_list.push($scope.zone_list[i]);
        }
      }
    }
  };
  $scope.editManagerPermission = function() {
    if (validParam($scope.manPermission)) {
      basic.editManagerPermissions(entity.administrator_id, $scope.manPermission).then(function(data) {
        if (validParam(data.success_message)) {
          $scope.addAlert("success", "\u7f16\u8f91\u7ba1\u7406\u5458\u6743\u9650\u6210\u529f\uff01");
          $timeout(function() {
            $scope.cancel();
          }, 6E3);
        } else {
          $scope.addAlert("danger", "\u7f16\u8f91\u7ba1\u7406\u5458\u6743\u9650\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
        }
      }, function(error) {
        $scope.addAlert("danger", "\u7f16\u8f91\u7ba1\u7406\u5458\u6743\u9650\u51fa\u9519\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      });
    }
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  function validParam(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  }
};
goog.provide("jxsprsec.main.db_operation.module");
goog.require("jxsprsec.main.db_operation.Ctrl");
goog.require("jxsprsec.add_manager_modal.add_manager_modal.Ctrl");
goog.require("jxsprsec.modify_manager_modal.modify_manager_modal.Ctrl");
goog.require("jxsprsec.setRight_manager_modal.setRight_manager_modal.Ctrl");
jxsprsec.main.db_operation.module = angular.module("main.db_operation", ["ui.router", "ui.grid", "ui.grid.pinning", "ui.grid.resizeColumns", "ui.grid.saveState", "ui.grid.edit", "ui.grid.pagination", "ui.select", "ui.bootstrap", "ngSanitize", "angularModalService", "angular-md5"]);
jxsprsec.main.db_operation.module.configuration = function($stateProvider) {
  $stateProvider.state("main.db_operation", {url:"/db_operation", templateUrl:"states/main/db_operation/db_operation.html", controller:"DbOperationCtrl as dbOperation", resolve:{"GENDERSPromise":function(constants) {
    return constants.GENDERSPromise;
  }, "DISTRICTSPromise":function(constants) {
    return constants.DISTRICTSPromise;
  }, "PROVINCESPromise":function(constants) {
    return constants.PROVINCESPromise;
  }, "CITIESPromise":function(constants) {
    return constants.CITIESPromise;
  }, "ZONESPromise":function(constants) {
    return constants.ZONESPromise;
  }, "DEVICETYPESPromise":function(constants) {
    return constants.DEVICETYPESPromise;
  }}});
};
jxsprsec.main.db_operation.module.config(jxsprsec.main.db_operation.module.configuration).controller("DbOperationCtrl", jxsprsec.main.db_operation.Ctrl).controller("AddManagerModalCtrl", jxsprsec.add_manager_modal.add_manager_modal.Ctrl).controller("ModifyManagerModalCtrl", jxsprsec.modify_manager_modal.modify_manager_modal.Ctrl).controller("SetRightManagerModalCtrl", jxsprsec.setRight_manager_modal.setRight_manager_modal.Ctrl);
goog.provide("jxsprsec.main.module");
goog.require("jxsprsec.main.db_operation.module");
goog.require("jxsprsec.main.user_center.module");
goog.require("jxsprsec.main.log_manage.module");
goog.require("jxsprsec.main.Ctrl");
jxsprsec.main.module = angular.module("main", ["ui.router", "ui.navbar", jxsprsec.main.db_operation.module.name, jxsprsec.main.user_center.module.name, jxsprsec.main.log_manage.module.name]);
jxsprsec.main.module.configuration = function($stateProvider) {
  $stateProvider.state("main", {url:"/main", templateUrl:"states/main/main.html", controller:"MainCtrl as main"});
};
jxsprsec.main.module.config(jxsprsec.main.module.configuration).controller("MainCtrl", jxsprsec.main.Ctrl);
goog.require("jxsprsec.main.module");
goog.require("jxsprsec.version.Directive.factory");
goog.require("jxsprsec.fileModel.Directive.factory");
goog.require("jxsprsec.version.Service");
goog.require("jxsprsec.district.Filter.factory");
goog.require("jxsprsec.province.Filter.factory");
goog.require("jxsprsec.city.Filter.factory");
goog.require("jxsprsec.zone.Filter.factory");
goog.require("jxsprsec.product_type.Filter.factory");
goog.require("jxsprsec.device_type.Filter.factory");
goog.require("jxsprsec.data_type.Filter.factory");
goog.require("jxsprsec.file_type.Filter.factory");
goog.require("jxsprsec.wristband_column.Filter.factory");
goog.require("jxsprsec.sphygmomanometer_column.Filter.factory");
goog.require("jxsprsec.glucosemeter_column.Filter.factory");
goog.require("jxsprsec.thermometer_column.Filter.factory");
goog.require("jxsprsec.oximeter_column.Filter.factory");
goog.require("jxsprsec.fat_column.Filter.factory");
goog.require("jxsprsec.comparison_ops.Filter.factory");
goog.require("jxsprsec.logical_ops.Filter.factory");
goog.require("jxsprsec.periods.Filter.factory");
goog.require("jxsprsec.user_status.Filter.factory");
goog.require("jxsprsec.manufactory_status.Filter.factory");
goog.require("jxsprsec.terminal_status.Filter.factory");
goog.require("jxsprsec.doctor_status.Filter.factory");
goog.require("jxsprsec.helath_consultation_status.Filter.factory");
goog.require("jxsprsec.health_data_status.Filter.factory");
goog.require("jxsprsec.health_file_status.Filter.factory");
goog.require("jxsprsec.company_department.Filter.factory");
goog.require("jxsprsec.company_member.Filter.factory");
goog.require("jxsprsec.company_nature.Filter.factory");
goog.require("jxsprsec.company_industry.Filter.factory");
goog.require("jxsprsec.department.Filter.factory");
goog.require("jxsprsec.gender.Filter.factory");
goog.require("jxsprsec.user_role.Filter.factory");
goog.require("jxsprsec.operation.Filter.factory");
goog.require("jxsprsec.unixTodate.Filter.factory");
goog.require("jxsprsec.dateTounix.Filter.factory");
goog.require("jxsprsec.basic.Service");
goog.require("jxsprsec.constants.Factory");
goog.require("jxsprsec.health_con.Service");
goog.require("jxsprsec.health_data.Service");
goog.require("jxsprsec.db_operation.Service");
goog.require("jxsprsec.log_manage.Service");
function config($stateProvider, $urlRouterProvider, $locationProvider, $httpProvider) {
  $urlRouterProvider.otherwise("/main/db_operation");
  $httpProvider.defaults.withCredentials = true;
  if (!$httpProvider.defaults.headers.get) {
    $httpProvider.defaults.headers.get = {};
  }
  $httpProvider.defaults.headers.get["If-Modified-Since"] = "Mon, 26 Jul 1997 05:00:00 GMT";
  $httpProvider.defaults.headers.get["Cache-Control"] = "no-cache";
  $httpProvider.defaults.headers.get["Pragma"] = "no-cache";
  $httpProvider.interceptors.push(function($q, $window) {
    return {response:function(response) {
      return response;
    }, responseError:function(response) {
      if (response.status === 401) {
        $window.location.href = "/super/open";
      }
      if (response.status === 403) {
        if (response.data.role === "super") {
          alert("\u60a8\u65e0\u64cd\u4f5c\u6743\u9650\uff01");
        } else {
          $window.location.href = "/super/open";
        }
      }
      return $q.reject(response);
    }};
  });
}
var onChangeConfig = ["$rootScope", "$state", function($rootScope, $state) {
  $rootScope.$on("$stateChangeStart", function(event, toState) {
    if (toState.name === "main") {
      event.preventDefault();
      $state.go("main.db_operation", {});
    } else {
      if (toState.name === "main.user_center") {
        event.preventDefault();
        $state.go("main.user_center.basics", {});
      }
    }
  });
}];
var endPointConfig = ["$rootScope", function($rootScope, $state) {
  $rootScope.endPoint = "";
}];
angular.module("app", ["ui.router", "ngResource", jxsprsec.main.module.name]).config(config).run(onChangeConfig).run(endPointConfig).directive("version", jxsprsec.version.Directive.factory).directive("fileModel", jxsprsec.fileModel.Directive.factory).service("version", jxsprsec.version.Service).filter("mapDistrict", jxsprsec.district.Filter.factory).filter("mapProvince", jxsprsec.province.Filter.factory).filter("mapCity", jxsprsec.city.Filter.factory).filter("mapZone", jxsprsec.zone.Filter.factory).filter("mapProductType", 
jxsprsec.product_type.Filter.factory).filter("mapDeviceType", jxsprsec.device_type.Filter.factory).filter("mapDataType", jxsprsec.data_type.Filter.factory).filter("mapFileType", jxsprsec.file_type.Filter.factory).filter("mapWristbandColumn", jxsprsec.wristband_column.Filter.factory).filter("mapSphygmomanometerColumn", jxsprsec.sphygmomanometer_column.Filter.factory).filter("mapGlucosemeterColumn", jxsprsec.glucosemeter_column.Filter.factory).filter("mapThermometerColumn", jxsprsec.thermometer_column.Filter.factory).filter("mapOximeterColumn", 
jxsprsec.oximeter_column.Filter.factory).filter("mapFatColumn", jxsprsec.fat_column.Filter.factory).filter("mapComparisonOps", jxsprsec.comparison_ops.Filter.factory).filter("mapLogicalOps", jxsprsec.logical_ops.Filter.factory).filter("mapPeriods", jxsprsec.periods.Filter.factory).filter("mapUserStatus", jxsprsec.user_status.Filter.factory).filter("mapManufactoryStatus", jxsprsec.manufactory_status.Filter.factory).filter("mapTerminalStatus", jxsprsec.terminal_status.Filter.factory).filter("mapDoctorStatus", 
jxsprsec.doctor_status.Filter.factory).filter("mapHelathConsultationStatus", jxsprsec.helath_consultation_status.Filter.factory).filter("mapHalthDataStatus", jxsprsec.health_data_status.Filter.factory).filter("mapHealthFileStatus", jxsprsec.health_file_status.Filter.factory).filter("mapCompanyDepartment", jxsprsec.company_department.Filter.factory).filter("mapCompanyMember", jxsprsec.company_member.Filter.factory).filter("mapCompanyNature", jxsprsec.company_nature.Filter.factory).filter("mapCompanyIndustry", 
jxsprsec.company_industry.Filter.factory).filter("mapDepartment", jxsprsec.department.Filter.factory).filter("mapGender", jxsprsec.gender.Filter.factory).filter("mapUserRole", jxsprsec.user_role.Filter.factory).filter("mapOperation", jxsprsec.operation.Filter.factory).filter("unixTodate", jxsprsec.unixTodate.Filter.factory).filter("dateTounix", jxsprsec.dateTounix.Filter.factory).service("basic", jxsprsec.basic.Service).service("health_con", jxsprsec.health_con.Service).factory("constants", jxsprsec.constants.Factory).service("health_data", 
jxsprsec.health_data.Service).service("db_operation", jxsprsec.db_operation.Service).service("log_manage", jxsprsec.log_manage.Service);

