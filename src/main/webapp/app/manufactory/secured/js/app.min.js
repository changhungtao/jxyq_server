'use strict';var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return !goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('<script type="text/javascript" src="' + src + '"></' + "script>");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return !!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return (fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return +new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ = 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("jxmnfsec.main.category_template.Ctrl");
jxmnfsec.main.category_template.Ctrl.$inject = ["$scope", "$http", "i18nService", "$q", "constants", "db_operation"];
jxmnfsec.main.category_template.Ctrl = function($scope, $http, i18nService, $q, constants, $modal, db_operation) {
  this.label = "some other label from main.category_template controller";
  var ctrl = this;
  i18nService.setCurrentLang("zh-CN");
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"device_type_id", name:"\u8bbe\u5907\u7c7b\u578b", width:"25%", pinnedLeft:true, cellFilter:"mapDeviceType"}, {field:"terminal_catagory_name", name:"\u7ec8\u7aef\u578b\u53f7", width:"25%"}, {field:"template_type", name:"\u6a21\u677f\u7c7b\u578b", width:"25%", cellFilter:"mapTemplateType"}, {name:"\u64cd\u4f5c", width:"25%", cellTemplate:'<div class="row"><div class="col-md-offset-2 col-md-2 text-center"><button class="btn btn-primary btn-sm" style="width:120px" ng-click="grid.appScope.popup(row.entity)" >\u7f16\u8f91</button></div></div>'}], 
  onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.dbOperation.current_page = newPage - 1;
      $scope.dbOperation.page_size = pageSize;
      $scope.getTerminalList();
    });
  }};
  $scope.dbOperation = {device_type_id:undefined, terminal_catagory_name:undefined, page_size:10, current_page:0, query_date:undefined};
  $scope.device_types = constants.gotDEVICETYPES();
  $scope.getTerminalList = function() {
    db_operation.getTerminalCatagory($scope.dbOperation).then(function(res) {
      console.log(res);
      $scope.gridOptions.data = res.terminals;
      $scope.gridOptions.totalItems = res.total_count;
      $scope.dbOperation.query_date = res.query_date;
    }, function(error) {
      console.log(error);
    });
  };
  $scope.getTerminalList();
  var refreshdbOperation = {device_type_id:$scope.dbOperation.device_type_id, terminal_catagory_name:$scope.dbOperation.terminal_catagory_name, page_size:10, current_page:0, query_date:undefined};
  var refresh = function() {
    db_operation.getTerminalCatagory(refreshdbOperation).then(function(res) {
      console.log(res);
      $scope.gridOptions.data = res.terminals;
      $scope.gridOptions.totalItems = res.total_count;
      $scope.dbOperation.query_date = res.query_date;
    }, function(error) {
      console.log(error);
    });
  };
  $scope.popup = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/show_cs_template_modal/show_cs_template_modal.html", controller:"ShowCSTemplateModalCtrl", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
      console.log("Modal closed at: " + new Date);
    }, function() {
      refresh();
      console.log("Modal dismissed at: " + new Date);
    });
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  $scope.validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
};
jxmnfsec.main.category_template.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxmnfsec.main.db_operation.Ctrl");
jxmnfsec.main.db_operation.Ctrl.$inject = ["$scope", "$http", "$q", "i18nService", "constants", "db_operation"];
jxmnfsec.main.db_operation.Ctrl = function($scope, $http, $q, i18nService, constants, db_operation) {
  var ctrl = this;
  ctrl.label = "some label from db operation controller";
  var NAME_STATUS = "NAME_STATUS";
  var TYPE_STATUS = "TYPE_STATUS";
  $scope.searchStatus = NAME_STATUS;
  i18nService.setCurrentLang("zh-CN");
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"device_type_id", name:"\u8bbe\u5907\u7c7b\u578b", width:"25%", pinnedLeft:true, cellFilter:"mapDeviceType"}, {field:"terminal_catagory_name", name:"\u7ec8\u7aef\u578b\u53f7", width:"25%"}, {field:"terminal_name", name:"\u7ec8\u7aef\u540d\u79f0", width:"25%"}, {field:"activated_at", name:"\u6fc0\u6d3b\u65f6\u95f4", width:"25%", cellFilter:"unixTodate"}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      if ($scope.searchStatus == NAME_STATUS) {
        $scope.terminalSearchNameData.current_page = newPage - 1;
        $scope.terminalSearchNameData.page_size = pageSize;
        $scope.getTerminalsByName();
      } else {
        $scope.terminalSearchTypeData.current_page = newPage - 1;
        $scope.terminalSearchTypeData.page_size = pageSize;
        $scope.getTerminalsByType();
      }
    });
  }};
  $scope.terminalSearchNameData = {name:"", page_size:10, current_page:0, query_date:undefined};
  $scope.terminalSearchTypeData = {device_type_ids:undefined, status:undefined, page_size:10, current_page:0, query_date:undefined};
  $scope.terminal = {terminal_id:"", terminal_name:"", terminal_catagory_id:"", terminal_catagory_name:"", device_type_id:"", activated_at:"", status:""};
  $scope.device_types = constants.gotDEVICETYPES();
  $scope.terminal_states = constants.gotTERMINALSTATUS();
  $scope.changeStatus = function(entity) {
    entity.status = entity.status == 1 ? 2 : 1;
    var reqData = {status:""};
    reqData.status = entity.status;
    console.log(entity);
    db_operation.putTerminal(entity.terminal_id, reqData).then(function(data) {
    });
  };
  $scope.getTerminalsByName = function() {
    console.log($scope.terminalSearchNameData);
    db_operation.getSeachedTerminals($scope.terminalSearchNameData).then(function(res) {
      console.log(res);
      $scope.searchStatus = NAME_STATUS;
      $scope.gridOptions.data = res.terminals;
      $scope.terminalSearchNameData.query_date = res.query_date;
      $scope.gridOptions.totalItems = res.total_count;
    });
  };
  $scope.regetTerminalsByName = function() {
    $scope.terminalSearchNameData.current_page = 0;
    $scope.terminalSearchNameData.page_size = 10;
    $scope.gridOptions.paginationCurrentPage = 1;
    $scope.getTerminalsByName();
  };
  $scope.getTerminalsByType = function() {
    console.log($scope.terminalSearchTypeData);
    db_operation.getTerminalsByType($scope.terminalSearchTypeData).then(function(res) {
      console.log(res);
      $scope.searchStatus = TYPE_STATUS;
      $scope.gridOptions.data = res.terminals;
      $scope.terminalSearchTypeData.query_date = res.query_date;
      $scope.gridOptions.totalItems = res.total_count;
    });
  };
  $scope.regetTerminalsByType = function() {
    $scope.terminalSearchTypeData.current_page = 0;
    $scope.terminalSearchTypeData.page_size = 10;
    $scope.gridOptions.paginationCurrentPage = 1;
    $scope.getTerminalsByType();
  };
  $scope.activate = function() {
    var promises = [$scope.getTerminalsByName()];
    return $q.all(promises).then(function() {
    });
  };
  $scope.activate();
};
jxmnfsec.main.db_operation.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxmnfsec.main.db_operation.module");
goog.require("jxmnfsec.main.db_operation.Ctrl");
jxmnfsec.main.db_operation.module = angular.module("main.db_operation", ["ui.router", "ui.grid", "ui.grid.pinning", "ui.grid.resizeColumns", "ui.grid.saveState", "ui.grid.edit", "ui.grid.pagination", "ui.select", "ui.bootstrap", "ngSanitize"]);
jxmnfsec.main.db_operation.module.configuration = function($stateProvider) {
  $stateProvider.state("main.db_operation", {url:"/db_operation", templateUrl:"states/main/db_operation/db_operation.html", controller:"DbOperationCtrl as dbOperation", resolve:{"DEVICETYPESPromise":function(constants) {
    return constants.DEVICETYPESPromise;
  }, "TERMINALSTATUSPromise":function(constants) {
    return constants.TERMINALSTATUSPromise;
  }}});
};
jxmnfsec.main.db_operation.module.config(jxmnfsec.main.db_operation.module.configuration).controller("DbOperationCtrl", jxmnfsec.main.db_operation.Ctrl);
goog.provide("jxmnfsec.main.health_data.Ctrl");
jxmnfsec.main.health_data.Ctrl.$inject = ["$scope", "constants", "i18nService", "db_operation"];
jxmnfsec.main.health_data.Ctrl = function($scope, constants, i18nService, db_operation) {
  this.label = "some label from health data controller";
  $scope.dataTypes = constants.gotDATATYPES();
  var numArry = function(count) {
    var nums = [];
    for (var i = 1;i <= count;i++) {
      nums.push(i);
    }
    return nums;
  };
  $scope.ages = numArry(120);
  $scope.healthDataOptions = {data_type_id:1, terminal_catagory_name:undefined, terminal_name:undefined, user_phone:undefined, begin_age:1, end_age:60, page_size:10, current_page:0, query_date:undefined};
  $scope.displayOptions = {all:true, others:false};
  i18nService.setCurrentLang("zh-CN");
  var allColumns = [{field:"data_type_id", name:"\u6570\u636e\u7c7b\u578b", width:"8%", cellFilter:"mapDataType", pinnedLeft:true}, {field:"user_name", name:"\u7528\u6237\u540d\u79f0", width:"8%", pinnedLeft:true}, {field:"phone", name:"\u7528\u6237\u624b\u673a", width:"8%", pinnedLeft:true}, {field:"nick_name", name:"\u7528\u6237\u6635\u79f0", width:"8%", pinnedLeft:true}, {field:"terminal_catagory_name", name:"\u7ec8\u7aef\u578b\u53f7\u540d\u79f0", width:"10%"}, {field:"terminal_name", name:"\u7ec8\u7aef\u540d\u79f0", 
  width:"15%"}, {field:"user_age", name:"\u7528\u6237\u5e74\u9f84", width:"10%"}, {field:"measured_at", name:"\u6d4b\u91cf\u65f6\u95f4", width:"15%", pinnedLeft:true, cellFilter:"unixTodate"}];
  var wristband = [{field:"step_count", name:"\u6b65\u6570", width:"10%"}, {field:"walk_count", name:"\u884c\u8d70\u6b65\u6570", width:"8%"}, {field:"run_count", name:"\u8dd1\u6b65\u6b65\u6570", width:"8%"}, {field:"distance", name:"\u8ddd\u79bb", width:"5%"}, {field:"walk_distance", name:"\u884c\u8d70\u8ddd\u79bb", width:"8%"}, {field:"run_distance", name:"\u8dd1\u6b65\u8ddd\u79bb", width:"8%"}, {field:"calories", name:"\u6d88\u8017\u80fd\u91cf", width:"8%"}, {field:"walk_calories", name:"\u884c\u8d70\u6d88\u8017\u80fd\u91cf", 
  width:"10%"}, {field:"run_calories", name:"\u8dd1\u6b65\u6d88\u8017\u80fd\u91cf", width:"10%"}, {field:"deep_duration", name:"\u6df1\u7761\u65f6\u95f4", width:"10%"}, {field:"shallow_duration", name:"\u6d45\u7761\u65f6\u95f4", width:"10%"}, {field:"heart_rate", name:"\u5fc3\u7387", width:"10%"}, {field:"status", name:"\u8bc4\u6d4b\u72b6\u6001", width:"10%", cellFilter:"mapHalthDataStatus"}, {field:"proposal", name:"\u533b\u751f\u5efa\u8bae", width:"10%"}];
  var sphygmomanometer = [{field:"systolic_pressure", name:"\u6536\u7f29\u538b", width:"10%"}, {field:"diastolic_pressure", name:"\u8212\u5f20\u538b", width:"10%"}, {field:"heart_rate", name:"\u5fc3\u7387", width:"10%"}, {field:"status", name:"\u8bc4\u6d4b\u72b6\u6001", width:"10%", cellFilter:"mapHalthDataStatus"}, {field:"proposal", name:"\u533b\u751f\u5efa\u8bae", width:"10%"}];
  var oximeter = [{field:"oximeter_value", name:"\u8840\u6c27\u503c", width:"10%"}, {field:"status", name:"\u8bc4\u6d4b\u72b6\u6001", width:"10%", cellFilter:"mapHalthDataStatus"}, {field:"proposal", name:"\u533b\u751f\u5efa\u8bae", width:"10%"}];
  var glucosemeter = [{field:"period", name:"\u6d4b\u91cf\u65f6\u95f4\u6bb5", width:"10%", cellFilter:"mapPeriods"}, {field:"glucosemeter_value", name:"\u8840\u7cd6\u503c", width:"10%"}, {field:"status", name:"\u8bc4\u6d4b\u72b6\u6001", width:"10%", cellFilter:"mapHalthDataStatus"}, {field:"proposal", name:"\u533b\u751f\u5efa\u8bae", width:"10%"}];
  var thermometer = [{field:"thermometer_value", name:"\u4f53\u6e29", width:"10%"}, {field:"status", name:"\u8bc4\u6d4b\u72b6\u6001", width:"10%", cellFilter:"mapHalthDataStatus"}, {field:"proposal", name:"\u533b\u751f\u5efa\u8bae", width:"10%"}];
  var fat = [{field:"bmi_value", name:"BMI", width:"15%"}, {field:"weight_value", name:"\u4f53\u91cd", width:"10%"}, {field:"fat_value", name:"\u8102\u80aa\u542b\u91cf", width:"10%"}, {field:"calorie_value", name:"\u5361\u8def\u91cc", width:"10%"}, {field:"moisture_value", name:"\u6c34\u5206\u542b\u91cf", width:"10%"}, {field:"muscle_value", name:"\u808c\u8089\u542b\u91cf", width:"10%"}, {field:"visceral_fat_value", name:"\u5185\u810f\u8102\u80aa\u542b\u91cf", width:"10%"}, {field:"bone_value", name:"\u9aa8\u9abc", 
  width:"10%"}, {field:"status", name:"\u8bc4\u6d4b\u72b6\u6001", width:"10%", cellFilter:"mapHalthDataStatus"}, {field:"proposal", name:"\u533b\u751f\u5efa\u8bae", width:"10%"}];
  var unionArry = function(arry) {
    if ($scope.validParam(arry)) {
      for (var i = 0;i < arry.length;i++) {
        allColumns.push(arry[i]);
      }
    }
  };
  var unionColumns = function(type) {
    allColumns.splice(8);
    switch(type) {
      case 1:
        unionArry(wristband);
        return allColumns;
        break;
      case 2:
        unionArry(sphygmomanometer);
        return allColumns;
        break;
      case 3:
        unionArry(oximeter);
        return allColumns;
        break;
      case 4:
        unionArry(glucosemeter);
        return allColumns;
        break;
      case 5:
        unionArry(thermometer);
        return allColumns;
        break;
      case 6:
        unionArry(fat);
        return allColumns;
        break;
    }
  };
  $scope.queryHealthDatas = function() {
    if ($scope.validParam($scope.healthDataOptions) && $scope.displayOptions.all) {
      db_operation.getHealthDatas($scope.healthDataOptions).then(function(res) {
        $scope.gridOptions.data = res.health_data_list;
        $scope.gridOptions.totalItems = res.total_count;
        $scope.healthDataOptions.query_date = res.query_date;
      }, function(error) {
        console.log(error);
      });
    }
  };
  $scope.dataTypeChanged = function() {
    allColumns.splice(8);
    $scope.displayOptions.all = true;
    $scope.displayOptions.others = false;
    unionColumns($scope.healthDataOptions.data_type_id);
    $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:allColumns, onRegisterApi:function(gridApi) {
      $scope.gridApi = gridApi;
      $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
      });
      gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
        $scope.healthDataOptions.current_page = newPage - 1;
        $scope.healthDataOptions.page_size = pageSize;
        $scope.queryHealthDatas();
      });
    }};
    $scope.gridOptions.data = [];
    $scope.queryHealthDatas();
  };
  $scope.dataTypeChanged();
  $scope.queryHealthDatas();
  $scope.displayOthers = function() {
    $scope.healthDataOptions.data_type_id = undefined;
    $scope.displayOptions.all = false;
    $scope.displayOptions.others = true;
    $scope.gridOptions_wristband = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:angular.copy(unionColumns(1)), onRegisterApi:function(gridApi) {
      $scope.gridApi = gridApi;
      $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
      });
      gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
        $scope.healthDataOptions.current_page = newPage - 1;
        $scope.healthDataOptions.page_size = pageSize;
        queryOthers(1, $scope.gridOptions_wristband);
      });
    }};
    $scope.gridOptions_sphygmomanometer = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:angular.copy(unionColumns(2)), onRegisterApi:function(gridApi) {
      $scope.gridApi = gridApi;
      $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
      });
      gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
        $scope.healthDataOptions.current_page = newPage - 1;
        $scope.healthDataOptions.page_size = pageSize;
        queryOthers(2, $scope.gridOptions_sphygmomanometer);
      });
    }};
    $scope.gridOptions_oximeter = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:angular.copy(unionColumns(3)), onRegisterApi:function(gridApi) {
      $scope.gridApi = gridApi;
      $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
      });
      gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
        $scope.healthDataOptions.current_page = newPage - 1;
        $scope.healthDataOptions.page_size = pageSize;
        queryOthers(3, $scope.gridOptions_oximeter);
      });
    }};
    $scope.gridOptions_glucosemeter = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:angular.copy(unionColumns(4)), onRegisterApi:function(gridApi) {
      $scope.gridApi = gridApi;
      $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
      });
      gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
        $scope.healthDataOptions.current_page = newPage - 1;
        $scope.healthDataOptions.page_size = pageSize;
        queryOthers(4, $scope.gridOptions_glucosemeter);
      });
    }};
    $scope.gridOptions_thermometer = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:angular.copy(unionColumns(5)), onRegisterApi:function(gridApi) {
      $scope.gridApi = gridApi;
      $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
      });
      gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
        $scope.healthDataOptions.current_page = newPage - 1;
        $scope.healthDataOptions.page_size = pageSize;
        queryOthers(5, $scope.gridOptions_thermometer);
      });
    }};
    $scope.gridOptions_fat = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:angular.copy(unionColumns(6)), onRegisterApi:function(gridApi) {
      $scope.gridApi = gridApi;
      $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
      });
      gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
        $scope.healthDataOptions.current_page = newPage - 1;
        $scope.healthDataOptions.page_size = pageSize;
        queryOthers(6, $scope.gridOptions_fat);
      });
    }};
    queryOthers(1, $scope.gridOptions_wristband);
    queryOthers(2, $scope.gridOptions_sphygmomanometer);
    queryOthers(3, $scope.gridOptions_oximeter);
    queryOthers(4, $scope.gridOptions_glucosemeter);
    queryOthers(5, $scope.gridOptions_thermometer);
    queryOthers(6, $scope.gridOptions_fat);
  };
  function queryOthers(data_type_id, gridOptions) {
    if ($scope.validParam(data_type_id) && $scope.validParam($scope.healthDataOptions)) {
      $scope.healthDataOptions.data_type_id = data_type_id;
      var reqData = angular.copy($scope.healthDataOptions);
      db_operation.getHealthDatas(reqData).then(function(res) {
        gridOptions.data = res.health_data_list;
        gridOptions.totalItems = res.total_count;
        $scope.healthDataOptions.query_date = res.query_date;
        $scope.healthDataOptions.data_type_id = undefined;
      }, function(error) {
        console.log(error);
      });
    }
  }
  function copyReqData(data_type_id) {
    $scope.healthDataOptions.data_type_id = data_type_id;
    return angular.copy($scope.healthDataOptions);
  }
};
jxmnfsec.main.health_data.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxmnfsec.main.health_data.module");
goog.require("jxmnfsec.main.health_data.Ctrl");
jxmnfsec.main.health_data.module = angular.module("main.health_data", ["ui.router", "ui.grid", "ui.grid.pinning", "ui.grid.resizeColumns", "ui.grid.saveState", "ui.grid.edit", "ui.grid.pagination"]);
jxmnfsec.main.health_data.module.configuration = function($stateProvider) {
  $stateProvider.state("main.health_data", {url:"/health_data", templateUrl:"states/main/health_data/health_data.html", controller:"HealthDataCtrl as healthData", resolve:{"DATATYPESPromise":function(constants) {
    return constants.DATATYPESPromise;
  }, "PERIODSPromise":function(constants) {
    return constants.PERIODSPromise;
  }, "HEALTHDATASTATUSPromise":function(constants) {
    return constants.HEALTHDATASTATUSPromise;
  }}});
};
jxmnfsec.main.health_data.module.config(jxmnfsec.main.health_data.module.configuration).controller("HealthDataCtrl", jxmnfsec.main.health_data.Ctrl);
goog.provide("jxmnfsec.main.Ctrl");
jxmnfsec.main.Ctrl.$inject = ["$window", "basic"];
jxmnfsec.main.Ctrl = function($scope, $window, basic, $timeout) {
  var ctrl = this;
  ctrl.label = "some label from main controller";
  ctrl.user_center_submenus = [{name:"\u57fa\u672c\u8d44\u6599", link:"main.user_center.basics"}, {name:"\u4fee\u6539\u5934\u50cf", link:"main.user_center.avatar"}, {name:"\u4fee\u6539\u5bc6\u7801", link:"main.user_center.password"}];
  $scope.avatarurl = "../../img/shangbiaokuang.png";
  $scope.manufactoryName = "\u5382\u5546\u540d\u79f0";
  $scope.getManufactoryBasics = function() {
    console.log("\u5382\u5546\u57fa\u672c\u4fe1\u606f\uff01");
    basic.getManufactoryBasics().then(function(data) {
      if ($scope.validParam(data.success_message.logo_url)) {
        $scope.avatarurl = data.success_message.logo_url;
        console.log($scope.avatarurl);
      }
      if ($scope.validParam(data.success_message.full_name)) {
        $scope.manufactoryName = data.success_message.full_name;
      }
      console.log(data);
    }, function(error) {
      $scope.addAlert("danger", "\u6570\u636e\u52a0\u8f7d\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.getManufactoryBasics();
  $scope.signOut = function() {
    basic.signOut().then(function(data) {
      $window.location.href = "/manufactory/open";
    }, function(error) {
      console.log(error);
      $window.location.href = "/manufactory/open";
    });
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  $scope.validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
};
jxmnfsec.main.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxmnfsec.main.terminal_category.Ctrl");
jxmnfsec.main.terminal_category.Ctrl.$inject = ["$modal", "basic", "constants", "db_operation", "i18nService"];
jxmnfsec.main.terminal_category.Ctrl = function($scope, $timeout, $modal, basic, constants, i18nService, db_operation) {
  i18nService.setCurrentLang("zh-CN");
  $scope.device_types = constants.gotDEVICETYPES();
  $scope.terminal = {device_type_id:undefined, name:undefined, page_size:10, current_page:0, query_date:undefined};
  $scope.getTerminalLists = function() {
    return db_operation.queryTerCat($scope.terminal).then(function(data) {
      $scope.gridOptions.data = data.terminal_catagories;
      $scope.gridOptions.totalItems = data.total_count;
      $scope.terminal.query_date = data.query_date;
    }, function(error) {
      console.log(error);
    });
  };
  $scope.getTerminalLists();
  $scope.defaultPic = "../../img/default.png";
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"terminal_catagory_name", name:"\u7ec8\u7aef\u578b\u53f7\u540d\u79f0", width:"15%", pinnedLeft:true}, {field:"code", name:"\u7ec8\u7aef\u578b\u53f7\u7f16\u7801", width:"10%"}, {field:"device_type_id", name:"\u8bbe\u5907\u7c7b\u578b", width:"8%", cellFilter:"mapDeviceType"}, {field:"price", name:"\u4ef7\u683c", width:"8%"}, {name:"\u7ec8\u7aef\u578b\u53f7\u56fe\u7247", 
  width:"10%", cellTemplate:'<div><a  href={{row.entity.picture}} target="_blank" ng-if="row.entity.picture"><span style="color: royalblue">\u67e5\u770b</span></a></div>'}, {field:"profile", name:"\u7ec8\u7aef\u578b\u53f7\u63cf\u8ff0", width:"10%"}, {field:"created_at", name:"\u6dfb\u52a0\u65f6\u95f4", width:"10%", cellFilter:"unixTodate"}, {field:"status", name:"\u7ec8\u7aef\u578b\u53f7\u72b6\u6001", width:"10%", cellFilter:"mapTerminalStatus"}, {name:"\u64cd\u4f5c", width:"20%", cellTemplate:'<div class="row ui-grid-cell-contents"><div class="col-md-offset-1 col-md-4"><button class="btn col-md-12 btn-primary btn-xs" ng-click="grid.appScope.editTerminalCatagory(row.entity)" >\u7f16\u8f91</button></div><div class="col-md-offset-1 col-md-4"><button  class="btn col-md-12 btn-primary btn-xs" ng-click="grid.appScope.updateStatus(row.entity)">{{row.entity.status == 1 ? "\u7981\u7528" : "\u542f\u7528"}}</button></div></div>'}], 
  onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.terminal.current_page = newPage - 1;
      $scope.terminal.page_size = pageSize;
      $scope.getTerminalLists();
    });
  }};
  $scope.addTerminalCatagory = function() {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/terminal_catagory_modal/add_terminal_catagory_modal/add_terminal_catagory_modal.html", controller:"AddTerminalCategoryCtrl"});
    modalInstance.result.then(function() {
    }, function() {
      $scope.terminal.query_date = undefined;
      $scope.getTerminalLists();
    });
  };
  $scope.editTerminalCatagory = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/terminal_catagory_modal/edit_terminal_catagory_modal/edit_terminal_catagory_modal.html", controller:"EditTerminalCategoryCtrl", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
    }, function() {
      $scope.terminal.query_date = undefined;
      $scope.getTerminalLists();
    });
  };
  $scope.updateStatus = function(entity) {
    if ($scope.validParam(entity.status)) {
      if (entity.status == 1) {
        return db_operation.updateTerCatSataus(entity.terminal_catagory_id, {status:2}).then(function() {
          $scope.getTerminalLists();
        });
      } else {
        if (entity.status == 2) {
          return db_operation.updateTerCatSataus(entity.terminal_catagory_id, {status:1}).then(function() {
            $scope.getTerminalLists();
          });
        }
      }
    }
  };
};
jxmnfsec.main.terminal_category.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxmnfsec.main.user_center.avatar.Ctrl");
jxmnfsec.main.user_center.avatar.Ctrl.$inject = ["$scope", "basic"];
jxmnfsec.main.user_center.avatar.Ctrl = function($scope, basic) {
  this.label = "some other label from main.user_center.avatar controller";
  $scope.avatarFile = undefined;
  $scope.logo_url = "../../../img/touxiang.png";
  $scope.getManufactoryBasics = function() {
    basic.getManufactoryBasics().then(function(data) {
      if (validParam(data.success_message.logo_url)) {
        $scope.logo_url = data.success_message.logo_url;
      }
    }, function(error) {
      $scope.addAlert("danger", "\u6570\u636e\u52a0\u8f7d\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.getManufactoryBasics();
  $scope.saveAvatar = function() {
    if (validParam($scope.avatarFile)) {
      if (validPic($scope.avatarFile, "png|jpg|jpeg|bmp|gif")) {
        return basic.fileUpload($scope.avatarFile).then(function(res) {
          console.log(res);
          $scope.logo_url = res.success_message[0];
          return basic.updateManufactoryAvatar({avatar_url:$scope.logo_url}).then(function(res) {
            $scope.addAlert("success", "\u4e0a\u4f20\u5934\u50cf\u6210\u529f\uff01");
            $scope.getManufactoryBasics();
          }, function(error) {
            $scope.addAlert("danger", "\u6570\u636e\u52a0\u8f7d\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
          });
        }, function(error) {
          console.log(error);
          $scope.addAlert("danger", "\u6570\u636e\u52a0\u8f7d\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
        });
      } else {
        $scope.addAlert("warning", "\u8bf7\u4e0a\u4f20png\u3001jpg\u3001gif\u7c7b\u578b\u7684\u6587\u4ef6\uff01");
      }
    } else {
      $scope.addAlert("warning", "\u8bf7\u9009\u62e9\u6587\u4ef6\uff01");
    }
  };
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  function validPic(file, str) {
    if (file != undefined && file.type != undefined && str != undefined && str != "" && str.length != 0) {
      var suffixs = str.split("|");
      var fileSuf = file.type.split("/");
      var res = suffixs.filter(function(item) {
        return item == fileSuf[1];
      });
      if (res.length != 0) {
        return true;
      }
      return false;
    }
  }
};
goog.provide("jxmnfsec.main.user_center.avatar.module");
goog.require("jxmnfsec.main.user_center.avatar.Ctrl");
jxmnfsec.main.user_center.avatar.module = angular.module("main.user_center.avatar", ["ui.router"]);
jxmnfsec.main.user_center.avatar.module.configuration = function($stateProvider) {
  $stateProvider.state("main.user_center.avatar", {url:"/avatar", templateUrl:"states/main/user_center/avatar/avatar.html", controller:"AvatarCtrl as avatar"});
};
jxmnfsec.main.user_center.avatar.module.config(jxmnfsec.main.user_center.avatar.module.configuration).controller("AvatarCtrl", jxmnfsec.main.user_center.avatar.Ctrl);
goog.provide("jxmnfsec.main.user_center.password.Ctrl");
jxmnfsec.main.user_center.password.Ctrl.$inject = ["basic", "md5", "$timeout"];
jxmnfsec.main.user_center.password.Ctrl = function($scope, basic, md5) {
  this.label = "some other label from main.user_center.password controller";
  $scope.chPassword = {password:undefined, confirm_password:undefined, new_password:undefined};
  $scope.activeSave = false;
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  $scope.checkUserName = function() {
    var node = document.getElementById("user_name_group");
    var helper = document.getElementById("user_name_helper");
    if (validParam($scope.chPassword.password)) {
      node.className = "form-group has-success";
      helper.innerHTML = "\u5df2\u586b";
      if (validParam($scope.chPassword.new_password) && validParam($scope.chPassword.password) && validParam($scope.chPassword.confirm_password)) {
        $scope.activeSave = true;
      }
    } else {
      node.className = "form-group has-error";
      helper.innerHTML = "\u5fc5\u586b";
      $scope.activeSave = false;
    }
  };
  $scope.checkPassword = function() {
    var node = document.getElementById("password_group");
    var helper = document.getElementById("password_helper");
    if (validParam($scope.chPassword.password)) {
      node.className = "form-group has-success";
      helper.innerHTML = "\u5df2\u586b";
    } else {
      node.className = "form-group has-error";
      helper.innerHTML = "\u5fc5\u586b";
      $scope.activeSave = false;
    }
  };
  $scope.checkPasswordRepeat = function() {
    var node = document.getElementById("password_repeat_group");
    var helper = document.getElementById("password_repeat_helper");
    if (validParam($scope.chPassword.confirm_password)) {
      node.className = "form-group has-success";
      helper.innerHTML = "\u5df2\u586b";
      if (validParam($scope.chPassword.new_password) && $scope.chPassword.confirm_password == $scope.chPassword.new_password) {
        $scope.activeSave = true;
      }
    } else {
      node.className = "form-group has-error";
      helper.innerHTML = "\u5fc5\u586b";
      $scope.activeSave = false;
    }
    if ($scope.chPassword.confirm_password != $scope.chPassword.new_password) {
      node.className = "form-group has-error";
      helper.innerHTML = "\u5bc6\u7801\u4e0d\u4e00\u81f4";
      $scope.activeSave = false;
    }
  };
  $scope.saveNewPwd = function() {
    console.log("test");
    basic.change_password({old_password:md5.createHash($scope.chPassword.password), new_password:md5.createHash($scope.chPassword.new_password)}).then(function(res) {
      if (validParam(res.success_message)) {
        $scope.addAlert("success", "\u4fee\u6539\u5bc6\u7801\u6210\u529f\uff01");
        clearData();
      }
      if (validParam(res.error_message)) {
        $scope.addAlert("danger", res.error_message.faultstring);
      }
    }, function(error) {
      $scope.addAlert("danger", "\u4fee\u6539\u5bc6\u7801\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  var clearData = function() {
    $scope.chPassword.password = null;
    $scope.chPassword.new_password = null;
    $scope.chPassword.confirm_password = null;
    var helper1 = document.getElementById("user_name_helper");
    helper1.innerHTML = "\u5fc5\u586b";
    var helper2 = document.getElementById("password_helper");
    helper2.innerHTML = "\u5fc5\u586b";
    var helper3 = document.getElementById("password_repeat_helper");
    helper3.innerHTML = "\u5fc5\u586b";
  };
};
goog.provide("jxmnfsec.main.user_center.password.module");
goog.require("jxmnfsec.main.user_center.password.Ctrl");
jxmnfsec.main.user_center.password.module = angular.module("main.user_center.password", ["ui.router", "angular-md5"]);
jxmnfsec.main.user_center.password.module.configuration = function($stateProvider) {
  $stateProvider.state("main.user_center.password", {url:"/password", templateUrl:"states/main/user_center/password/password.html", controller:"PasswordCtrl as password"});
};
jxmnfsec.main.user_center.password.module.config(jxmnfsec.main.user_center.password.module.configuration).controller("PasswordCtrl", jxmnfsec.main.user_center.password.Ctrl);
goog.provide("jxmnfsec.main.user_center.Ctrl");
jxmnfsec.main.user_center.Ctrl = function() {
  this.label = "some label from user center controller";
  this.a = function() {
    console.log("hi");
  };
};
jxmnfsec.main.user_center.Ctrl.prototype.log = function(text) {
  console.log("hello");
};
goog.require("jxmnfsec.main.user_center.Ctrl");
goog.provide("jxmnfsec.main.user_center.basics.Ctrl");
jxmnfsec.main.user_center.basics.Ctrl.$inject = ["basic", "$timeout", "$filter", "md5", "constants"];
jxmnfsec.main.user_center.basics.Ctrl = function($controller, $q, $scope, $timeout, basic, md5, constants, $filter) {
  this.label = "some other label from user_center.basics controller";
  this.parent = $controller(jxmnfsec.main.user_center.Ctrl);
  this.parent.log("`log` function called from child controller");
  $scope.company_departments = constants.gotCOMPANYDEPARTMENTS();
  $scope.company_department = {selected:undefined};
  $scope.device_types = constants.gotDEVICETYPES();
  $scope.device_types_selected = [];
  $scope.company_members_list = constants.gotCOMPANYMEMBERS();
  $scope.company_members = {selected:undefined};
  $scope.company_industry_list = constants.gotCOMPANYINDUSTRIES();
  $scope.company_industry = {selected:undefined};
  $scope.company_nature_list = constants.gotCOMPANYNATURES();
  $scope.company_nature = {selected:undefined};
  $scope.province_list = constants.gotPROVINCES();
  $scope.province = {selected:undefined};
  $scope.city_list = constants.gotCITIES();
  $scope.city_select_list = [];
  $scope.city = {selected:undefined};
  $scope.county_list = constants.gotZONES();
  $scope.county_select_list = [];
  $scope.county = {selected:undefined};
  $scope.changeProvince = function(province_id) {
    if (validParam($scope.city_list)) {
      $scope.city_select_list = [];
      $scope.manufactory.city_id = undefined;
      $scope.manufactory.zone_id = undefined;
      for (var i = 0;i < $scope.city_list.length;i++) {
        if ($scope.city_list[i].province_id == province_id) {
          $scope.city_select_list.push($scope.city_list[i]);
        }
      }
    }
  };
  $scope.changeCity = function(city_id) {
    if (validParam($scope.county_list)) {
      $scope.county_select_list = [];
      $scope.manufactory.zone_id = undefined;
      for (var i = 0;i < $scope.county_list.length;i++) {
        if ($scope.county_list[i].city_id == city_id) {
          $scope.county_select_list.push($scope.county_list[i]);
        }
      }
    }
  };
  $scope.manufactory = {contactor:undefined, department:undefined, telephone:undefined, photo:undefined, email:undefined, full_name:undefined, code:undefined, profile:undefined, province_id:undefined, city_id:undefined, zone_id:undefined, address:undefined, device_type_ids:[], members:undefined, industry:undefined, nature:undefined, business_licence:"", internal_certificate:"", local_certificate:"", code_certificate:""};
  activate();
  function activate() {
  }
  $scope.updateManufactory = function() {
    $scope.manufactory.device_type_ids = $scope.device_types_selected;
    $scope.manufactory.department = $scope.company_department.selected.department_id;
    $scope.manufactory.members = $scope.company_members.selected.members_id;
    $scope.manufactory.industry = $scope.company_industry.selected.industry_id;
    $scope.manufactory.nature = $scope.company_nature.selected.nature_id;
    $scope.manufactory.province_id = $scope.province.selected.province_id;
    $scope.manufactory.city_id = $scope.city.selected.city_id;
    $scope.manufactory.zone_id = $scope.county.selected.zone_id;
    basic.signUp($scope.manufactory).then(function(res) {
    }, function(error) {
      $scope.errmsg = error.data;
    });
  };
  $scope.getManufactoryBasics = function() {
    return basic.getManufactoryBasics().then(function(data) {
      $scope.changeProvince(data.success_message.province_id);
      $scope.changeCity(data.success_message.city_id);
      $scope.manufactory = data.success_message;
      $scope.manufactory.last_login = $filter("unixTodate")($scope.manufactory.last_login);
    }, function(error) {
      $scope.addAlert("danger", "\u6570\u636e\u52a0\u8f7d\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.getManufactoryBasics();
  $scope.saveManufactoryBasic = function() {
    var promise = [uploadBusiness_licenceFiles(), uploadInternal_certificateFiles(), uploadLocal_certificateFiles(), uploadCode_certificateFiles()];
    return $q.all(promise).then(function() {
      basic.putManufactoryBasic($scope.manufactory).then(function(succ) {
        $scope.addAlert("success", "\u4fdd\u5b58\u6210\u529f\uff01");
      }, function(error) {
        console.log(error);
        $scope.addAlert("danger", "\u4fdd\u5b58\u5931\u8d25,\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      });
    });
  };
  $scope.business_licencefile = undefined;
  $scope.internal_certificatefile = undefined;
  $scope.local_certificatefile = undefined;
  $scope.code_certificatefile = undefined;
  var uploadBusiness_licenceFiles = function() {
    if (validParam($scope.business_licencefile)) {
      return basic.fileUpload($scope.business_licencefile).then(function(res) {
        $scope.manufactory.business_licence = res.success_message[0];
        console.log("\u4e0a\u4f20\u5de5\u5546\u8425\u4e1a\u6267\u7167\u6210\u529f\uff01");
        return res;
      }, function(error) {
        console.log("\u4e0a\u4f20\u5de5\u5546\u8425\u4e1a\u6267\u7167\u5931\u8d25\uff01");
        console.log(error);
        return error;
      });
    } else {
      return $q.when(0);
    }
  };
  var uploadInternal_certificateFiles = function() {
    if (validParam($scope.internal_certificatefile)) {
      return basic.fileUpload($scope.internal_certificatefile).then(function(res) {
        $scope.manufactory.internal_certificate = res.success_message[0];
        console.log("\u4e0a\u4f20\u7ec4\u7ec7\u673a\u6784\u4ee3\u7801\u8bc1\u6210\u529f\uff01");
        return res;
      }, function(error) {
        console.log("\u4e0a\u4f20\u7ec4\u7ec7\u673a\u6784\u4ee3\u7801\u8bc1\u5931\u8d25\uff01");
        console.log(error);
        return error;
      });
    } else {
      return $q.when(0);
    }
  };
  var uploadLocal_certificateFiles = function() {
    if (validParam($scope.local_certificatefile)) {
      return basic.fileUpload($scope.local_certificatefile).then(function(res) {
        $scope.manufactory.local_certificate = res.success_message[0];
        console.log("\u4e0a\u4f20\u7a0e\u52a1\u767b\u8bb0\u8bc1-\u56fd\u7a0e\u6210\u529f\uff01");
        return res;
      }, function(error) {
        console.log("\u4e0a\u4f20\u7a0e\u52a1\u767b\u8bb0\u8bc1-\u56fd\u7a0e\u5931\u8d25\uff01");
        console.log(error);
        return error;
      });
    } else {
      return $q.when(0);
    }
  };
  var uploadCode_certificateFiles = function() {
    if (validParam($scope.code_certificatefile)) {
      return basic.fileUpload($scope.code_certificatefile).then(function(res) {
        $scope.manufactory.code_certificate = res.success_message[0];
        console.log("\u4e0a\u4f20\u7a0e\u52a1\u767b\u8bb0\u8bc1-\u5730\u7a0e\u6210\u529f\uff01");
        return res;
      }, function(error) {
        console.log("\u4e0a\u4f20\u7a0e\u52a1\u767b\u8bb0\u8bc1-\u5730\u7a0e\u5931\u8d25\uff01");
        console.log(error);
        return error;
      });
    } else {
      return $q.when(0);
    }
  };
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
};
goog.provide("jxmnfsec.main.user_center.basics.module");
goog.require("jxmnfsec.main.user_center.basics.Ctrl");
jxmnfsec.main.user_center.basics.module = angular.module("main.user_center.basics", ["ui.router"]);
jxmnfsec.main.user_center.basics.module.configuration = function($stateProvider) {
  $stateProvider.state("main.user_center.basics", {url:"/basics", templateUrl:"states/main/user_center/basics/basics.html", controller:"BasicsCtrl as basics", resolve:{"COMPANYDEPARTMENTSPromise":function(constants) {
    return constants.COMPANYDEPARTMENTSPromise;
  }, "DATATYPESPromise":function(constants) {
    return constants.DATATYPESPromise;
  }, "COMPANYMEMBERSPromise":function(constants) {
    return constants.COMPANYMEMBERSPromise;
  }, "COMPANYNATURESPromise":function(constants) {
    return constants.COMPANYNATURESPromise;
  }, "COMPANYINDUSTRIESPromise":function(constants) {
    return constants.COMPANYINDUSTRIESPromise;
  }, "PROVINCESPromise":function(constants) {
    return constants.PROVINCESPromise;
  }, "CITIESPromise":function(constants) {
    return constants.CITIESPromise;
  }, "ZONESPromise":function(constants) {
    return constants.ZONESPromise;
  }}});
};
jxmnfsec.main.user_center.basics.module.config(jxmnfsec.main.user_center.basics.module.configuration).controller("BasicsCtrl", jxmnfsec.main.user_center.basics.Ctrl);
goog.provide("jxmnfsec.main.user_center.module");
goog.require("jxmnfsec.main.user_center.basics.module");
goog.require("jxmnfsec.main.user_center.avatar.module");
goog.require("jxmnfsec.main.user_center.password.module");
goog.require("jxmnfsec.main.user_center.Ctrl");
jxmnfsec.main.user_center.module = angular.module("main.user_center", ["ui.router", jxmnfsec.main.user_center.basics.module.name, jxmnfsec.main.user_center.avatar.module.name, jxmnfsec.main.user_center.password.module.name]);
jxmnfsec.main.user_center.module.configuration = function($stateProvider) {
  $stateProvider.state("main.user_center", {url:"/user_center", templateUrl:"states/main/user_center/user_center.html", controller:"UserCenterCtrl as userCenter"});
};
jxmnfsec.main.user_center.module.config(jxmnfsec.main.user_center.module.configuration).controller("UserCenterCtrl", jxmnfsec.main.user_center.Ctrl);
goog.provide("jxmnfsec.fileModel.Directive.factory");
jxmnfsec.fileModel.Directive = function($parse) {
  this.parse = $parse;
  this.link = this.link.bind(this);
  this.scope;
  this.elem;
  this.attrs;
};
jxmnfsec.fileModel.Directive.factory = function($parse) {
  var dir = new jxmnfsec.fileModel.Directive($parse);
  return {link:dir.link};
};
jxmnfsec.fileModel.Directive.prototype.link = function(scope, elem, attrs) {
  this.scope = scope;
  this.elem = elem;
  this.attrs = attrs;
  this.restrict = "A";
  var model = this.parse(attrs.fileModel);
  var modelSetter = model.assign;
  elem.bind("change", function() {
    scope.$apply(function() {
      modelSetter(scope, elem[0].files[0]);
    });
  });
};
goog.provide("jxmnfsec.version.Directive.factory");
jxmnfsec.version.Directive = function(version) {
  this.version = version;
  this.link = this.link.bind(this);
  this.scope;
  this.elem;
  this.attrs;
};
jxmnfsec.version.Directive.factory = function(version) {
  var dir = new jxmnfsec.version.Directive(version);
  return {link:dir.link};
};
jxmnfsec.version.Directive.prototype.link = function(scope, elem, attrs) {
  this.scope = scope;
  this.elem = elem;
  this.attrs = attrs;
  this.elem.text(this.version.get());
};
goog.provide("jxmnfsec.constants.Factory");
jxmnfsec.constants.Factory.$inject = ["$rootScope", "$http", "$q"];
jxmnfsec.constants.Factory = function($rootScope, $http, $q) {
  function getConstants(req) {
    req.url = $rootScope.endPoint + req.url;
    return $http(req).then(success).catch(fail);
    function success(response) {
      return response.data.success_message;
    }
    function fail(error) {
      return $q.reject("rejected");
    }
  }
  var DISTRICTS = [];
  var DISTRICTSPromise = getDistricts().then(function(data) {
    DISTRICTS = data.districts;
  }, function(data) {
    DISTRICTS = [];
  });
  function getDistricts() {
    var req = {method:"GET", url:"/common/constants/districts"};
    return getConstants(req);
  }
  function gotDISTRICTS() {
    return DISTRICTS;
  }
  var PROVINCES = [];
  var PROVINCESPromise = getProvinces().then(function(data) {
    PROVINCES = data.provinces;
  }, function(data) {
    PROVINCES = [];
  });
  function getProvinces() {
    var req = {method:"GET", url:"/common/constants/provinces"};
    return getConstants(req);
  }
  function gotPROVINCES() {
    return PROVINCES;
  }
  var CITIES = [];
  var CITIESPromise = getCities().then(function(data) {
    CITIES = data.cities;
  }, function(data) {
    CITIES = [];
  });
  function getCities() {
    var req = {method:"GET", url:"/common/constants/cities"};
    return getConstants(req);
  }
  function gotCITIES() {
    return CITIES;
  }
  var ZONES = [];
  var ZONESPromise = getZones().then(function(data) {
    ZONES = data.zones;
  }, function(data) {
    ZONES = [];
  });
  function getZones() {
    var req = {method:"GET", url:"/common/constants/zones"};
    return getConstants(req);
  }
  function gotZONES() {
    return ZONES;
  }
  var PRODUCTTYPES = [];
  var PRODUCTTYPESPromise = getProductTypes().then(function(data) {
    PRODUCTTYPES = data.product_types;
  }, function(data) {
    PRODUCTTYPES = [];
  });
  function getProductTypes() {
    var req = {method:"GET", url:"/common/constants/product_types"};
    return getConstants(req);
  }
  function gotPRODUCTTYPES() {
    return PRODUCTTYPES;
  }
  var DEVICETYPES = [];
  var DEVICETYPESPromise = getDeviceTypes().then(function(data) {
    DEVICETYPES = data.device_types;
  }, function(data) {
    DEVICETYPES = [];
  });
  function getDeviceTypes() {
    var req = {method:"GET", url:"/common/constants/device_types"};
    return getConstants(req);
  }
  function gotDEVICETYPES() {
    return DEVICETYPES;
  }
  var DATATYPES = [];
  var DATATYPESPromise = getDataTypes().then(function(data) {
    DATATYPES = data.data_types;
  }, function(data) {
    DATATYPES = [];
  });
  function getDataTypes() {
    var req = {method:"GET", url:"/common/constants/data_types"};
    return getConstants(req);
  }
  function gotDATATYPES() {
    return DATATYPES;
  }
  var FILETYPES = [];
  var FILETYPESPromise = getFileTypes().then(function(data) {
    FILETYPES = data.file_types;
  }, function(data) {
    FILETYPES = [];
  });
  function getFileTypes() {
    var req = {method:"GET", url:"/common/constants/file_types"};
    return getConstants(req);
  }
  function gotFILETYPES() {
    return FILETYPES;
  }
  var WRISTBANDCOLUMNS = [];
  var WRISTBANDCOLUMNSPromise = getWristbandColumns().then(function(data) {
    WRISTBANDCOLUMNS = data.columns;
  }, function(data) {
    WRISTBANDCOLUMNS = [];
  });
  function getWristbandColumns() {
    var req = {method:"GET", url:"/common/constants/wristband_columns"};
    return getConstants(req);
  }
  function gotWRISTBANDCOLUMNS() {
    return WRISTBANDCOLUMNS;
  }
  var SPHYGMOMANOMETERCOLUMNS = [];
  var SPHYGMOMANOMETERCOLUMNSPromise = getSphygmomanometerColumns().then(function(data) {
    SPHYGMOMANOMETERCOLUMNS = data.columns;
  }, function(data) {
    SPHYGMOMANOMETERCOLUMNS = [];
  });
  function getSphygmomanometerColumns() {
    var req = {method:"GET", url:"/common/constants/sphygmomanometer_columns"};
    return getConstants(req);
  }
  function gotSPHYGMOMANOMETERCOLUMNS() {
    return SPHYGMOMANOMETERCOLUMNS;
  }
  var GLUCOSEMETERCOLUMNS = [];
  var GLUCOSEMETERCOLUMNSPromise = getGlucosemeterColumns().then(function(data) {
    GLUCOSEMETERCOLUMNS = data.columns;
  }, function(data) {
    GLUCOSEMETERCOLUMNS = [];
  });
  function getGlucosemeterColumns() {
    var req = {method:"GET", url:"/common/constants/glucosemeter_columns"};
    return getConstants(req);
  }
  function gotGLUCOSEMETERCOLUMNS() {
    return GLUCOSEMETERCOLUMNS;
  }
  var THERMOMETERCOLUMNS = [];
  var THERMOMETERCOLUMNSPromise = getThermometerColumns().then(function(data) {
    THERMOMETERCOLUMNS = data.columns;
  }, function(data) {
    THERMOMETERCOLUMNS = [];
  });
  function getThermometerColumns() {
    var req = {method:"GET", url:"/common/constants/thermometer_columns"};
    return getConstants(req);
  }
  function gotTHERMOMETERCOLUMNS() {
    return THERMOMETERCOLUMNS;
  }
  var OXIMETERCOLUMNS = [];
  var OXIMETERCOLUMNSPromise = getOximeterColumns().then(function(data) {
    OXIMETERCOLUMNS = data.columns;
  }, function(data) {
    OXIMETERCOLUMNS = [];
  });
  function getOximeterColumns() {
    var req = {method:"GET", url:"/common/constants/oximeter_columns"};
    return getConstants(req);
  }
  function gotOXIMETERCOLUMNS() {
    return OXIMETERCOLUMNS;
  }
  var FATCOLUMNS = [];
  var FATCOLUMNSPromise = getFatColumns().then(function(data) {
    FATCOLUMNS = data.columns;
  }, function(data) {
    FATCOLUMNS = [];
  });
  function getFatColumns() {
    var req = {method:"GET", url:"/common/constants/fat_columns"};
    return getConstants(req);
  }
  function gotFATCOLUMNS() {
    return FATCOLUMNS;
  }
  var COMPARISONOPS = [];
  var COMPARISONOPSPromise = getComparisonOps().then(function(data) {
    COMPARISONOPS = data.ops;
  }, function(data) {
    COMPARISONOPS = [];
  });
  function getComparisonOps() {
    var req = {method:"GET", url:"/common/constants/comparison_ops"};
    return getConstants(req);
  }
  function gotCOMPARISONOPS() {
    return COMPARISONOPS;
  }
  var LOGICALOPS = [];
  var LOGICALOPSPromise = getLogicalOps().then(function(data) {
    LOGICALOPS = data.ops;
  }, function(data) {
    LOGICALOPS = [];
  });
  function getLogicalOps() {
    var req = {method:"GET", url:"/common/constants/logical_ops"};
    return getConstants(req);
  }
  function gotLOGICALOPS() {
    return LOGICALOPS;
  }
  var PERIODS = [];
  var PERIODSPromise = getPeriods().then(function(data) {
    PERIODS = data.periods;
  }, function(data) {
    PERIODS = [];
  });
  function getPeriods() {
    var req = {method:"GET", url:"/common/constants/periods"};
    return getConstants(req);
  }
  function gotPERIODS() {
    return PERIODS;
  }
  var USERSTATUS = [];
  var USERSTATUSPromise = getUserStatus().then(function(data) {
    USERSTATUS = data.user_status_list;
  }, function(data) {
    USERSTATUS = [];
  });
  function getUserStatus() {
    var req = {method:"GET", url:"/common/constants/user_status"};
    return getConstants(req);
  }
  function gotUSERSTATUS() {
    return USERSTATUS;
  }
  var MANUFACTORYSTATUS = [];
  var MANUFACTORYSTATUSPromise = getManufactoryStatus().then(function(data) {
    MANUFACTORYSTATUS = data.manufactory_status_list;
  }, function(data) {
    MANUFACTORYSTATUS = [];
  });
  function getManufactoryStatus() {
    var req = {method:"GET", url:"/common/constants/manufactory_status"};
    return getConstants(req);
  }
  function gotMANUFACTORYSTATUS() {
    return MANUFACTORYSTATUS;
  }
  var TERMINALSTATUS = [];
  var TERMINALSTATUSPromise = getTerminalStatus().then(function(data) {
    TERMINALSTATUS = data.terminal_status_list;
  }, function(data) {
    TERMINALSTATUS = [];
  });
  function getTerminalStatus() {
    var req = {method:"GET", url:"/common/constants/terminal_status"};
    return getConstants(req);
  }
  function gotTERMINALSTATUS() {
    return TERMINALSTATUS;
  }
  var DOCTORSTATUS = [];
  var DOCTORSTATUSPromise = getDoctorStatus().then(function(data) {
    DOCTORSTATUS = data.doctor_status_list;
  }, function(data) {
    DOCTORSTATUS = [];
  });
  function getDoctorStatus() {
    var req = {method:"GET", url:"/common/constants/doctor_status"};
    return getConstants(req);
  }
  function gotDOCTORSTATUS() {
    return DOCTORSTATUS;
  }
  var HEALTHCONSULTATIONSTATUS = [];
  var HEALTHCONSULTATIONSTATUSPromise = getHealthConsultationStatus().then(function(data) {
    HEALTHCONSULTATIONSTATUS = data.consultation_status_list;
  }, function(data) {
    HEALTHCONSULTATIONSTATUS = [];
  });
  function getHealthConsultationStatus() {
    var req = {method:"GET", url:"/common/constants/health_consultation_status"};
    return getConstants(req);
  }
  function gotHEALTHCONSULTATIONSTATUS() {
    return HEALTHCONSULTATIONSTATUS;
  }
  var HEALTHDATASTATUS = [];
  var HEALTHDATASTATUSPromise = getHealthDataStatus().then(function(data) {
    HEALTHDATASTATUS = data.data_status_list;
  }, function(data) {
    HEALTHDATASTATUS = [];
  });
  function getHealthDataStatus() {
    var req = {method:"GET", url:"/common/constants/health_data_status"};
    return getConstants(req);
  }
  function gotHEALTHDATASTATUS() {
    return HEALTHDATASTATUS;
  }
  var HEALTHFILESTATUS = [];
  var HEALTHFILESTATUSPromise = getHealthFileStatus().then(function(data) {
    HEALTHFILESTATUS = data.file_status_list;
  }, function(data) {
    HEALTHFILESTATUS = [];
  });
  function getHealthFileStatus() {
    var req = {method:"GET", url:"/common/constants/health_file_status"};
    return getConstants(req);
  }
  function gotHEALTHFILESTATUS() {
    return HEALTHFILESTATUS;
  }
  var COMPANYDEPARTMENTS = [];
  var COMPANYDEPARTMENTSPromise = getCompanyDepartments().then(function(data) {
    COMPANYDEPARTMENTS = data.departments;
  }, function(data) {
    COMPANYDEPARTMENTS = [];
  });
  function getCompanyDepartments() {
    var req = {method:"GET", url:"/common/constants/company_departments"};
    return getConstants(req);
  }
  function gotCOMPANYDEPARTMENTS() {
    return COMPANYDEPARTMENTS;
  }
  var COMPANYMEMBERS = [];
  var COMPANYMEMBERSPromise = getCompanyMembers().then(function(data) {
    COMPANYMEMBERS = data.members;
  }, function(data) {
    COMPANYMEMBERS = [];
  });
  function getCompanyMembers() {
    var req = {method:"GET", url:"/common/constants/company_members"};
    return getConstants(req);
  }
  function gotCOMPANYMEMBERS() {
    return COMPANYMEMBERS;
  }
  var COMPANYNATURES = [];
  var COMPANYNATURESPromise = getCompanyNatures().then(function(data) {
    COMPANYNATURES = data.natures;
  }, function(data) {
    COMPANYNATURES = [];
  });
  function getCompanyNatures() {
    var req = {method:"GET", url:"/common/constants/company_natures"};
    return getConstants(req);
  }
  function gotCOMPANYNATURES() {
    return COMPANYNATURES;
  }
  var COMPANYINDUSTRIES = [];
  var COMPANYINDUSTRIESPromise = getCompanyIndustries().then(function(data) {
    COMPANYINDUSTRIES = data.industries;
  }, function(data) {
    COMPANYINDUSTRIES = [];
  });
  function getCompanyIndustries() {
    var req = {method:"GET", url:"/common/constants/company_industries"};
    return getConstants(req);
  }
  function gotCOMPANYINDUSTRIES() {
    return COMPANYINDUSTRIES;
  }
  var DEPARTMENTS = [];
  var DEPARTMENTSPromise = getDepartments().then(function(data) {
    DEPARTMENTS = data.departments;
  }, function(data) {
    DEPARTMENTS = [];
  });
  function getDepartments() {
    var req = {method:"GET", url:"/common/constants/departments"};
    return getConstants(req);
  }
  function gotDEPARTMENTS() {
    return DEPARTMENTS;
  }
  var GENDERS = [];
  var GENDERSPromise = getGenders().then(function(data) {
    GENDERS = data.genders;
  }, function(data) {
    GENDERS = [];
  });
  function getGenders() {
    var req = {method:"GET", url:"/common/constants/genders"};
    return getConstants(req);
  }
  function gotGENDERS() {
    return GENDERS;
  }
  var TEMPLATETYPES = [];
  var TEMPLATETYPESPromise = getTemplateTypes().then(function(data) {
    TEMPLATETYPES = data.type_list;
  }, function(data) {
    TEMPLATETYPES = [];
  });
  function getTemplateTypes() {
    var req = {method:"GET", url:"/common/constants/template_types"};
    return getConstants(req);
  }
  function gotTEMPLATETYPES() {
    return TEMPLATETYPES;
  }
  var service = {getConstants:getConstants, getDistricts:getDistricts, gotDISTRICTS:gotDISTRICTS, DISTRICTSPromise:DISTRICTSPromise, getProvinces:getProvinces, gotPROVINCES:gotPROVINCES, PROVINCESPromise:PROVINCESPromise, getCities:getCities, gotCITIES:gotCITIES, CITIESPromise:CITIESPromise, getZones:getZones, gotZONES:gotZONES, ZONESPromise:ZONESPromise, getProductTypes:getProductTypes, gotPRODUCTTYPES:gotPRODUCTTYPES, PRODUCTTYPESPromise:PRODUCTTYPESPromise, getDeviceTypes:getDeviceTypes, gotDEVICETYPES:gotDEVICETYPES, 
  DEVICETYPESPromise:DEVICETYPESPromise, getDataTypes:getDataTypes, gotDATATYPES:gotDATATYPES, DATATYPESPromise:DATATYPESPromise, getFileTypes:getFileTypes, gotFILETYPES:gotFILETYPES, FILETYPESPromise:FILETYPESPromise, getWristbandColumns:getWristbandColumns, gotWRISTBANDCOLUMNS:gotWRISTBANDCOLUMNS, WRISTBANDCOLUMNSPromise:WRISTBANDCOLUMNSPromise, getSphygmomanometerColumns:getSphygmomanometerColumns, gotSPHYGMOMANOMETERCOLUMNS:gotSPHYGMOMANOMETERCOLUMNS, SPHYGMOMANOMETERCOLUMNSPromise:SPHYGMOMANOMETERCOLUMNSPromise, 
  getGlucosemeterColumns:getGlucosemeterColumns, gotGLUCOSEMETERCOLUMNS:gotGLUCOSEMETERCOLUMNS, GLUCOSEMETERCOLUMNSPromise:GLUCOSEMETERCOLUMNSPromise, getThermometerColumns:getThermometerColumns, gotTHERMOMETERCOLUMNS:gotTHERMOMETERCOLUMNS, THERMOMETERCOLUMNSPromise:THERMOMETERCOLUMNSPromise, getOximeterColumns:getOximeterColumns, gotOXIMETERCOLUMNS:gotOXIMETERCOLUMNS, OXIMETERCOLUMNSPromise:OXIMETERCOLUMNSPromise, getFatColumns:getFatColumns, gotFATCOLUMNS:gotFATCOLUMNS, FATCOLUMNSPromise:FATCOLUMNSPromise, 
  getComparisonOps:getComparisonOps, gotCOMPARISONOPS:gotCOMPARISONOPS, COMPARISONOPSPromise:COMPARISONOPSPromise, getLogicalOps:getLogicalOps, gotLOGICALOPS:gotLOGICALOPS, LOGICALOPSPromise:LOGICALOPSPromise, getPeriods:getPeriods, gotPERIODS:gotPERIODS, PERIODSPromise:PERIODSPromise, getUserStatus:getUserStatus, gotUSERSTATUS:gotUSERSTATUS, USERSTATUSPromise:USERSTATUSPromise, getManufactoryStatus:getManufactoryStatus, gotMANUFACTORYSTATUS:gotMANUFACTORYSTATUS, MANUFACTORYSTATUSPromise:MANUFACTORYSTATUSPromise, 
  getTerminalStatus:getTerminalStatus, gotTERMINALSTATUS:gotTERMINALSTATUS, TERMINALSTATUSPromise:TERMINALSTATUSPromise, getDoctorStatus:getDoctorStatus, gotDOCTORSTATUS:gotDOCTORSTATUS, DOCTORSTATUSPromise:DOCTORSTATUSPromise, getHealthConsultationStatus:getHealthConsultationStatus, gotHEALTHCONSULTATIONSTATUS:gotHEALTHCONSULTATIONSTATUS, HEALTHCONSULTATIONSTATUSPromise:HEALTHCONSULTATIONSTATUSPromise, getHealthDataStatus:getHealthDataStatus, gotHEALTHDATASTATUS:gotHEALTHDATASTATUS, HEALTHDATASTATUSPromise:HEALTHDATASTATUSPromise, 
  getHealthFileStatus:getHealthFileStatus, gotHEALTHFILESTATUS:gotHEALTHFILESTATUS, HEALTHFILESTATUSPromise:HEALTHFILESTATUSPromise, getCompanyDepartments:getCompanyDepartments, gotCOMPANYDEPARTMENTS:gotCOMPANYDEPARTMENTS, COMPANYDEPARTMENTSPromise:COMPANYDEPARTMENTSPromise, getCompanyMembers:getCompanyMembers, gotCOMPANYMEMBERS:gotCOMPANYMEMBERS, COMPANYMEMBERSPromise:COMPANYMEMBERSPromise, getCompanyNatures:getCompanyNatures, gotCOMPANYNATURES:gotCOMPANYNATURES, COMPANYNATURESPromise:COMPANYNATURESPromise, 
  getCompanyIndustries:getCompanyIndustries, gotCOMPANYINDUSTRIES:gotCOMPANYINDUSTRIES, COMPANYINDUSTRIESPromise:COMPANYINDUSTRIESPromise, getDepartments:getDepartments, gotDEPARTMENTS:gotDEPARTMENTS, DEPARTMENTSPromise:DEPARTMENTSPromise, getGenders:getGenders, gotGENDERS:gotGENDERS, GENDERSPromise:GENDERSPromise, getTemplateTypes:getTemplateTypes, gotTEMPLATETYPES:gotTEMPLATETYPES, TEMPLATETYPESPromise:TEMPLATETYPESPromise};
  return service;
};
goog.provide("jxmnfsec.company_department.Filter.factory");
jxmnfsec.company_department.Filter = function(constants) {
  this.gotCOMPANYDEPARTMENTS = constants.gotCOMPANYDEPARTMENTS;
  this.convert = this.convert.bind(this);
};
jxmnfsec.company_department.Filter.factory = function(constants) {
  var filter = new jxmnfsec.company_department.Filter(constants);
  return filter.convert;
};
jxmnfsec.company_department.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var company_departments = this.gotCOMPANYDEPARTMENTS();
    var company_department = company_departments.filter(function(item) {
      return input === item.department_id;
    });
    return company_department.length > 0 ? company_department[0].department_name : "";
  }
};
goog.provide("jxmnfsec.company_member.Filter.factory");
jxmnfsec.company_member.Filter = function(constants) {
  this.gotCOMPANYMEMBERS = constants.gotCOMPANYMEMBERS;
  this.convert = this.convert.bind(this);
};
jxmnfsec.company_member.Filter.factory = function(constants) {
  var filter = new jxmnfsec.company_member.Filter(constants);
  return filter.convert;
};
jxmnfsec.company_member.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var company_members = this.gotCOMPANYMEMBERS();
    var company_member = company_members.filter(function(item) {
      return input === item.member_id;
    });
    return company_member.length > 0 ? company_member[0].member_name : "";
  }
};
goog.provide("jxmnfsec.company_nature.Filter.factory");
jxmnfsec.company_nature.Filter = function(constants) {
  this.gotCOMPANYNATURES = constants.gotCOMPANYNATURES;
  this.convert = this.convert.bind(this);
};
jxmnfsec.company_nature.Filter.factory = function(constants) {
  var filter = new jxmnfsec.company_nature.Filter(constants);
  return filter.convert;
};
jxmnfsec.company_nature.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var company_natures = this.gotCOMPANYNATURES();
    var company_nature = company_natures.filter(function(item) {
      return input === item.nature_id;
    });
    return company_nature.length > 0 ? company_nature[0].nature_name : "";
  }
};
goog.provide("jxmnfsec.company_industry.Filter.factory");
jxmnfsec.company_industry.Filter = function(constants) {
  this.gotCOMPANYINDUSTRIES = constants.gotCOMPANYINDUSTRIES;
  this.convert = this.convert.bind(this);
};
jxmnfsec.company_industry.Filter.factory = function(constants) {
  var filter = new jxmnfsec.company_industry.Filter(constants);
  return filter.convert;
};
jxmnfsec.company_industry.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var company_industries = this.gotCOMPANYINDUSTRIES();
    var company_industry = company_industries.filter(function(item) {
      return input === item.industry_id;
    });
    return company_industry.length > 0 ? company_industry[0].industry_name : "";
  }
};
goog.provide("jxmnfsec.dateTounix.Filter.factory");
jxmnfsec.dateTounix.Filter = function() {
  this.checkmark = "\u2714";
  this.cross = "\u2718";
  this.convert = this.convert.bind(this);
};
jxmnfsec.dateTounix.Filter.factory = function() {
  var filter = new jxmnfsec.dateTounix.Filter;
  return filter.convert;
};
jxmnfsec.dateTounix.Filter.prototype.convert = function(input) {
  if (!input) {
    return "";
  } else {
    var tmp_datetime = input.toString().replace(/:/g, "-");
    tmp_datetime = tmp_datetime.toString().replace(/ /g, "-");
    var arr = tmp_datetime.split("-");
    var now = new Date(Date.UTC(arr[0], arr[1] - 1, arr[2], arr[3] - 8, arr[4], arr[5]));
    return parseInt(now.getTime() / 1E3);
  }
};
goog.provide("jxmnfsec.gender.Filter.factory");
jxmnfsec.gender.Filter = function(constants) {
  this.gotGENDERS = constants.gotGENDERS;
  this.convert = this.convert.bind(this);
};
jxmnfsec.gender.Filter.factory = function(constants) {
  var filter = new jxmnfsec.gender.Filter(constants);
  return filter.convert;
};
jxmnfsec.gender.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var genders = this.gotGENDERS();
    var gender = genders.filter(function(item) {
      return input === item.gender_id;
    });
    return gender.length > 0 ? gender[0].gender_name : "";
  }
};
goog.provide("jxmnfsec.district.Filter.factory");
jxmnfsec.district.Filter = function(constants) {
  this.gotDISTRICTS = constants.gotDISTRICTS;
  this.convert = this.convert.bind(this);
};
jxmnfsec.district.Filter.factory = function(constants) {
  var filter = new jxmnfsec.district.Filter(constants);
  return filter.convert;
};
jxmnfsec.district.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var districts = this.gotDISTRICTS();
    var district = districts.filter(function(item) {
      return input === item.district_id;
    });
    return district.length > 0 ? district[0].district_name : "";
  }
};
goog.provide("jxmnfsec.province.Filter.factory");
jxmnfsec.province.Filter = function(constants) {
  this.gotPROVINCES = constants.gotPROVINCES;
  this.convert = this.convert.bind(this);
};
jxmnfsec.province.Filter.factory = function(constants) {
  var filter = new jxmnfsec.province.Filter(constants);
  return filter.convert;
};
jxmnfsec.province.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var provinces = this.gotPROVINCES();
    var province = provinces.filter(function(item) {
      return input === item.province_id;
    });
    return province.length > 0 ? province[0].province_name : "";
  }
};
goog.provide("jxmnfsec.city.Filter.factory");
jxmnfsec.city.Filter = function(constants) {
  this.gotCITIES = constants.gotCITIES;
  this.convert = this.convert.bind(this);
};
jxmnfsec.city.Filter.factory = function(constants) {
  var filter = new jxmnfsec.city.Filter(constants);
  return filter.convert;
};
jxmnfsec.city.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var cities = this.gotCITIES();
    var city = cities.filter(function(item) {
      return input === item.city_id;
    });
    return city.length > 0 ? city[0].city_name : "";
  }
};
goog.provide("jxmnfsec.zone.Filter.factory");
jxmnfsec.zone.Filter = function(constants) {
  this.gotZONES = constants.gotZONES;
  this.convert = this.convert.bind(this);
};
jxmnfsec.zone.Filter.factory = function(constants) {
  var filter = new jxmnfsec.zone.Filter(constants);
  return filter.convert;
};
jxmnfsec.zone.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var zones = this.gotZONES();
    var zone = zones.filter(function(item) {
      return input === item.zone_id;
    });
    return zone.length > 0 ? zone[0].zone_name : "";
  }
};
goog.provide("jxmnfsec.data_type.Filter.factory");
jxmnfsec.data_type.Filter = function(constants) {
  this.gotDATATYPES = constants.gotDATATYPES;
  this.convert = this.convert.bind(this);
};
jxmnfsec.data_type.Filter.factory = function(constants) {
  var filter = new jxmnfsec.data_type.Filter(constants);
  return filter.convert;
};
jxmnfsec.data_type.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var data_types = this.gotDATATYPES();
    var data_type = data_types.filter(function(item) {
      return input === item.data_type_id;
    });
    return data_type.length > 0 ? data_type[0].data_type_name : "";
  }
};
goog.provide("jxmnfsec.periods.Filter.factory");
jxmnfsec.periods.Filter = function(constants) {
  this.gotPERIODS = constants.gotPERIODS;
  this.convert = this.convert.bind(this);
};
jxmnfsec.periods.Filter.factory = function(constants) {
  var filter = new jxmnfsec.periods.Filter(constants);
  return filter.convert;
};
jxmnfsec.periods.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var periods = this.gotPERIODS();
    var period = periods.filter(function(item) {
      return input === item.period_id;
    });
    return period.length > 0 ? period[0].period_name : "";
  }
};
goog.provide("jxmnfsec.health_data_status.Filter.factory");
jxmnfsec.health_data_status.Filter = function(constants) {
  this.gotHEALTHDATASTATUS = constants.gotHEALTHDATASTATUS;
  this.convert = this.convert.bind(this);
};
jxmnfsec.health_data_status.Filter.factory = function(constants) {
  var filter = new jxmnfsec.health_data_status.Filter(constants);
  return filter.convert;
};
jxmnfsec.health_data_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var health_data_statuses = this.gotHEALTHDATASTATUS();
    var health_data_status = health_data_statuses.filter(function(item) {
      return input === item.data_status_id;
    });
    return health_data_status.length > 0 ? health_data_status[0].data_status_name : "";
  }
};
goog.provide("jxmnfsec.user_status.Filter.factory");
jxmnfsec.user_status.Filter = function(constants) {
  this.gotUSERSTATUS = constants.gotUSERSTATUS;
  this.convert = this.convert.bind(this);
};
jxmnfsec.user_status.Filter.factory = function(constants) {
  var filter = new jxmnfsec.user_status.Filter(constants);
  return filter.convert;
};
jxmnfsec.user_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var user_statuses = this.gotUSERSTATUS();
    var user_status = user_statuses.filter(function(item) {
      return input === item.user_status_id;
    });
    return user_status.length > 0 ? user_status[0].user_status_name : "";
  }
};
goog.provide("jxmnfsec.manufactory_status.Filter.factory");
jxmnfsec.manufactory_status.Filter = function(constants) {
  this.gotMANUFACTORYSTATUS = constants.gotMANUFACTORYSTATUS;
  this.convert = this.convert.bind(this);
};
jxmnfsec.manufactory_status.Filter.factory = function(constants) {
  var filter = new jxmnfsec.manufactory_status.Filter(constants);
  return filter.convert;
};
jxmnfsec.manufactory_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var manufactory_statuses = this.gotMANUFACTORYSTATUS();
    var manufactory_status = manufactory_statuses.filter(function(item) {
      return input === item.manufactory_status_id;
    });
    return manufactory_status.length > 0 ? manufactory_status[0].manufactory_status_name : "";
  }
};
goog.provide("jxmnfsec.terminal_status.Filter.factory");
jxmnfsec.terminal_status.Filter = function(constants) {
  this.gotTERMINALSTATUS = constants.gotTERMINALSTATUS;
  this.convert = this.convert.bind(this);
};
jxmnfsec.terminal_status.Filter.factory = function(constants) {
  var filter = new jxmnfsec.terminal_status.Filter(constants);
  return filter.convert;
};
jxmnfsec.terminal_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var terminal_statuses = this.gotTERMINALSTATUS();
    var terminal_status = terminal_statuses.filter(function(item) {
      return input === item.terminal_status_id;
    });
    return terminal_status.length > 0 ? terminal_status[0].terminal_status_name : "";
  }
};
goog.provide("jxmnfsec.doctor_status.Filter.factory");
jxmnfsec.doctor_status.Filter = function(constants) {
  this.gotDOCTORSTATUS = constants.gotDOCTORSTATUS;
  this.convert = this.convert.bind(this);
};
jxmnfsec.doctor_status.Filter.factory = function(constants) {
  var filter = new jxmnfsec.doctor_status.Filter(constants);
  return filter.convert;
};
jxmnfsec.doctor_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var doctor_statuses = this.gotDOCTORSTATUS();
    var doctor_status = doctor_statuses.filter(function(item) {
      return input === item.doctor_status_id;
    });
    return doctor_status.length > 0 ? doctor_status[0].doctor_status_name : "";
  }
};
goog.provide("jxmnfsec.product_type.Filter.factory");
jxmnfsec.product_type.Filter = function(constants) {
  this.gotPRODUCTTYPES = constants.gotPRODUCTTYPES;
  this.convert = this.convert.bind(this);
};
jxmnfsec.product_type.Filter.factory = function(constants) {
  var filter = new jxmnfsec.product_type.Filter(constants);
  return filter.convert;
};
jxmnfsec.product_type.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var product_types = this.gotPRODUCTTYPES();
    var product_type = product_types.filter(function(item) {
      return input === item.product_type_id;
    });
    return product_type.length > 0 ? product_type[0].product_type_name : "";
  }
};
goog.provide("jxmnfsec.device_type.Filter.factory");
jxmnfsec.device_type.Filter = function(constants) {
  this.gotDEVICETYPES = constants.gotDEVICETYPES;
  this.convert = this.convert.bind(this);
};
jxmnfsec.device_type.Filter.factory = function(constants) {
  var filter = new jxmnfsec.device_type.Filter(constants);
  return filter.convert;
};
jxmnfsec.device_type.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var device_types = this.gotDEVICETYPES();
    var device_type = device_types.filter(function(item) {
      return input === item.device_type_id;
    });
    return device_type.length > 0 ? device_type[0].device_type_name : "";
  }
};
goog.provide("jxmnfsec.template_type.Filter.factory");
jxmnfsec.template_type.Filter = function(constants) {
  this.gotTEMPLATETYPES = constants.gotTEMPLATETYPES;
  this.convert = this.convert.bind(this);
};
jxmnfsec.template_type.Filter.factory = function(constants) {
  var filter = new jxmnfsec.template_type.Filter(constants);
  return filter.convert;
};
jxmnfsec.template_type.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var template_types = this.gotTEMPLATETYPES();
    var template_type = template_types.filter(function(item) {
      return input === item.template_type_id;
    });
    return template_type.length > 0 ? template_type[0].template_type_name : "";
  }
};
goog.provide("jxmnfsec.unixTodate.Filter.factory");
jxmnfsec.unixTodate.Filter = function() {
  this.checkmark = "\u2714";
  this.cross = "\u2718";
  this.convert = this.convert.bind(this);
};
jxmnfsec.unixTodate.Filter.factory = function() {
  var filter = new jxmnfsec.unixTodate.Filter;
  return filter.convert;
};
Date.prototype.Format = function(fmt) {
  var o = {"M+":this.getMonth() + 1, "d+":this.getDate(), "h+":this.getHours(), "m+":this.getMinutes(), "s+":this.getSeconds(), "q+":Math.floor((this.getMonth() + 3) / 3), "S":this.getMilliseconds()};
  if (/(y+)/.test(fmt)) {
    fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
  }
  for (var k in o) {
    if ((new RegExp("(" + k + ")")).test(fmt)) {
      fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
    }
  }
  return fmt;
};
jxmnfsec.unixTodate.Filter.prototype.convert = function(input) {
  if (!input) {
    return "";
  } else {
    var now = (new Date(parseInt(input) * 1E3)).Format("yyyy-MM-dd hh:mm:ss");
    return now.toLocaleString().replace(/\u5e74|\u6708/g, "-").replace(/\u65e5/g, " ");
  }
};
goog.provide("jxmnfsec.basic.Service");
jxmnfsec.basic.Service.$inject = ["$rootScope", "$http", "$q"];
jxmnfsec.basic.Service = function($http, $q, $rootScope) {
  var basic = this;
  basic.signIn = function(rbody) {
    var defer = $q.defer();
    var req = {method:"POST", url:$rootScope.endPoint + "/manufactories/sign_in", data:rbody};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.change_password = function(password) {
    var defer = $q.defer();
    var req = {method:"POST", url:$rootScope.endPoint + "/manufactories/settings/password", data:password};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.signOut = function() {
    var defer = $q.defer();
    var req = {method:"POST", url:$rootScope.endPoint + "/manufactories/sign_out"};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.submitTerminalCatagory = function(terminal) {
    var defer = $q.defer();
    var req = {method:"POST", url:$rootScope.endPoint + "/manufactories/terminal_catagory/add", data:terminal};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.getManufactoryBasics = function() {
    var defer = $q.defer();
    var req = {method:"GET", url:$rootScope.endPoint + "/manufactories/settings/basic"};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.putManufactoryBasic = function(manufactories) {
    var defer = $q.defer();
    var req = {method:"PUT", url:$rootScope.endPoint + "/manufactories/settings/basic", data:manufactories};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.fileUpload = function(file) {
    var defer = $q.defer();
    if (file == undefined || file == null || file == "") {
      return null;
    }
    var uploadUrl = $rootScope.endPoint + "/common/uploads";
    var fd = new FormData;
    fd.append("files", file);
    $http.post(uploadUrl, fd, {transformRequest:angular.identity, headers:{"Content-Type":undefined}}).success(function(succ) {
      defer.resolve(succ);
    }).error(function(error) {
      defer.resolve(error);
    });
    return defer.promise;
  };
  basic.updateManufactoryAvatar = function(logo_url) {
    var defer = $q.defer();
    var req = {method:"PUT", url:$rootScope.endPoint + "/manufactories/settings/avatar", data:logo_url};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.addTerminalCatagory = function(rbody) {
    var defer = $q.defer();
    var req = {method:"POST", url:$rootScope.endPoint + "/manufactories/terminal_catagory/add", data:rbody};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  return basic;
};
goog.provide("jxmnfsec.db_operation.Service");
jxmnfsec.db_operation.Service.$inject = ["$rootScope", "$http", "$q"];
jxmnfsec.db_operation.Service = function($rootScope, $http, $q) {
  var db_operation = this;
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  function sendRequest(req) {
    return $http(req).then(success).catch(fail);
    function success(response) {
      return response.data.success_message;
    }
    function fail(error) {
      return $q.reject("rejected");
    }
  }
  db_operation.getTerminalsByType = function(requestBody) {
    if (requestBody == undefined || requestBody == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/manufactories/db/terminals", data:requestBody};
    return sendRequest(req);
  };
  db_operation.getSeachedTerminals = function(requestBody) {
    if (requestBody == undefined || requestBody == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/manufactories/db/terminals/fuzzy_search", data:requestBody};
    return sendRequest(req);
  };
  db_operation.getTerminal = function(tid) {
    if (tid == undefined || tid == "") {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/manufactories/db/terminals/" + tid};
    return sendRequest(req);
  };
  db_operation.putTerminal = function(tid, status) {
    if (tid == undefined || tid == "") {
      return null;
    }
    if (status == undefined || status == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/manufactories/db/terminals/" + tid + "/state", data:status};
    return sendRequest(req);
  };
  db_operation.getFiles = function(file) {
    if (file == undefined || file == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/patients/files", data:file};
    return sendRequest(req);
  };
  db_operation.getPatFiles = function(pid, file) {
    if (!validParam(pid)) {
      return null;
    }
    console.log("service");
    console.log(file);
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/files", params:file};
    return sendRequest(req);
  };
  db_operation.getPatWrist = function(pid, wid) {
    if (!validParam(pid) || !validParam(wid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/wristbands/" + wid};
    return sendRequest(req);
  };
  db_operation.putPatWrist = function(pid, wid, patwrist) {
    if (!validParam(pid) || !validParam(wid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/wristbands/" + wid, data:patwrist};
    return sendRequest(req);
  };
  db_operation.getPatSphyg = function(pid, sid) {
    if (!validParam(pid) || !validParam(sid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/sphygmomanometers/" + sid};
    return sendRequest(req);
  };
  db_operation.putPatSphyg = function(pid, sid, patsphy) {
    if (!validParam(pid) || !validParam(sid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/sphygmomanometers/" + sid, data:patsphy};
    return sendRequest(req);
  };
  db_operation.getPatOxi = function(pid, oid) {
    if (!validParam(pid) || !validParam(oid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/oximeters/" + oid};
    return sendRequest(req);
  };
  db_operation.putPatOxi = function(pid, oid, patoxi) {
    if (!validParam(pid) || !validParam(oid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/oximeters/" + oid, data:patoxi};
    return sendRequest(req);
  };
  db_operation.getPatGlucose = function(pid, gid) {
    if (!validParam(pid) || !validParam(gid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/glucosemeters/" + gid};
    return sendRequest(req);
  };
  db_operation.putPatGlucose = function(pid, gid, patglucose) {
    if (!validParam(pid) || !validParam(gid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/glucosemeters/" + gid, data:patglucose};
    return sendRequest(req);
  };
  db_operation.getPatThermome = function(pid, tid) {
    if (!validParam(pid) || !validParam(tid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/thermometers/" + tid};
    return sendRequest(req);
  };
  db_operation.putPatThermome = function(pid, tid, patthermome) {
    if (!validParam(pid) || !validParam(tid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/thermometers/" + tid, data:patthermome};
    return sendRequest(req);
  };
  db_operation.getPatFat = function(pid, fid) {
    if (!validParam(pid) || !validParam(fid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/fats/" + fid};
    return sendRequest(req);
  };
  db_operation.putPatFat = function(pid, fid, patfat) {
    if (!validParam(pid) || !validParam(fid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/fats/" + fid, data:patfat};
    return sendRequest(req);
  };
  db_operation.getTerminalCatagory = function(terminal_list) {
    if (terminal_list == undefined || terminal_list == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/manufactories/terminal_catagory/templates", data:terminal_list};
    return sendRequest(req);
  };
  db_operation.putProductModel = function(model) {
    if (model == undefined || model == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/manufactories/terminal_catagory/templates", data:model};
    return sendRequest(req);
  };
  db_operation.getHealthDatas = function(healthData) {
    if (healthData == undefined || healthData == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/manufactories/db/health_datas", data:healthData};
    return sendRequest(req);
  };
  db_operation.queryTerCat = function(params) {
    if (params == undefined || params == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/manufactories/terminal_catagories", data:params};
    return sendRequest(req);
  };
  db_operation.addTerCat = function(params) {
    if (params == undefined || params == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/manufactories/terminal_catagories/add", data:params};
    return sendRequest(req);
  };
  db_operation.editTerCat = function(tcid, params) {
    if (tcid == undefined || tcid == "") {
      return null;
    }
    if (params == undefined || params == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/manufactories/terminal_catagories/" + tcid, data:params};
    return sendRequest(req);
  };
  db_operation.updateTerCatSataus = function(tcid, params) {
    if (tcid == undefined || tcid == "") {
      return null;
    }
    if (params == undefined || params == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/manufactories/terminal_catagories/" + tcid + "/status", data:params};
    return sendRequest(req);
  };
  return db_operation;
};
goog.provide("jxmnfsec.version.Service");
jxmnfsec.version.Service = function() {
  this.version = "0.0.1";
};
jxmnfsec.version.Service.prototype.get = function() {
  return this.version;
};
goog.provide("jxmnfsec.show_cs_template_modal.show_cs_template_modal.Ctrl");
jxmnfsec.show_cs_template_modal.show_cs_template_modal.Ctrl.$inject = ["$scope", "$modalInstance", "entity", "constants", "db_operation", "basic"];
jxmnfsec.show_cs_template_modal.show_cs_template_modal.Ctrl = function($scope, $modalInstance, $q, $timeout, basic, constants, entity, db_operation) {
  var ctrl = this;
  $scope.editTemplate = entity;
  console.log("$scope.editTemplate");
  console.log($scope.editTemplate);
  $scope.newmodel = {device_type_id:entity.device_type_id, terminal_catagory_id:entity.terminal_catagory_id, using_default:$scope.editTemplate.template_type == 1, template:entity.template_url};
  var getDeviceTypes = function() {
    return constants.getDeviceTypes().then(function(data) {
      $scope.device_types = data.device_types;
    });
  };
  getDeviceTypes();
  var getTemplateTypes = function() {
    return constants.getTemplateTypes().then(function(data) {
      $scope.type_list = data.type_list;
    });
  };
  getTemplateTypes();
  $scope.templatefile = undefined;
  var uploadupModelfile = function() {
    if (validParam($scope.templatefile)) {
      return basic.fileUpload($scope.templatefile).then(function(res) {
        $scope.newmodel.template = res.success_message[0];
        console.log("\u4e0a\u4f20\u539f\u6a21\u677f\u6210\u529f\uff01");
        return res;
      }, function(error) {
        console.log("\u4e0a\u4f20\u539f\u6a21\u677f\u5931\u8d25\uff01");
        console.log(error);
        return error;
      });
    } else {
      return $q.when(0);
    }
  };
  $scope.putProductModel = function() {
    var promise = [uploadupModelfile()];
    return $q.all(promise).then(function() {
      upload();
    });
  };
  $scope.disenableSaveButton = false;
  var upload = function() {
    $scope.disenableSaveButton = true;
    $scope.newmodel.using_default = $scope.editTemplate.template_type == 1;
    return db_operation.putProductModel($scope.newmodel).then(function(res) {
      $scope.addAlert("success", "\u63d0\u4ea4\u6210\u529f");
      $timeout(function() {
        $scope.disenableSaveButton = false;
      }, 3E3);
    }, function(error) {
      console.log(error);
      $scope.addAlert("danger", "\u63d0\u4ea4\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.clear = function() {
    $scope.upModelFile = undefined;
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
};
goog.provide("jxmnfsec.main.category_template.module");
goog.require("jxmnfsec.main.category_template.Ctrl");
goog.require("jxmnfsec.show_cs_template_modal.show_cs_template_modal.Ctrl");
jxmnfsec.main.category_template.module = angular.module("main.category_template", ["ui.router", "ui.grid", "ui.grid.pinning", "ui.grid.resizeColumns", "ui.grid.saveState", "ui.grid.edit", "ui.grid.pagination", "ui.select", "ui.bootstrap", "ngSanitize", "angularModalService"]);
jxmnfsec.main.category_template.module.configuration = function($stateProvider) {
  $stateProvider.state("main.category_template", {url:"/category_template", templateUrl:"states/main/category_template/category_template.html", controller:"CategoryTemplateCtrl as categoryTemplate", resolve:{"TEMPLATETYPESPromise":function(constants) {
    return constants.TEMPLATETYPESPromise;
  }, "DEVICETYPESPromise":function(constants) {
    return constants.DEVICETYPESPromise;
  }}});
};
jxmnfsec.main.category_template.module.config(jxmnfsec.main.category_template.module.configuration).controller("CategoryTemplateCtrl", jxmnfsec.main.category_template.Ctrl).controller("ShowCSTemplateModalCtrl", jxmnfsec.show_cs_template_modal.show_cs_template_modal.Ctrl);
goog.provide("jxmnfsec.add_terminal_catagory_modal.Ctrl");
jxmnfsec.add_terminal_catagory_modal.Ctrl.$inject = ["$scope", "$modalInstance", "$timeout", "$filter", "constants", "basic", "db_operation"];
jxmnfsec.add_terminal_catagory_modal.Ctrl = function($scope, $modalInstance, $filter, $timeout, constants, basic, db_operation) {
  $scope.device_types = constants.gotDEVICETYPES();
  $scope.product_types = constants.gotPRODUCTTYPES();
  $scope.terminal_states = constants.gotTERMINALSTATUS();
  $scope.terminalPic = undefined;
  $scope.terminal = {terminal_catagory_name:undefined, code:undefined, product_type_id:undefined, device_type_id:undefined, price:undefined, picture:undefined, profile:undefined, status:undefined};
  $scope.disabledAddButton = false;
  $scope.addTerminal = function() {
    $scope.disabledAddButton = true;
    if (!validParam($scope.terminal.terminal_catagory_name)) {
      $scope.addAlert("warning", "\u7ec8\u7aef\u578b\u53f7\u5fc5\u987b\u586b\u5199");
      $scope.disabledAddButton = false;
      return;
    }
    if (!validParam($scope.terminal.code)) {
      $scope.addAlert("warning", "\u578b\u53f7\u7f16\u7801\u5fc5\u987b\u586b\u5199");
      $scope.disabledAddButton = false;
      return;
    }
    if (!validParam($scope.terminal.product_type_id)) {
      $scope.addAlert("warning", "\u4ea7\u54c1\u7c7b\u578b\u5fc5\u987b\u586b\u5199");
      $scope.disabledAddButton = false;
      return;
    }
    if (!validParam($scope.terminal.device_type_id)) {
      $scope.addAlert("warning", "\u8bbe\u5907\u7c7b\u578b\u5fc5\u987b\u586b\u5199");
      $scope.disabledAddButton = false;
      return;
    }
    if (!validParam($scope.terminal.price)) {
      $scope.addAlert("warning", "\u4ef7\u683c\u5fc5\u987b\u586b\u5199");
      $scope.disabledAddButton = false;
      return;
    }
    if (!validParam($scope.terminalPic)) {
      $scope.addAlert("warning", "\u56fe\u7247\u5fc5\u987b\u586b\u5199");
      $scope.disabledAddButton = false;
      return;
    }
    if (!validParam($scope.terminal.profile)) {
      $scope.addAlert("warning", "\u8bf4\u660e\u4fe1\u606f\u5fc5\u987b\u586b\u5199");
      $scope.disabledAddButton = false;
      return;
    }
    if (!validParam($scope.terminal.status)) {
      $scope.addAlert("warning", "\u72b6\u6001\u5fc5\u987b\u586b\u5199");
      $scope.disabledAddButton = false;
      return;
    }
    if (!validPic($scope.terminalPic, "png|jpg|jpeg|bmp|gif")) {
      $scope.alerts = [];
      $scope.addAlert("warning", "\u8bf7\u4e0a\u4f20png\u3001jpg\u3001gif\u7c7b\u578b\u7684\u6587\u4ef6\uff01");
      $scope.disabledAddButton = false;
      return;
    }
    if (isNaN($scope.terminal.price)) {
      $scope.addAlert("warning", "\u4ef7\u683c\u65e0\u6548");
      $scope.disabledAddButton = false;
      return;
    }
    return basic.fileUpload($scope.terminalPic).then(function(res) {
      if (validParam(res.success_message[0])) {
        $scope.terminal.picture = res.success_message[0];
        return db_operation.addTerCat($scope.terminal).then(function(res) {
          $scope.addAlert("success", "\u6dfb\u52a0\u7ec8\u7aef\u6210\u529f,3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
          $timeout(function() {
            $scope.disabledAddButton = false;
            $scope.cancel();
          }, 3E3);
        }, function(error) {
          $scope.addAlert("danger", "\u6dfb\u52a0\u7ec8\u7aef\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
          $scope.disabledAddButton = false;
        });
      } else {
        $scope.addAlert("warning", "\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
        $scope.disabledAddButton = false;
      }
    }, function(error) {
      $scope.addAlert("warning", "\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      $scope.disabledAddButton = false;
    });
  };
  function validPic(file, str) {
    if (file != undefined && file.type != undefined && str != undefined && str != "" && str.length != 0) {
      var suffixs = str.split("|");
      var fileSuf = file.type.split("/");
      var res = suffixs.filter(function(item) {
        return item == fileSuf[1];
      });
      if (res.length != 0) {
        return true;
      }
      return false;
    }
  }
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  function validParam(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  }
};
goog.provide("jxmnfsec.edit_terminal_catagory_modal.Ctrl");
jxmnfsec.edit_terminal_catagory_modal.Ctrl.$inject = ["$scope", "$modalInstance", "$timeout", "entity", "$filter", "constants", "db_operation", "basic"];
jxmnfsec.edit_terminal_catagory_modal.Ctrl = function($scope, $modalInstance, $timeout, constants, $filter, entity, db_operation, basic) {
  $scope.terminal = entity;
  $scope.device_types = constants.gotDEVICETYPES();
  $scope.product_types = constants.gotPRODUCTTYPES();
  $scope.terminal_states = constants.gotTERMINALSTATUS();
  $scope.terminalPic = undefined;
  $scope.disabledAddButton = false;
  $scope.saveTerminal = function() {
    $scope.disabledAddButton = true;
    if (!validParam($scope.terminal.terminal_catagory_name)) {
      $scope.addAlert("warning", "\u7ec8\u7aef\u578b\u53f7\u5fc5\u987b\u586b\u5199");
      $scope.disabledAddButton = false;
      return;
    }
    if (!validParam($scope.terminal.code)) {
      $scope.addAlert("warning", "\u578b\u53f7\u7f16\u7801\u5fc5\u987b\u586b\u5199");
      $scope.disabledAddButton = false;
      return;
    }
    if (!validParam($scope.terminal.price)) {
      $scope.addAlert("warning", "\u4ef7\u683c\u5fc5\u987b\u586b\u5199");
      $scope.disabledAddButton = false;
      return;
    }
    if (!validParam($scope.terminal.profile)) {
      $scope.addAlert("warning", "\u8bf4\u660e\u4fe1\u606f\u5fc5\u987b\u586b\u5199");
      $scope.disabledAddButton = false;
      return;
    }
    if (isNaN($scope.terminal.price)) {
      $scope.addAlert("warning", "\u4ef7\u683c\u65e0\u6548");
      $scope.disabledAddButton = false;
      return;
    }
    if (validParam($scope.terminalPic)) {
      if (!validPic($scope.terminalPic, "png|jpg|jpeg|bmp|gif")) {
        $scope.alerts = [];
        $scope.addAlert("warning", "\u8bf7\u4e0a\u4f20png\u3001jpg\u3001gif\u7c7b\u578b\u7684\u6587\u4ef6\uff01");
        $scope.disabledAddButton = false;
        return;
      }
      return basic.fileUpload($scope.terminalPic).then(function(res) {
        if (validParam(res.success_message[0])) {
          $scope.terminal.picture = res.success_message[0];
          return db_operation.editTerCat($scope.terminal.terminal_catagory_id, $scope.terminal).then(function(res) {
            $scope.addAlert("success", "\u7f16\u8f91\u7ec8\u7aef\u6210\u529f,3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
            $timeout(function() {
              $scope.disabledAddButton = false;
              $scope.cancel();
            }, 3E3);
          }, function(error) {
            $scope.addAlert("danger", "\u7f16\u8f91\u7ec8\u7aef\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
            $scope.disabledAddButton = false;
          });
        } else {
          $scope.addAlert("warning", "\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
          $scope.disabledAddButton = false;
        }
      }, function(error) {
        $scope.addAlert("warning", "\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
        $scope.disabledAddButton = false;
      });
    } else {
      return db_operation.editTerCat($scope.terminal.terminal_catagory_id, $scope.terminal).then(function(res) {
        $scope.addAlert("success", "\u7f16\u8f91\u7ec8\u7aef\u6210\u529f\uff0c3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
        $timeout(function() {
          $scope.disabledAddButton = false;
          $scope.cancel();
        }, 3E3);
      }, function(error) {
        $scope.addAlert("danger", "\u7f16\u8f91\u7ec8\u7aef\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
        $scope.disabledAddButton = false;
      });
    }
  };
  function validPic(file, str) {
    if (file != undefined && file.type != undefined && str != undefined && str != "" && str.length != 0) {
      var suffixs = str.split("|");
      var fileSuf = file.type.split("/");
      var res = suffixs.filter(function(item) {
        return item == fileSuf[1];
      });
      if (res.length != 0) {
        return true;
      }
      return false;
    }
  }
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
};
goog.provide("jxmnfsec.main.terminal_category.module");
goog.require("jxmnfsec.main.terminal_category.Ctrl");
goog.require("jxmnfsec.add_terminal_catagory_modal.Ctrl");
goog.require("jxmnfsec.edit_terminal_catagory_modal.Ctrl");
jxmnfsec.main.terminal_category.module = angular.module("main.terminal_category", ["ui.router"]);
jxmnfsec.main.terminal_category.module.configuration = function($stateProvider) {
  $stateProvider.state("main.terminal_category", {url:"/terminal_category", templateUrl:"states/main/terminal_category/terminal_category.html", controller:"TerminalCategoryCtrl as terminalCategory", resolve:{"DEVICETYPESPromise":function(constants) {
    return constants.DEVICETYPESPromise;
  }, "PRODUCTTYPESPromise":function(constants) {
    return constants.PRODUCTTYPESPromise;
  }, "TERMINALSTATUSPromise":function(constants) {
    return constants.TERMINALSTATUSPromise;
  }}});
};
jxmnfsec.main.terminal_category.module.config(jxmnfsec.main.terminal_category.module.configuration).controller("TerminalCategoryCtrl", jxmnfsec.main.terminal_category.Ctrl).controller("AddTerminalCategoryCtrl", jxmnfsec.add_terminal_catagory_modal.Ctrl).controller("EditTerminalCategoryCtrl", jxmnfsec.edit_terminal_catagory_modal.Ctrl);
goog.provide("jxmnfsec.main.module");
goog.require("jxmnfsec.main.category_template.module");
goog.require("jxmnfsec.main.db_operation.module");
goog.require("jxmnfsec.main.terminal_category.module");
goog.require("jxmnfsec.main.health_data.module");
goog.require("jxmnfsec.main.user_center.module");
goog.require("jxmnfsec.main.Ctrl");
jxmnfsec.main.module = angular.module("main", ["ui.router", "ui.navbar", jxmnfsec.main.category_template.module.name, jxmnfsec.main.db_operation.module.name, jxmnfsec.main.terminal_category.module.name, jxmnfsec.main.health_data.module.name, jxmnfsec.main.user_center.module.name]);
jxmnfsec.main.module.configuration = function($stateProvider) {
  $stateProvider.state("main", {url:"/main", templateUrl:"states/main/main.html", controller:"MainCtrl as main"});
};
jxmnfsec.main.module.config(jxmnfsec.main.module.configuration).controller("MainCtrl", jxmnfsec.main.Ctrl);
goog.require("jxmnfsec.main.module");
goog.require("jxmnfsec.version.Directive.factory");
goog.require("jxmnfsec.fileModel.Directive.factory");
goog.require("jxmnfsec.version.Service");
goog.require("jxmnfsec.district.Filter.factory");
goog.require("jxmnfsec.province.Filter.factory");
goog.require("jxmnfsec.city.Filter.factory");
goog.require("jxmnfsec.zone.Filter.factory");
goog.require("jxmnfsec.product_type.Filter.factory");
goog.require("jxmnfsec.device_type.Filter.factory");
goog.require("jxmnfsec.data_type.Filter.factory");
goog.require("jxmnfsec.template_type.Filter.factory");
goog.require("jxmnfsec.user_status.Filter.factory");
goog.require("jxmnfsec.manufactory_status.Filter.factory");
goog.require("jxmnfsec.terminal_status.Filter.factory");
goog.require("jxmnfsec.doctor_status.Filter.factory");
goog.require("jxmnfsec.health_data_status.Filter.factory");
goog.require("jxmnfsec.periods.Filter.factory");
goog.require("jxmnfsec.company_department.Filter.factory");
goog.require("jxmnfsec.company_member.Filter.factory");
goog.require("jxmnfsec.company_nature.Filter.factory");
goog.require("jxmnfsec.company_industry.Filter.factory");
goog.require("jxmnfsec.gender.Filter.factory");
goog.require("jxmnfsec.unixTodate.Filter.factory");
goog.require("jxmnfsec.dateTounix.Filter.factory");
goog.require("jxmnfsec.basic.Service");
goog.require("jxmnfsec.constants.Factory");
goog.require("jxmnfsec.db_operation.Service");
function config($stateProvider, $urlRouterProvider, $locationProvider, $httpProvider) {
  $urlRouterProvider.otherwise("/main/terminal_category");
  $httpProvider.defaults.withCredentials = true;
  if (!$httpProvider.defaults.headers.get) {
    $httpProvider.defaults.headers.get = {};
  }
  $httpProvider.defaults.headers.get["If-Modified-Since"] = "Mon, 26 Jul 1997 05:00:00 GMT";
  $httpProvider.defaults.headers.get["Cache-Control"] = "no-cache";
  $httpProvider.defaults.headers.get["Pragma"] = "no-cache";
  $httpProvider.interceptors.push(function($q, $window) {
    return {response:function(response) {
      return response;
    }, responseError:function(response) {
      if (response.status === 401) {
        $window.location.href = "/manufactory/open";
      }
      if (response.status === 403) {
        if (response.data.role === "manufactory") {
          alert("\u60a8\u65e0\u64cd\u4f5c\u6743\u9650\uff01");
        } else {
          $window.location.href = "/manufactory/open";
        }
      }
      return $q.reject(response);
    }};
  });
}
var onChangeConfig = ["$rootScope", "$state", function($rootScope, $state) {
  $rootScope.$on("$stateChangeStart", function(event, toState) {
    if (toState.name === "main") {
      event.preventDefault();
      $state.go("main.terminal_category", {});
    } else {
      if (toState.name === "main.user_center") {
        event.preventDefault();
        $state.go("main.user_center.basics", {});
      }
    }
  });
}];
var endPointConfig = ["$rootScope", function($rootScope, $state) {
  $rootScope.endPoint = "";
}];
angular.module("app", ["ui.router", "ngResource", jxmnfsec.main.module.name]).config(config).run(onChangeConfig).run(endPointConfig).directive("version", jxmnfsec.version.Directive.factory).directive("fileModel", jxmnfsec.fileModel.Directive.factory).service("version", jxmnfsec.version.Service).filter("mapDistrict", jxmnfsec.district.Filter.factory).filter("mapProvince", jxmnfsec.province.Filter.factory).filter("mapCity", jxmnfsec.city.Filter.factory).filter("mapZone", jxmnfsec.zone.Filter.factory).filter("mapProductType", 
jxmnfsec.product_type.Filter.factory).filter("mapDeviceType", jxmnfsec.device_type.Filter.factory).filter("mapDataType", jxmnfsec.data_type.Filter.factory).filter("mapTemplateType", jxmnfsec.template_type.Filter.factory).filter("mapUserStatus", jxmnfsec.user_status.Filter.factory).filter("mapManufactoryStatus", jxmnfsec.manufactory_status.Filter.factory).filter("mapTerminalStatus", jxmnfsec.terminal_status.Filter.factory).filter("mapDoctorStatus", jxmnfsec.doctor_status.Filter.factory).filter("mapHalthDataStatus", 
jxmnfsec.health_data_status.Filter.factory).filter("mapPeriods", jxmnfsec.periods.Filter.factory).filter("mapCompanyDepartment", jxmnfsec.company_department.Filter.factory).filter("mapCompanyMember", jxmnfsec.company_member.Filter.factory).filter("mapCompanyNature", jxmnfsec.company_nature.Filter.factory).filter("mapCompanyIndustry", jxmnfsec.company_industry.Filter.factory).filter("mapGender", jxmnfsec.gender.Filter.factory).filter("unixTodate", jxmnfsec.unixTodate.Filter.factory).filter("dateTounix", 
jxmnfsec.dateTounix.Filter.factory).service("basic", jxmnfsec.basic.Service).factory("constants", jxmnfsec.constants.Factory).service("db_operation", jxmnfsec.db_operation.Service);

