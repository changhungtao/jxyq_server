'use strict';var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return !goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('<script type="text/javascript" src="' + src + '"></' + "script>");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return !!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return (fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return +new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ = 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("jxdctsec.main.db_operation.Ctrl");
jxdctsec.main.db_operation.Ctrl = function() {
  this.label = "some label from db operation controller";
};
jxdctsec.main.db_operation.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxdctsec.main.db_operation.fat_files.Ctrl");
jxdctsec.main.db_operation.fat_files.Ctrl.$inject = ["$scope", "$http", "$modal", "i18nService", "ModalService", "db_operation"];
jxdctsec.main.db_operation.fat_files.Ctrl = function($scope, $http, $modal, $stateParams, i18nService, ModalService, db_operation) {
  this.label = "some other label from main.db_operation.fat_files controller";
  $scope.patient_id = $stateParams.patient_id;
  $scope.file_type = $stateParams.file_type;
  var fileParas = {file_type:$scope.file_type, page_size:10, current_page:0, query_date:undefined};
  var getFatFiles = function() {
    db_operation.getPatFiles($scope.patient_id, fileParas).then(function(data) {
      console.log(data);
      $scope.patient_name = data.patient_name;
      $scope.patient_phone = data.patient_phone;
      $scope.gridOptions.data = data.files;
      fileParas.query_date = data.query_date;
      $scope.gridOptions.totalItems = data.total_count;
    }, function(error) {
      console.log(error);
    });
  };
  getFatFiles();
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"measured_at", name:"\u6570\u636e\u6536\u96c6\u65f6\u95f4", width:"15%", cellFilter:"unixTodate"}, {field:"bmi_value", name:"BMI", width:"15%"}, {field:"weight_value", name:"\u4f53\u91cd", width:"10%"}, {field:"fat_value", name:"\u8102\u80aa\u542b\u91cf", width:"10%"}, {field:"calorie_value", name:"\u5361\u8def\u91cc", width:"10%"}, {field:"moisture_value", name:"\u6c34\u5206\u542b\u91cf", 
  width:"10%"}, {field:"muscle_value", name:"\u808c\u8089\u542b\u91cf", width:"10%"}, {field:"visceral_fat_value", name:"\u5185\u810f\u8102\u80aa\u542b\u91cf", width:"10%"}, {field:"bone_value", name:"\u9aa8\u9abc", width:"10%"}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      fileParas.current_page = newPage - 1;
      fileParas.page_size = pageSize;
      getFatFiles();
    });
  }};
  i18nService.setCurrentLang("zh-CN");
};
goog.provide("jxdctsec.main.db_operation.fat_files.module");
goog.require("jxdctsec.main.db_operation.fat_files.Ctrl");
jxdctsec.main.db_operation.fat_files.module = angular.module("main.db_operation.fat_files", ["ui.router"]);
jxdctsec.main.db_operation.fat_files.module.configuration = function($stateProvider) {
  $stateProvider.state("main.db_operation.fat_files", {url:"/fat_files/:patient_id/:file_type", templateUrl:"states/main/db_operation/fat_files/fat_files.html", controller:"FatFilesCtrl as fatFiles"});
};
jxdctsec.main.db_operation.fat_files.module.config(jxdctsec.main.db_operation.fat_files.module.configuration).controller("FatFilesCtrl", jxdctsec.main.db_operation.fat_files.Ctrl);
goog.provide("jxdctsec.main.db_operation.file_list.Ctrl");
jxdctsec.main.db_operation.file_list.Ctrl.$inject = ["$scope", "$http", "$modal", "$state", "$filter", "$q", "i18nService", "ModalService", "constants", "db_operation"];
jxdctsec.main.db_operation.file_list.Ctrl = function($scope, $http, $modal, $state, $filter, $q, i18nService, ModalService, constants, db_operation) {
  var ctrl = this;
  ctrl.label = "some other label from main.db_operation.file_list controller";
  var numArry = function(count) {
    var nums = [];
    for (var i = 1;i <= count;i++) {
      nums.push(i);
    }
    return nums;
  };
  $scope.ages = numArry(120);
  $scope.showHistory = function(entity) {
    var params = {"patient_id":entity.patient_id, "file_type":entity.file_type};
    switch(entity.file_type) {
      case 2:
        $state.go("main.db_operation.sphygmomanometer_files", params);
        break;
      case 4:
        $state.go("main.db_operation.glucosemeter_files", params);
        break;
      case 6:
        $state.go("main.db_operation.fat_files", params);
        break;
      case 5:
        $state.go("main.db_operation.thermometer_files", params);
        break;
      case 1:
        $state.go("main.db_operation.wristband_files", params);
        break;
      case 3:
        $state.go("main.db_operation.oximeter_files", params);
        break;
      case 7:
        $state.go("main.db_operation.other_files", params);
        break;
    }
  };
  $scope.popup = function(entity) {
    switch(entity.file_type) {
      case 2:
        $scope.popupSphygmomanometerModal(entity);
        break;
      case 4:
        $scope.popupGlucosemeterModal(entity);
        break;
      case 6:
        $scope.popupFatModal(entity);
        break;
      case 5:
        $scope.popupThermometerModal(entity);
        break;
      case 1:
        $scope.popupWristbandModal(entity);
        break;
      case 3:
        $scope.popupOximeterModal(entity);
        break;
      case 7:
        $scope.popupOtherModal(entity);
        break;
    }
  };
  $scope.popupOtherModal = function(entity) {
    var modalInstance = $modal.open({animation:$scope.animationsEnabled, templateUrl:"components/tpls/health_report_modal/other_modal/other_modal.html", controller:"OtherModalCtrl as otherModal", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
      console.log("Modal closed at: " + new Date);
    }, function() {
      console.log("Modal dismissed at: " + new Date);
    });
  };
  $scope.animationsEnabled = true;
  $scope.popupFatModal = function(entity) {
    var modalInstance = $modal.open({animation:$scope.animationsEnabled, templateUrl:"components/tpls/health_report_modal/fat_modal/fat_modal.html", controller:"FatModalCtrl", resolve:{entity:function() {
      return entity;
    }}});
  };
  $scope.popupOximeterModal = function(entity) {
    var modalInstance = $modal.open({animation:$scope.animationsEnabled, templateUrl:"components/tpls/health_report_modal/oximeter_modal/oximeter_modal.html", controller:"OximeterModalCtrl as oximeterModal", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
      console.log("Modal closed at: " + new Date);
    }, function() {
      console.log("Modal dismissed at: " + new Date);
    });
  };
  $scope.popupWristbandModal = function(entity) {
    var modalInstance = $modal.open({animation:$scope.animationsEnabled, templateUrl:"components/tpls/health_report_modal/wristband_modal/wristband_modal.html", controller:"WristbandModalCtrl as wristbandModal", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
      console.log("Modal closed at: " + new Date);
    }, function() {
      console.log("Modal dismissed at: " + new Date);
    });
  };
  $scope.popupThermometerModal = function(entity) {
    var modalInstance = $modal.open({animation:$scope.animationsEnabled, templateUrl:"components/tpls/health_report_modal/thermometer_modal/thermometer_modal.html", controller:"ThermometerModalCtrl as thermometerModal", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
    }, function() {
    });
  };
  $scope.popupGlucosemeterModal = function(entity) {
    var modalInstance = $modal.open({animation:$scope.animationsEnabled, templateUrl:"components/tpls/health_report_modal/glucosemeter_modal/glucosemeter_modal.html", controller:"GlucosemeterModalCtrl as glucosemeterModal", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
    }, function() {
    });
  };
  $scope.popupSphygmomanometerModal = function(entity) {
    var modalInstance = $modal.open({animation:$scope.animationsEnabled, templateUrl:"components/tpls/health_report_modal/sphygmomanometer_modal/sphygmomanometer_modal.html", controller:"SphygmomanometerModalCtrl as sphygmomanometerModal", resolve:{entity:function() {
      return entity;
    }}});
  };
  $scope.genders = constants.gotGENDERS();
  $scope.gender = {selected:undefined};
  $scope.fileTypes = constants.gotFILETYPES();
  activate();
  function activate() {
  }
  i18nService.setCurrentLang("zh-CN");
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"patient_phone", name:"\u624b\u673a\u53f7\u7801", width:"16%", grouping:{groupPriority:0}}, {field:"patient_name", name:"\u59d3\u540d", width:"10%", pinnedLeft:true}, {field:"patient_age", name:"\u5e74\u9f84", width:"10%"}, {field:"patient_gender", name:"\u6027\u522b", width:"10%", cellFilter:"mapGender"}, {field:"measured_at", name:"\u6570\u636e\u6536\u96c6\u65f6\u95f4", 
  width:"14%", cellFilter:"unixTodate"}, {field:"file_type", name:"\u5065\u5eb7\u6570\u636e\u7c7b\u578b", width:"14%", cellFilter:"mapFileType"}, {name:"\u64cd\u4f5c", width:"26%", cellTemplate:'<div class="row ui-grid-cell-contents"><div class="col-md-offset-1 col-md-2"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.popup(row.entity)" >\u7f16\u8f91\u5065\u5eb7\u6863\u6848</button></div><div class="col-md-offset-2 col-md-2"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.showHistory(row.entity)">\u67e5\u770b\u5386\u53f2\u6863\u6848</button></div></div>'}], 
  onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.file.current_page = newPage - 1;
      $scope.file.page_size = pageSize;
      $scope.queryFile();
    });
  }};
  $scope.query_date = {created_from:new Date("2014-01-01"), created_to:new Date};
  $scope.query_date.created_to.setHours(23);
  $scope.query_date.created_to.setMinutes(59);
  $scope.query_date.created_to.setSeconds(59);
  $scope.arr = {data_file_type:1};
  $scope.file = {name:"", age_from:10, age_to:60, gender:undefined, file_type:[1], measured_from:$scope.query_date.created_from, measured_to:$scope.query_date.created_to, page_size:10, current_page:0, phone:undefined, query_date:undefined};
  $scope.queryFile = function() {
    $scope.file.measured_from = $filter("dateTounix")($filter("date")($scope.query_date.created_from, "yyyy-M-dd H:mm:ss"));
    $scope.file.measured_to = $filter("dateTounix")($filter("date")($scope.query_date.created_to, "yyyy-M-dd H:mm:ss"));
    $scope.file.file_type = [];
    $scope.file.file_type.push($scope.arr.data_file_type);
    db_operation.getFiles($scope.file).then(function(res) {
      $scope.gridOptions.data = res.files;
      $scope.gridOptions.totalItems = res.total_count;
      $scope.file.query_date = res.query_date;
    }, function(error) {
      console.log("error!");
    });
  };
  $scope.queryFile();
  $scope.dt = new Date;
  $scope.disabled = function(date, mode) {
    return mode === "day" && (date.getDay() === 0 || date.getDay() === 6);
  };
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.open_form_1 = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.form1_opened = true;
  };
  $scope.open_form_2 = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.form2_opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.isCollapsed = true;
};
goog.provide("jxdctsec.main.db_operation.glucosemeter_files.Ctrl");
jxdctsec.main.db_operation.glucosemeter_files.Ctrl.$inject = ["$scope", "$http", "$modal", "i18nService", "ModalService", "db_operation"];
jxdctsec.main.db_operation.glucosemeter_files.Ctrl = function($scope, $http, $modal, $stateParams, i18nService, ModalService, db_operation) {
  this.label = "some other label from main.db_operation.glucosemeter_files controller";
  $scope.patient_id = $stateParams.patient_id;
  $scope.file_type = $stateParams.file_type;
  var fileParas = {file_type:$scope.file_type, page_size:10, current_page:0, query_date:undefined};
  var getGlucoseFiles = function() {
    db_operation.getPatFiles($scope.patient_id, fileParas).then(function(data) {
      console.log(data);
      $scope.patient_name = data.patient_name;
      $scope.patient_phone = data.patient_phone;
      $scope.gridOptions.data = data.files;
      fileParas.query_date = data.query_date;
      $scope.gridOptions.totalItems = data.total_count;
    }, function(error) {
      console.log(error);
    });
  };
  getGlucoseFiles();
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"measured_at", name:"\u6536\u96c6\u65f6\u95f4", width:"35%", cellFilter:"unixTodate"}, {field:"period", name:"\u6d4b\u91cf\u65f6\u95f4\u6bb5", width:"35%"}, {field:"glucosemeter_value", name:"\u8840\u7cd6\u503c", width:"30%"}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      fileParas.current_page = newPage - 1;
      fileParas.page_size = pageSize;
      getGlucoseFiles();
    });
  }};
};
goog.provide("jxdctsec.main.db_operation.glucosemeter_files.module");
goog.require("jxdctsec.main.db_operation.glucosemeter_files.Ctrl");
jxdctsec.main.db_operation.glucosemeter_files.module = angular.module("main.db_operation.glucosemeter_files", ["ui.router"]);
jxdctsec.main.db_operation.glucosemeter_files.module.configuration = function($stateProvider) {
  $stateProvider.state("main.db_operation.glucosemeter_files", {url:"/glucosemeter_files/:patient_id/:file_type", templateUrl:"states/main/db_operation/glucosemeter_files/glucosemeter_files.html", controller:"GlucosemeterFilesCtrl as glucosemeterFiles"});
};
jxdctsec.main.db_operation.glucosemeter_files.module.config(jxdctsec.main.db_operation.glucosemeter_files.module.configuration).controller("GlucosemeterFilesCtrl", jxdctsec.main.db_operation.glucosemeter_files.Ctrl);
goog.provide("jxdctsec.main.db_operation.other_files.Ctrl");
jxdctsec.main.db_operation.other_files.Ctrl.$inject = ["$scope", "$http", "$modal", "i18nService", "ModalService", "db_operation"];
jxdctsec.main.db_operation.other_files.Ctrl = function($scope, $http, $modal, $stateParams, i18nService, ModalService, db_operation) {
  this.label = "some other label from main.db_operation.other_files controller";
  $scope.patient_id = $stateParams.patient_id;
  $scope.file_type = $stateParams.file_type;
  i18nService.setCurrentLang("zh-CN");
  var fileParas = {file_type:$scope.file_type, page_size:10, current_page:0, query_date:undefined};
  var getOtherFiles = function() {
    db_operation.getPatFiles($scope.patient_id, fileParas).then(function(data) {
      console.log(data);
      $scope.patient_name = data.patient_name;
      $scope.patient_phone = data.patient_phone;
      $scope.gridOptions.data = data.files;
      fileParas.query_date = data.query_date;
      $scope.gridOptions.totalItems = data.total_count;
    }, function(error) {
      console.log(error);
    });
  };
  getOtherFiles();
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"measured_at", name:"\u6570\u636e\u6536\u96c6\u65f6\u95f4", width:"50%", cellFilter:"unixTodate"}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      fileParas.current_page = newPage - 1;
      fileParas.page_size = pageSize;
      getOtherFiles();
    });
  }};
};
goog.provide("jxdctsec.main.db_operation.other_files.module");
goog.require("jxdctsec.main.db_operation.other_files.Ctrl");
jxdctsec.main.db_operation.other_files.module = angular.module("main.db_operation.other_files", ["ui.router"]);
jxdctsec.main.db_operation.other_files.module.configuration = function($stateProvider) {
  $stateProvider.state("main.db_operation.other_files", {url:"/other_files/:patient_id/:file_type", templateUrl:"states/main/db_operation/other_files/other_files.html", controller:"OtherFilesCtrl as oherFilesCtrl"});
};
jxdctsec.main.db_operation.other_files.module.config(jxdctsec.main.db_operation.other_files.module.configuration).controller("OtherFilesCtrl", jxdctsec.main.db_operation.other_files.Ctrl);
goog.provide("jxdctsec.main.db_operation.oximeter_files.Ctrl");
jxdctsec.main.db_operation.oximeter_files.Ctrl.$inject = ["$scope", "$http", "$modal", "i18nService", "ModalService", "db_operation"];
jxdctsec.main.db_operation.oximeter_files.Ctrl = function($scope, $http, $modal, $stateParams, i18nService, ModalService, db_operation) {
  this.label = "some other label from main.db_operation.oximeter_files controller";
  $scope.patient_id = $stateParams.patient_id;
  $scope.file_type = $stateParams.file_type;
  i18nService.setCurrentLang("zh-CN");
  var fileParas = {file_type:$scope.file_type, page_size:10, current_page:0, query_date:undefined};
  var getOximeterFiles = function() {
    db_operation.getPatFiles($scope.patient_id, fileParas).then(function(data) {
      console.log(data);
      $scope.patient_name = data.patient_name;
      $scope.patient_phone = data.patient_phone;
      $scope.gridOptions.data = data.files;
      fileParas.query_date = data.query_date;
      $scope.gridOptions.totalItems = data.total_count;
    }, function(error) {
      console.log(error);
    });
  };
  getOximeterFiles();
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"measured_at", name:"\u6570\u636e\u6536\u96c6\u65f6\u95f4", width:"50%", cellFilter:"unixTodate"}, {field:"oximeter_value", name:"\u8840\u6c27\u503c", width:"50%"}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      fileParas.current_page = newPage - 1;
      fileParas.page_size = pageSize;
      getOximeterFiles();
    });
  }};
};
goog.provide("jxdctsec.main.db_operation.oximeter_files.module");
goog.require("jxdctsec.main.db_operation.oximeter_files.Ctrl");
jxdctsec.main.db_operation.oximeter_files.module = angular.module("main.db_operation.oximeter_files", ["ui.router"]);
jxdctsec.main.db_operation.oximeter_files.module.configuration = function($stateProvider) {
  $stateProvider.state("main.db_operation.oximeter_files", {url:"/oximeter_files/:patient_id/:file_type", templateUrl:"states/main/db_operation/oximeter_files/oximeter_files.html", controller:"OximeterFilesCtrl as oximeterFiles"});
};
jxdctsec.main.db_operation.oximeter_files.module.config(jxdctsec.main.db_operation.oximeter_files.module.configuration).controller("OximeterFilesCtrl", jxdctsec.main.db_operation.oximeter_files.Ctrl);
goog.provide("jxdctsec.main.db_operation.sphygmomanometer_files.Ctrl");
jxdctsec.main.db_operation.sphygmomanometer_files.Ctrl.$inject = ["$scope", "$http", "$modal", "i18nService", "ModalService", "db_operation"];
jxdctsec.main.db_operation.sphygmomanometer_files.Ctrl = function($scope, $http, $modal, $stateParams, i18nService, ModalService, db_operation) {
  this.label = "some other label from main.db_operation.sphygmomanometer_files controller";
  $scope.patient_id = $stateParams.patient_id;
  $scope.file_type = $stateParams.file_type;
  i18nService.setCurrentLang("zh-CN");
  var fileParas = {file_type:$scope.file_type, page_size:10, current_page:0, query_date:undefined};
  var getSphygFiles = function() {
    db_operation.getPatFiles($scope.patient_id, fileParas).then(function(data) {
      console.log(data);
      $scope.patient_name = data.patient_name;
      $scope.patient_phone = data.patient_phone;
      $scope.gridOptions.data = data.files;
      fileParas.query_date = data.query_date;
      $scope.gridOptions.totalItems = data.total_count;
    }, function(error) {
      console.log(error);
    });
  };
  getSphygFiles();
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"measured_at", name:"\u6570\u636e\u6536\u96c6\u65f6\u95f4", width:"25%", cellFilter:"unixTodate"}, {field:"systolic_pressure", name:"\u6536\u7f29\u538b", width:"25%"}, {field:"diastolic_pressure", name:"\u8212\u5f20\u538b", width:"25%"}, {field:"heart_rate", name:"\u5fc3\u7387", width:"25%"}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      fileParas.current_page = newPage - 1;
      fileParas.page_size = pageSize;
      getSphygFiles();
    });
  }};
};
goog.provide("jxdctsec.main.db_operation.sphygmomanometer_files.module");
goog.require("jxdctsec.main.db_operation.sphygmomanometer_files.Ctrl");
jxdctsec.main.db_operation.sphygmomanometer_files.module = angular.module("main.db_operation.sphygmomanometer_files", ["ui.router"]);
jxdctsec.main.db_operation.sphygmomanometer_files.module.configuration = function($stateProvider) {
  $stateProvider.state("main.db_operation.sphygmomanometer_files", {url:"/sphygmomanometer_files/:patient_id/:file_type", templateUrl:"states/main/db_operation/sphygmomanometer_files/sphygmomanometer_files.html", controller:"SphygmomanometerFilesCtrl as sphygmomanometerFiles"});
};
jxdctsec.main.db_operation.sphygmomanometer_files.module.config(jxdctsec.main.db_operation.sphygmomanometer_files.module.configuration).controller("SphygmomanometerFilesCtrl", jxdctsec.main.db_operation.sphygmomanometer_files.Ctrl);
goog.provide("jxdctsec.main.db_operation.thermometer_files.Ctrl");
jxdctsec.main.db_operation.thermometer_files.Ctrl.$inject = ["$scope", "$http", "$modal", "i18nService", "ModalService", "db_operation"];
jxdctsec.main.db_operation.thermometer_files.Ctrl = function($scope, $http, $modal, $stateParams, i18nService, ModalService, db_operation) {
  this.label = "some other label from main.db_operation.thermometer_files controller";
  $scope.patient_id = $stateParams.patient_id;
  $scope.file_type = $stateParams.file_type;
  i18nService.setCurrentLang("zh-CN");
  var fileParas = {file_type:$scope.file_type, page_size:10, current_page:0, query_date:undefined};
  var getThermomeFiles = function() {
    db_operation.getPatFiles($scope.patient_id, fileParas).then(function(data) {
      console.log(data);
      $scope.patient_name = data.patient_name;
      $scope.patient_phone = data.patient_phone;
      $scope.gridOptions.data = data.files;
      fileParas.query_date = data.query_date;
      $scope.gridOptions.totalItems = data.total_count;
    }, function(error) {
      console.log(error);
    });
  };
  getThermomeFiles();
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"measured_at", name:"\u6570\u636e\u6536\u96c6\u65f6\u95f4", width:"50%", cellFilter:"unixTodate", pinnedLeft:true}, {field:"thermometer_value", name:"\u4f53\u6e29", width:"52%"}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      fileParas.current_page = newPage - 1;
      fileParas.page_size = pageSize;
      getThermomeFiles();
    });
  }};
};
goog.provide("jxdctsec.main.db_operation.thermometer_files.module");
goog.require("jxdctsec.main.db_operation.thermometer_files.Ctrl");
jxdctsec.main.db_operation.thermometer_files.module = angular.module("main.db_operation.thermometer_files", ["ui.router"]);
jxdctsec.main.db_operation.thermometer_files.module.configuration = function($stateProvider) {
  $stateProvider.state("main.db_operation.thermometer_files", {url:"/thermometer_files/:patient_id/:file_type", templateUrl:"states/main/db_operation/thermometer_files/thermometer_files.html", controller:"ThermometerFilesCtrl as thermometerFiles"});
};
jxdctsec.main.db_operation.thermometer_files.module.config(jxdctsec.main.db_operation.thermometer_files.module.configuration).controller("ThermometerFilesCtrl", jxdctsec.main.db_operation.thermometer_files.Ctrl);
goog.provide("jxdctsec.main.db_operation.wristband_files.Ctrl");
jxdctsec.main.db_operation.wristband_files.Ctrl.$inject = ["$scope", "$http", "$modal", "i18nService", "ModalService", "db_operation"];
jxdctsec.main.db_operation.wristband_files.Ctrl = function($scope, $http, $modal, $stateParams, i18nService, ModalService, db_operation) {
  this.label = "some other label from main.db_operation.wristband_files controller";
  $scope.patient_id = $stateParams.patient_id;
  $scope.file_type = $stateParams.file_type;
  i18nService.setCurrentLang("zh-CN");
  var fileParas = {file_type:$scope.file_type, page_size:10, current_page:0, query_date:undefined};
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"measured_at", name:"\u6570\u636e\u6536\u96c6\u65f6\u95f4", width:"15%", pinnedLeft:true, cellFilter:"unixTodate"}, {field:"step_count", name:"\u6b65\u6570", width:"10%"}, {field:"walk_count", name:"\u884c\u8d70\u6b65\u6570", width:"8%"}, {field:"run_count", name:"\u8dd1\u6b65\u6b65\u6570", width:"8%"}, {field:"distance", name:"\u8ddd\u79bb", width:"5%"}, {field:"walk_distance", 
  name:"\u884c\u8d70\u8ddd\u79bb", width:"8%"}, {field:"run_distance", name:"\u8dd1\u6b65\u8ddd\u79bb", width:"8%"}, {field:"calories", name:"\u6d88\u8017\u80fd\u91cf", width:"8%"}, {field:"walk_calories", name:"\u884c\u8d70\u6d88\u8017\u80fd\u91cf", width:"10%"}, {field:"run_calories", name:"\u8dd1\u6b65\u6d88\u8017\u80fd\u91cf", width:"10%"}, {field:"deep_duration", name:"\u6df1\u7761\u65f6\u95f4", width:"10%"}, {field:"shallow_duration", name:"\u6d45\u7761\u65f6\u95f4", width:"10%"}, {field:"heart_rate", 
  name:"\u5fc3\u7387", width:"10%"}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      fileParas.current_page = newPage - 1;
      fileParas.page_size = pageSize;
      getWristbandFiles();
    });
  }};
  var getWristbandFiles = function() {
    db_operation.getPatFiles($scope.patient_id, fileParas).then(function(data) {
      console.log(data);
      $scope.patient_name = data.patient_name;
      $scope.patient_phone = data.patient_phone;
      $scope.gridOptions.data = data.files;
      fileParas.query_date = data.query_date;
      $scope.gridOptions.totalItems = data.total_count;
    });
  };
  getWristbandFiles();
};
goog.provide("jxdctsec.main.db_operation.wristband_files.module");
goog.require("jxdctsec.main.db_operation.wristband_files.Ctrl");
jxdctsec.main.db_operation.wristband_files.module = angular.module("main.db_operation.wristband_files", ["ui.router", "ui.grid.pinning", "ui.grid", "ui.grid.pagination"]);
jxdctsec.main.db_operation.wristband_files.module.configuration = function($stateProvider) {
  $stateProvider.state("main.db_operation.wristband_files", {url:"/wristband_files/:patient_id/:file_type", templateUrl:"states/main/db_operation/wristband_files/wristband_files.html", controller:"WristbandFilesCtrl as wristbandFiles"});
};
jxdctsec.main.db_operation.wristband_files.module.config(jxdctsec.main.db_operation.wristband_files.module.configuration).controller("WristbandFilesCtrl", jxdctsec.main.db_operation.wristband_files.Ctrl);
goog.provide("jxdctsec.main.health_consultation.Ctrl");
jxdctsec.main.health_consultation.Ctrl.$inject = ["$q", "$scope", "$filter", "i18nService", "constants", "health_con", "ui.grid", "ui.grid.pagination"];
jxdctsec.main.health_consultation.Ctrl = function($q, $scope, $filter, $state, $modal, i18nService, constants, health_con) {
  this.label = "some label from health consultation controller";
  var ctrl = this;
  ctrl.districts = constants.gotDISTRICTS();
  ctrl.district = {selected:undefined};
  ctrl.district_selected = [];
  ctrl.departments = constants.gotDEPARTMENTS();
  ctrl.department = {selected:undefined};
  ctrl.department_selected = [];
  $scope.consultation_status = constants.gotHEALTHCONSULTATIONSTATUS();
  console.log(ctrl.district_selected);
  activate();
  function activate() {
  }
  $scope.con_status = "\u5df2\u56de\u590d";
  $scope.query_date = {created_from:new Date("2014-01-01"), created_to:new Date};
  $scope.query_date.created_to.setHours(23);
  $scope.query_date.created_to.setMinutes(59);
  $scope.query_date.created_to.setSeconds(59);
  var query_date = -1;
  $scope.tmp = {district_id:undefined, department_id:undefined};
  $scope.clearDistrict = function() {
    $scope.tmp.district_id = undefined;
    $scope.consultation.district_id = undefined;
  };
  $scope.clearDepartment = function() {
    $scope.tmp.department_id = undefined;
    $scope.consultation.department_id = undefined;
  };
  $scope.consultation = {district_id:[1], department_id:[0], status:undefined, created_from:$filter("dateTounix")($filter("date")($scope.query_date.created_from, "yyyy-M-dd H:mm:ss")), created_to:$filter("dateTounix")($filter("date")($scope.query_date.created_to, "yyyy-M-dd H:mm:ss")), page_size:10, current_page:0, query_date:query_date};
  $scope.queryConsultation = function() {
    $scope.consultation.created_from = $filter("dateTounix")($filter("date")($scope.query_date.created_from, "yyyy-M-dd H:mm:ss"));
    $scope.consultation.created_to = $filter("dateTounix")($filter("date")($scope.query_date.created_to, "yyyy-M-dd H:mm:ss"));
    $scope.consultation.department_id = [];
    $scope.consultation.district_id = [];
    if ($scope.tmp.department_id === undefined) {
      $scope.consultation.department_id = undefined;
    } else {
      $scope.consultation.department_id.push($scope.tmp.department_id);
    }
    if ($scope.tmp.district_id === undefined) {
      $scope.consultation.district_id = undefined;
    } else {
      $scope.consultation.district_id.push($scope.tmp.district_id);
    }
    health_con.dealConsultation($scope.consultation).then(function(res) {
      $scope.gridOptions.data = res.consultations;
      $scope.gridOptions.totalItems = res.total_count;
      $scope.consultation.query_date = res.query_date;
    }, function(error) {
      console.log("error!");
    });
  };
  $scope.queryConsultation();
  i18nService.setCurrentLang("zh-CN");
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"user_name", name:"\u7528\u6237\u6635\u79f0", width:"15%", pinnedLeft:true}, {field:"user_phone", name:"\u624b\u673a\u53f7\u7801", width:"15%"}, {field:"district_id", name:"\u5730\u533a\u7c7b\u522b", width:"20%", cellFilter:"mapDistrict"}, {field:"created_at", name:"\u6570\u636e\u6536\u96c6\u65f6\u95f4", width:"20%", cellFilter:"unixTodate"}, {field:"status", name:"\u5df2\u56de\u590d", 
  width:"15%", cellFilter:"mapHelathConsultationStatus"}, {name:"\u64cd\u4f5c", enableFiltering:false, width:"15%", cellTemplate:'<div class="row"><div class="col-md-offset-1 col-md-2"><button class="btn btn-link btn-group-lg" ng-click="grid.appScope.replyModal(row.entity)" >\u56de\u590d</button></div></div>', pinnedRight:true}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.consultation.current_page = newPage - 1;
      $scope.consultation.page_size = pageSize;
      $scope.queryConsultation();
    });
  }};
  $scope.replyModal = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/health_report_modal/health_con_modal/health_con_modal.html", controller:"HealthConModalCtrl", size:"lg", resolve:{entity:function() {
      return entity;
    }}});
  };
  $scope.dt = new Date;
  $scope.open_form_1 = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.form1_opened = true;
  };
  $scope.open_form_2 = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.form2_opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
};
jxdctsec.main.health_consultation.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxdctsec.main.health_data.fat_datas.Ctrl");
jxdctsec.main.health_data.fat_datas.Ctrl.$inject = ["$scope", "$http", "$modal", "$filter", "i18nService", "ModalService", "health_data"];
jxdctsec.main.health_data.fat_datas.Ctrl = function($scope, $http, $modal, $stateParams, $filter, i18nService, ModalService, health_data) {
  this.label = "some other label from main.health_data.fat_datas controller";
  $scope.permission_name = $stateParams.permission_name;
  $scope.page_param = {page_size:10, current_page:0, query_date:undefined};
  $scope.queryFatDatas = function() {
    health_data.getPermissionData($stateParams.permission_id, $scope.page_param).then(function(res) {
      console.log("\u8102\u80aa\u6570\u636e");
      console.log(res);
      $scope.gridOptions.data = res.data_list;
      $scope.page_param.query_date = res.query_date;
      $scope.gridOptions.totalItems = res.total_count;
    });
  };
  $scope.queryFatDatas();
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"phone", name:"\u624b\u673a\u53f7\u7801", width:"10%", pinnedLeft:true, grouping:{groupPriority:0}}, {field:"nick_name", name:"\u6635\u79f0", width:"10%", pinnedLeft:true}, {field:"measured_at", name:"\u6570\u636e\u6536\u96c6\u65f6\u95f4", width:"15%", cellFilter:"unixTodate"}, {field:"bmi_value", name:"BMI", width:"5%"}, {field:"weight_value", name:"\u4f53\u91cd", 
  width:"5%"}, {field:"bone_value", name:"\u9aa8\u9abc", width:"5%"}, {field:"calorie_value", name:"\u5361\u8def\u91cc", width:"8%"}, {field:"fat_value", name:"\u8102\u80aa\u542b\u91cf", width:"8%"}, {field:"moisture_value", name:"\u6c34\u5206\u542b\u91cf", width:"8%"}, {field:"muscle_value", name:"\u808c\u8089\u542b\u91cf", width:"8%"}, {field:"visceral_fat_value", name:"\u5185\u810f\u8102\u80aa\u542b\u91cf", width:"8%"}, {name:"\u8bc4\u6d4b", enableFiltering:false, width:"15%", cellTemplate:'<div class="row ui-grid-cell-contents"><div class="col-md-offset-1 col-md-2"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.evaluation(row.entity)" >\u8bc4\u6d4b</button></div></div>', 
  pinnedRight:true}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.page_param.current_page = newPage - 1;
      $scope.page_param.page_size = pageSize;
      $scope.queryFatDatas();
    });
  }};
  i18nService.setCurrentLang("zh-CN");
  $scope.evaluation = function(entity) {
    var modalInstance = $modal.open({animation:$scope.animationsEnabled, templateUrl:"components/tpls/health_data_operation_modals/evaluation_fat_modal.html", controller:"FatEvaluationCtrl", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
    }, function() {
      if (isNaN(entity.measured_at)) {
        entity.measured_at = $filter("dateTounix")(entity.measured_at);
      }
    });
  };
};
goog.provide("jxdctsec.main.health_data.glucosemeter_datas.Ctrl");
jxdctsec.main.health_data.glucosemeter_datas.Ctrl.$inject = ["$scope", "$http", "$modal", "$filter", "i18nService", "ModalService", "health_data"];
jxdctsec.main.health_data.glucosemeter_datas.Ctrl = function($scope, $http, $modal, $stateParams, $filter, i18nService, ModalService, health_data) {
  this.label = "some other label from main.db_operation.glucosemeter_files controller";
  $scope.permission_name = $stateParams.permission_name;
  $scope.page_param = {page_size:10, current_page:0, query_date:undefined};
  $scope.queryGlucosemeterDatas = function() {
    health_data.getPermissionData($stateParams.permission_id, $scope.page_param).then(function(res) {
      $scope.gridOptions.data = res.data_list;
      $scope.page_param.query_date = res.query_date;
      $scope.gridOptions.totalItems = res.total_count;
    });
  };
  $scope.queryGlucosemeterDatas();
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"phone", name:"\u624b\u673a\u53f7\u7801", width:"17%", pinnedLeft:true, grouping:{groupPriority:0}}, {field:"nick_name", name:"\u6635\u79f0", width:"17%", pinnedLeft:true}, {field:"measured_at", name:"\u6536\u96c6\u65f6\u95f4", width:"17%", cellFilter:"unixTodate"}, {field:"period", name:"\u6d4b\u91cf\u65f6\u95f4\u6bb5", width:"17%", cellFilter:"mapPeriods"}, {field:"glucosemeter_value", 
  name:"\u8840\u7cd6\u503c", width:"17%"}, {name:"\u8bc4\u6d4b", enableFiltering:false, width:"17%", cellTemplate:'<div class="row ui-grid-cell-contents"><div class="col-md-offset-1 col-md-2"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.evaluation(row.entity)" >\u8bc4\u6d4b</button></div></div>', pinnedRight:true}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.page_param.current_page = newPage - 1;
      $scope.page_param.page_size = pageSize;
      $scope.queryGlucosemeterDatas();
    });
  }};
  i18nService.setCurrentLang("zh-CN");
  $scope.evaluation = function(entity) {
    var modalInstance = $modal.open({animation:$scope.animationsEnabled, templateUrl:"components/tpls/health_data_operation_modals/evaluation_glucosemeter_modal.html", controller:"GlucosemeterEvaluationCtrl", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
    }, function() {
      if (isNaN(entity.measured_at)) {
        entity.measured_at = $filter("dateTounix")(entity.measured_at);
      }
    });
  };
};
goog.provide("jxdctsec.main.health_data.Ctrl");
jxdctsec.main.health_data.Ctrl = function() {
  this.label = "some label from health data controller";
};
jxdctsec.main.health_data.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxdctsec.main.health_data.oximeter_datas.Ctrl");
jxdctsec.main.health_data.oximeter_datas.Ctrl.$inject = ["$scope", "$http", "$modal", "$filter", "i18nService", "ModalService", "health_data"];
jxdctsec.main.health_data.oximeter_datas.Ctrl = function($scope, $http, $modal, $stateParams, i18nService, ModalService, health_data, $filter) {
  this.label = "some other label from main.db_operation.oximeter_files controller";
  $scope.permission_name = $stateParams.permission_name;
  $scope.page_param = {page_size:10, current_page:0, query_date:undefined};
  $scope.queryOximeterDatas = function() {
    health_data.getPermissionData($stateParams.permission_id, $scope.page_param).then(function(res) {
      console.log("\u8840\u6c27\u6570\u636e");
      console.log(res);
      $scope.gridOptions.data = res.data_list;
      $scope.page_param.query_date = res.query_date;
      $scope.gridOptions.totalItems = res.total_count;
    });
  };
  $scope.queryOximeterDatas();
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"phone", name:"\u624b\u673a\u53f7\u7801", width:"20%", pinnedLeft:true, grouping:{groupPriority:0}}, {field:"nick_name", name:"\u6635\u79f0", width:"20%", pinnedLeft:true}, {field:"measured_at", name:"\u6570\u636e\u6536\u96c6\u65f6\u95f4", width:"20%", cellFilter:"unixTodate"}, {field:"oximeter_value", name:"\u8840\u6c27\u503c", width:"20%"}, {name:"\u8bc4\u6d4b", enableFiltering:false, 
  width:"25%", cellTemplate:'<div class="row ui-grid-cell-contents"><div class="col-md-offset-1 col-md-2"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.evaluation(row.entity)" >\u8bc4\u6d4b</button></div></div>', pinnedRight:true}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.page_param.current_page = newPage - 1;
      $scope.page_param.page_size = pageSize;
      $scope.queryOximeterDatas();
    });
  }};
  $scope.evaluation = function(entity) {
    var modalInstance = $modal.open({animation:$scope.animationsEnabled, templateUrl:"components/tpls/health_data_operation_modals/evaluation_oximeter_modal.html", controller:"OximeterEvaluationCtrl", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
    }, function() {
      if (isNaN(entity.measured_at)) {
        entity.measured_at = $filter("dateTounix")(entity.measured_at);
      }
    });
  };
};
goog.provide("jxdctsec.main.health_data.permission_list.Ctrl");
jxdctsec.main.health_data.permission_list.Ctrl.$inject = ["$scope", "$http", "$modal", "$state", "$q", "$interval", "i18nService", "health_data", "constants"];
jxdctsec.main.health_data.permission_list.Ctrl = function($scope, $http, $modal, $state, $q, $interval, i18nService, health_data, constants, uiGridGroupingConstants) {
  var ctrl = this;
  i18nService.setCurrentLang("zh-cn");
  $scope.show = function(entity) {
    switch(entity.data_type) {
      case 2:
        $state.go("main.health_data.sphygmomanometer_datas", {"permission_id":entity.permission_id, "permission_name":entity.permission_name});
        break;
      case 4:
        $state.go("main.health_data.glucosemeter_datas", {"permission_id":entity.permission_id, "permission_name":entity.permission_name});
        break;
      case 6:
        $state.go("main.health_data.fat_datas", {"permission_id":entity.permission_id, "permission_name":entity.permission_name});
        break;
      case 5:
        $state.go("main.health_data.thermometer_datas", {"permission_id":entity.permission_id, "permission_name":entity.permission_name});
        break;
      case 1:
        $state.go("main.health_data.wristband_datas", {"permission_id":entity.permission_id, "permission_name":entity.permission_name});
        break;
      case 3:
        $state.go("main.health_data.oximeter_datas", {"permission_id":entity.permission_id, "permission_name":entity.permission_name});
        break;
    }
  };
  this.label = "some other label from main.health_data.permission_list controller";
  ctrl.dataTypes = constants.gotDATATYPES();
  activate();
  function activate() {
  }
  $scope.datatype = {permission_name:undefined, data_type:undefined, page_size:10, current_page:0, query_date:undefined};
  $scope.getPermissionList = function() {
    health_data.getPermissions($scope.datatype).then(function(res) {
      console.log(res);
      $scope.gridOptions.data = res.permission_list;
      $scope.datatype.query_date = res.query_date;
      $scope.gridOptions.totalItems = res.total_count;
    }, function(error) {
      console.log(error);
    });
  };
  $scope.getPermissionList();
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, treeRowHeaderAlwaysVisible:false, columnDefs:[{field:"permission_name", name:"\u6570\u636e\u96c6\u540d\u79f0", enableCellEdit:false, width:"15%"}, {field:"district_id", name:"\u5730\u533a", enableCellEdit:false, width:"10%", cellFilter:"mapDistrict"}, {field:"province_id", name:"\u7701\u4efd", enableCellEdit:false, width:"10%", cellFilter:"mapProvince"}, {field:"city_id", name:"\u57ce\u5e02", 
  enableCellEdit:false, width:"10%", cellFilter:"mapCity"}, {field:"zone_id", name:"\u533a\u53bf", enableCellEdit:false, width:"15%", cellFilter:"mapZone"}, {field:"data_type", name:"\u6570\u636e\u7c7b\u578b", enableCellEdit:false, width:"15%", cellFilter:"mapDataType"}, {name:"\u6570\u636e\u8303\u56f4", enableFiltering:false, width:"15%", cellTemplate:'<div class="row"><div class="col-md-offset-1 col-md-2"><button class="btn btn-link btn-group-lg" ng-click="grid.appScope.showDetail(row.entity)" >\u67e5\u770b\u6761\u4ef6</button></div></div>', 
  pinnedRight:true}, {name:"\u6570\u636e\u5217\u8868", enableFiltering:false, width:"10%", cellTemplate:'<div class="row ui-grid-cell-contents"><div class="col-md-offset-1 col-md-2"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.show(row.entity)">\u67e5\u8be2\u6570\u636e</button></div></div>', pinnedRight:true}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.datatype.current_page = newPage - 1;
      $scope.datatype.page_size = pageSize;
      $scope.getPermissionList();
    });
  }};
  $scope.showDetail = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/health_report_modal/permission_list_modal/permission_list_modal.html", controller:"PermissionListModalCtrl", resolve:{entity:function() {
      return entity;
    }, "WRISTBANDCOLUMNSPromise":function(constants) {
      return constants.WRISTBANDCOLUMNSPromise;
    }, "SPHYGMOMANOMETERCOLUMNSPromise":function(constants) {
      return constants.SPHYGMOMANOMETERCOLUMNSPromise;
    }, "GLUCOSEMETERCOLUMNSPromise":function(constants) {
      return constants.GLUCOSEMETERCOLUMNSPromise;
    }, "THERMOMETERCOLUMNSPromise":function(constants) {
      return constants.THERMOMETERCOLUMNSPromise;
    }, "OXIMETERCOLUMNSPromise":function(constants) {
      return constants.OXIMETERCOLUMNSPromise;
    }, "FATCOLUMNSPromise":function(constants) {
      return constants.FATCOLUMNSPromise;
    }, "COMPARISONOPSPromise":function(constants) {
      return constants.COMPARISONOPSPromise;
    }, "LOGICALOPSPromise":function(constants) {
      return constants.LOGICALOPSPromise;
    }}});
  };
  $scope.evaluation = function(entity) {
    var modalInstance = $modal.open({animation:$scope.animationsEnabled, templateUrl:"components/tpls/health_data_operation_modals/evaluation_wristband_modal.html", controller:"EvaluationCtrl", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
      console.log("Modal closed at: " + new Date);
    }, function() {
      console.log("Modal dismissed at: " + new Date);
    });
  };
};
goog.provide("jxdctsec.main.health_data.sphygmomanometer_datas.Ctrl");
jxdctsec.main.health_data.sphygmomanometer_datas.Ctrl.$inject = ["$scope", "$http", "$modal", "i18nService", "ModalService", "health_data", "$filter"];
jxdctsec.main.health_data.sphygmomanometer_datas.Ctrl = function($scope, $http, $modal, $stateParams, i18nService, ModalService, health_data, $filter) {
  this.label = "some other label from main.db_operation.sphygmomanometer_files controller";
  $scope.permission_name = $stateParams.permission_name;
  $scope.page_param = {page_size:10, current_page:0, query_date:undefined};
  $scope.querySphygmomanometerDatas = function() {
    health_data.getPermissionData($stateParams.permission_id, $scope.page_param).then(function(res) {
      console.log("\u8840\u538b\u6570\u636e");
      console.log(res);
      $scope.gridOptions.data = res.data_list;
      $scope.page_param.query_date = res.query_date;
      $scope.gridOptions.totalItems = res.total_count;
    });
  };
  $scope.querySphygmomanometerDatas();
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"phone", name:"\u624b\u673a\u53f7\u7801", width:"15%", pinnedLeft:true, grouping:{groupPriority:0}}, {field:"nick_name", name:"\u6635\u79f0", width:"15%", pinnedLeft:true}, {field:"measured_at", name:"\u6570\u636e\u6536\u96c6\u65f6\u95f4", width:"15%", cellFilter:"unixTodate"}, {field:"systolic_pressure", name:"\u6536\u7f29\u538b", width:"15%"}, {field:"diastolic_pressure", 
  name:"\u8212\u5f20\u538b", width:"15%"}, {field:"heart_rate", name:"\u5fc3\u7387", width:"15%"}, {name:"\u8bc4\u6d4b", enableFiltering:false, width:"15%", cellTemplate:'<div class="row ui-grid-cell-contents"><div class="col-md-offset-1 col-md-2"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.evaluation(row.entity)" >\u8bc4\u6d4b</button></div></div>', pinnedRight:true}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.page_param.current_page = newPage - 1;
      $scope.page_param.page_size = pageSize;
      $scope.querySphygmomanometerDatas();
    });
  }};
  i18nService.setCurrentLang("zh-CN");
  $scope.evaluation = function(entity) {
    var modalInstance = $modal.open({animation:$scope.animationsEnabled, templateUrl:"components/tpls/health_data_operation_modals/evaluation_sphygmomanometer_modal.html", controller:"sphygmomanometerEvaluationCtrl", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
    }, function() {
      if (isNaN(entity.measured_at)) {
        entity.measured_at = $filter("dateTounix")(entity.measured_at);
      }
    });
  };
};
goog.provide("jxdctsec.main.health_data.thermometer_datas.Ctrl");
jxdctsec.main.health_data.thermometer_datas.Ctrl.$inject = ["$scope", "$http", "$modal", "i18nService", "ModalService", "health_data", "$filter"];
jxdctsec.main.health_data.thermometer_datas.Ctrl = function($scope, $http, $modal, $stateParams, i18nService, ModalService, health_data, $filter) {
  this.label = "some other label from main.db_operation.thermometer_files controller";
  $scope.permission_name = $stateParams.permission_name;
  $scope.page_param = {page_size:10, current_page:0, query_date:undefined};
  $scope.queryThermometerDatas = function() {
    console.log($stateParams.permission_id);
    console.log($scope.page_param);
    health_data.getPermissionData($stateParams.permission_id, $scope.page_param).then(function(res) {
      console.log("\u4f53\u6e29\u6570\u636e");
      console.log(res);
      $scope.gridOptions.data = res.data_list;
      $scope.page_param.query_date = res.query_date;
      $scope.gridOptions.totalItems = res.total_count;
    });
  };
  $scope.queryThermometerDatas();
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"phone", name:"\u624b\u673a\u53f7\u7801", width:"20%", pinnedLeft:true, grouping:{groupPriority:0}}, {field:"nick_name", name:"\u6635\u79f0", width:"20%", pinnedLeft:true}, {field:"measured_at", name:"\u6570\u636e\u6536\u96c6\u65f6\u95f4", width:"20%", cellFilter:"unixTodate"}, {field:"thermometer_value", name:"\u4f53\u6e29", width:"20%"}, {name:"\u8bc4\u6d4b", enableFiltering:false, 
  width:"25%", cellTemplate:'<div class="row ui-grid-cell-contents"><div class="col-md-offset-1 col-md-2"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.evaluation(row.entity)" >\u8bc4\u6d4b</button></div></div>', pinnedRight:true}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.page_param.current_page = newPage - 1;
      $scope.page_param.page_size = pageSize;
      $scope.queryThermometerDatas();
    });
  }};
  i18nService.setCurrentLang("zh-CN");
  $scope.evaluation = function(entity) {
    var modalInstance = $modal.open({animation:$scope.animationsEnabled, templateUrl:"components/tpls/health_data_operation_modals/evaluation_thermometer_modal.html", controller:"ThermometerEvaluationCtrl", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
    }, function() {
      if (isNaN(entity.measured_at)) {
        entity.measured_at = $filter("dateTounix")(entity.measured_at);
      }
    });
  };
};
goog.provide("jxdctsec.main.health_data.wristband_datas.Ctrl");
jxdctsec.main.health_data.wristband_datas.Ctrl.$inject = ["$scope", "$http", "$modal", "$stateParams", "i18nService", "ModalService", "health_data", "$filter"];
jxdctsec.main.health_data.wristband_datas.Ctrl = function($scope, $http, $modal, $stateParams, i18nService, ModalService, health_data, $filter) {
  $scope.permission_name = $stateParams.permission_name;
  this.label = "some other label from main.db_operation.wristband_files controller";
  var ctrl = this;
  i18nService.setCurrentLang("zh-CN");
  $scope.page_param = {page_size:10, current_page:0, query_date:undefined};
  $scope.queryWristbandDatas = function() {
    health_data.getPermissionData($stateParams.permission_id, $scope.page_param).then(function(res) {
      console.log("\u624b\u73af\u6570\u636e");
      console.log(res);
      $scope.gridOptions.data = res.data_list;
      $scope.page_param.query_date = res.query_date;
      $scope.gridOptions.totalItems = res.total_count;
    });
  };
  $scope.queryWristbandDatas();
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"phone", name:"\u624b\u673a\u53f7\u7801", width:"8%", pinnedLeft:true, grouping:{groupPriority:0}}, {field:"nick_name", name:"\u6635\u79f0", width:"8%", pinnedLeft:true}, {field:"measured_at", name:"\u6570\u636e\u6536\u96c6\u65f6\u95f4", width:"13%", cellFilter:"unixTodate"}, {field:"step_count", name:"\u6b65\u6570", width:"7%"}, {field:"walk_count", name:"\u884c\u8d70\u6b65\u6570", 
  width:"10%"}, {field:"run_count", name:"\u8dd1\u6b65\u6b65\u6570", width:"10%"}, {field:"distance", name:"\u8ddd\u79bb", width:"7%"}, {field:"walk_distance", name:"\u884c\u8d70\u8ddd\u79bb", width:"10%"}, {field:"run_distance", name:"\u8dd1\u6b65\u8ddd\u79bb", width:"10%"}, {field:"calories", name:"\u6d88\u8017\u80fd\u91cf", width:"10%"}, {field:"walk_calories", name:"\u884c\u8d70\u6d88\u8017\u80fd\u91cf", width:"13%"}, {field:"run_calories", name:"\u8dd1\u6b65\u6d88\u8017\u80fd\u91cf", width:"13%"}, 
  {field:"deep_duration", name:"\u6df1\u7761\u65f6\u95f4", width:"10%"}, {field:"shallow_duration", name:"\u6d45\u7761\u65f6\u95f4", width:"10%"}, {field:"heart_rate", name:"\u5fc3\u7387", width:"7%"}, {name:"\u8bc4\u6d4b", enableFiltering:false, width:"10%", cellTemplate:'<div class="row ui-grid-cell-contents"><div class="col-md-offset-1 col-md-2"><button class="btn btn-primary btn-xs" ng-click="grid.appScope.evaluation(row.entity)" >\u8bc4\u6d4b</button></div></div>', pinnedRight:true}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.page_param.current_page = newPage - 1;
      $scope.page_param.page_size = pageSize;
      $scope.queryWristbandDatas();
    });
  }};
  $scope.evaluation = function(entity) {
    var modalInstance = $modal.open({animation:$scope.animationsEnabled, templateUrl:"components/tpls/health_data_operation_modals/evaluation_wristband_modal.html", controller:"WristbandEvaluationCtrl", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
    }, function() {
      console.log("Modal dismissed at: " + new Date);
      if (isNaN(entity.measured_at)) {
        entity.measured_at = $filter("dateTounix")(entity.measured_at);
      }
    });
  };
};
goog.provide("jxdctsec.main.health_file.Ctrl");
jxdctsec.main.health_file.Ctrl.$inject = ["$scope", "$http", "$q", "$window", "i18nService", "constants", "health_file"];
jxdctsec.main.health_file.Ctrl = function($scope, $http, i18nService, $q, $window, constants, $modal, ModalService, health_file) {
  this.label = "some label from category template controller";
  var ctrl = this;
  var numArry = function(count) {
    var nums = [];
    for (var i = 1;i <= count;i++) {
      nums.push(i);
    }
    return nums;
  };
  $scope.ages = numArry(120);
  activate();
  function activate() {
    $scope.genders = constants.gotGENDERS();
    $scope.gender = {selected:undefined};
  }
  $scope.health_file = {name:undefined, begin_age:10, end_age:60, gender:undefined, page_size:10, current_page:0, phone:undefined, query_date:undefined};
  $scope.getPatient = function() {
    health_file.getHealthFile($scope.health_file).then(function(data) {
      console.log(data);
      $scope.gridOptions.data = data.patients;
      $scope.gridOptions.totalItems = data.total_count;
      $scope.health_file.query_date = data.query_date;
    }, function(error) {
      console.log(error);
    });
  };
  $scope.getPatient();
  $scope.gridOptions = {paginationPageSizes:[10, 20, 50, 100], paginationPageSize:10, useExternalPagination:true, columnDefs:[{field:"patient_id", name:"\u60a3\u8005\u7f16\u53f7", width:"10%", pinnedLeft:true}, {field:"name", name:"\u60a3\u8005\u59d3\u540d", width:"10%"}, {field:"birthday", name:"\u51fa\u751f\u5e74\u6708", width:"10%"}, {field:"gender", name:"\u6027\u522b", width:"10%", cellFilter:"mapGender"}, {field:"phone", name:"\u624b\u673a", width:"10%"}, {field:"address", name:"\u60a3\u8005\u4f4f\u5740", 
  width:"10%"}, {field:"profile", name:"\u7528\u836f\u53f2", width:"10%"}, {name:"\u64cd\u4f5c", width:"30%", cellTemplate:'<div class="row"><div class="col-md-offset-1 col-md-2 text-center"><button class="btn btn-primary btn-sm" ng-click="grid.appScope.popup(row.entity)" >\u7f16\u8f91</button></div><div class="col-md-offset-2 col-md-2 text-center"><button class="btn btn-primary btn-sm" ng-click="grid.appScope.addFile(row.entity)">\u5f55\u5165\u6570\u636e</button></div></div>'}], onRegisterApi:function(gridApi) {
    $scope.gridApi = gridApi;
    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
    });
    gridApi.pagination.on.paginationChanged($scope, function(newPage, pageSize) {
      $scope.health_file.current_page = newPage - 1;
      $scope.health_file.page_size = pageSize;
      $scope.getPatient();
    });
  }};
  i18nService.setCurrentLang("zh-CN");
  $scope.popup = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/edit_patient_modal/edit_patient_modal.html", controller:"EditPatientModalCtrl", resolve:{entity:function() {
      return entity;
    }}});
    modalInstance.result.then(function() {
      console.log("Modal closed at: " + new Date);
    }, function() {
      console.log("Modal dismissed at: " + new Date);
    });
  };
  $scope.addFile = function(entity) {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/add_file_modal/add_file_modal.html", controller:"AddFileModalCtrl", size:"lg", resolve:{entity:function() {
      return entity;
    }, "FILETYPESPromise":function(constants) {
      return constants.FILETYPESPromise;
    }, "PERIODSPromise":function(constants) {
      return constants.PERIODSPromise;
    }}});
    modalInstance.result.then(function() {
      console.log("Modal closed at: " + new Date);
    }, function() {
      console.log("Modal dismissed at: " + new Date);
    });
  };
  ctrl.addPatient = function() {
    var modalInstance = $modal.open({animation:true, templateUrl:"components/tpls/add_patient_modal/add_patient_modal.html", controller:"AddPatientModalCtrl"});
    modalInstance.result.then(function() {
    }, function() {
      $scope.health_file.phone = undefined;
      $scope.health_file.gender = undefined;
      $scope.health_file.name = undefined;
      $scope.getPatient();
    });
  };
};
jxdctsec.main.health_file.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxdctsec.main.Ctrl");
jxdctsec.main.Ctrl.$inject = ["$modal", "$window", "ModalService", "basic"];
jxdctsec.main.Ctrl = function($scope, $timeout, $modal, $window, ModalService, basic) {
  var ctrl = this;
  ctrl.label = "some label from main controller";
  ctrl.items = ["item1", "item2", "item3"];
  ctrl.animationsEnabled = true;
  ctrl.user_center_submenus = [{name:"\u4fee\u6539\u8d44\u6599", link:"main.user_center.basics"}, {name:"\u4fee\u6539\u5934\u50cf", link:"main.user_center.avatar"}, {name:"\u4fee\u6539\u5bc6\u7801", link:"main.user_center.password"}];
  ctrl.popupCustom = function() {
    ModalService.showModal({templateUrl:"components/tpls/custom_modal/custom_modal.html", controller:"CustomModalCtrl as customModal"}).then(function(modal) {
      modal.close.then(function(result) {
        ctrl.customResult = "All good!";
      });
    });
  };
  ctrl.popupConfirm = function() {
    console.log("hello, world!");
    var modalInstance = $modal.open({animation:ctrl.animationsEnabled, templateUrl:"components/tpls/confirm_modal/confirm_modal.html", controller:"ConfirmModalCtrl as confirmModal", resolve:{items:function() {
      return ctrl.items;
    }}});
    modalInstance.result.then(function(selectedItem) {
      ctrl.selected = selectedItem;
      console.log("Modal closed at: " + new Date);
    }, function() {
      console.log("Modal dismissed at: " + new Date);
    });
  };
  $scope.avatarurl = "../../img/shangbiaokuang.png";
  $scope.doctorName = "\u533b\u751f\u59d3\u540d";
  $scope.getDoctorBasics = function() {
    console.log("\u533b\u751f\u57fa\u672c\u4fe1\u606f\uff01");
    basic.getDoctorBasics().then(function(data) {
      if ($scope.validParam(data.success_message.avatar_url)) {
        $scope.avatarurl = data.success_message.avatar_url;
        console.log($scope.avatarurl);
      }
      if ($scope.validParam(data.success_message.full_name)) {
        $scope.doctorName = data.success_message.full_name;
      }
      console.log(data);
    }, function(error) {
      $scope.addAlert("danger", "\u6570\u636e\u52a0\u8f7d\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.getDoctorBasics();
  $scope.signOut = function() {
    basic.signOut().then(function(data) {
      $window.location.href = "/doctor/open";
    }, function(error) {
      console.log(error);
      $window.location.href = "/doctor/open";
    });
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  $scope.validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
};
jxdctsec.main.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.provide("jxdctsec.main.user_center.avatar.Ctrl");
jxdctsec.main.user_center.avatar.Ctrl.$inject = ["$scope", "basic"];
jxdctsec.main.user_center.avatar.Ctrl = function($scope, basic) {
  this.label = "some other label from main.user_center.avatar controller";
  $scope.avatarFile = undefined;
  $scope.avatarurl = "../../../img/touxiang.png";
  $scope.getDoctorBasics = function() {
    basic.getDoctorBasics().then(function(data) {
      if (validParam(data.success_message.avatar_url)) {
        $scope.avatarurl = data.success_message.avatar_url;
      }
    }, function(error) {
      $scope.addAlert("danger", "\u6570\u636e\u52a0\u8f7d\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.getDoctorBasics();
  function validPic(file, str) {
    if (file != undefined && file.type != undefined && str != undefined && str != "" && str.length != 0) {
      var suffixs = str.split("|");
      var fileSuf = file.type.split("/");
      var res = suffixs.filter(function(item) {
        return item == fileSuf[1];
      });
      if (res.length != 0) {
        return true;
      }
      return false;
    }
  }
  $scope.saveAvatar = function() {
    if (validParam($scope.avatarFile)) {
      if (validPic($scope.avatarFile, "png|jpg|jpeg|bmp|gif")) {
        basic.fileUpload($scope.avatarFile).then(function(res) {
          $scope.avatarurl = res.success_message[0];
          basic.updateDocAvatar({avatar_url:$scope.avatarurl}).then(function(res) {
            $scope.addAlert("success", "\u4e0a\u4f20\u5934\u50cf\u6210\u529f\uff01");
            $scope.getDoctorBasics();
          }, function(error) {
            $scope.addAlert("danger", "\u6570\u636e\u52a0\u8f7d\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
          });
        }, function(error) {
          console.log(error);
          $scope.addAlert("danger", "\u6570\u636e\u52a0\u8f7d\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
        });
      } else {
        $scope.addAlert("warning", "\u8bf7\u4e0a\u4f20png\u3001jpg\u7c7b\u578b\u7684\u6587\u4ef6\uff01");
      }
    } else {
      $scope.addAlert("warning", "\u8bf7\u9009\u62e9\u6587\u4ef6\uff01");
    }
  };
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
};
goog.provide("jxdctsec.main.user_center.avatar.module");
goog.require("jxdctsec.main.user_center.avatar.Ctrl");
jxdctsec.main.user_center.avatar.module = angular.module("main.user_center.avatar", ["ui.router"]);
jxdctsec.main.user_center.avatar.module.configuration = function($stateProvider) {
  $stateProvider.state("main.user_center.avatar", {url:"/avatar", templateUrl:"states/main/user_center/avatar/avatar.html", controller:"AvatarCtrl as avatar"});
};
jxdctsec.main.user_center.avatar.module.config(jxdctsec.main.user_center.avatar.module.configuration).controller("AvatarCtrl", jxdctsec.main.user_center.avatar.Ctrl);
goog.provide("jxdctsec.main.user_center.password.Ctrl");
jxdctsec.main.user_center.password.Ctrl.$inject = ["basic", "md5"];
jxdctsec.main.user_center.password.Ctrl = function($scope, basic, md5) {
  this.label = "some other label from main.user_center.password controller";
  $scope.chPassword = {password:undefined, confirm_password:undefined, new_password:undefined};
  $scope.activeSave = false;
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  $scope.checkUserName = function() {
    var node = document.getElementById("user_name_group");
    var helper = document.getElementById("user_name_helper");
    if (validParam($scope.chPassword.password)) {
      node.className = "form-group has-success";
      helper.innerHTML = "\u5df2\u586b";
      if (validParam($scope.chPassword.new_password) && validParam($scope.chPassword.password) && validParam($scope.chPassword.confirm_password)) {
        $scope.activeSave = true;
      }
    } else {
      node.className = "form-group has-error";
      helper.innerHTML = "\u5fc5\u586b";
      $scope.activeSave = false;
    }
  };
  $scope.checkPassword = function() {
    var node = document.getElementById("password_group");
    var helper = document.getElementById("password_helper");
    if (validParam($scope.chPassword.password)) {
      node.className = "form-group has-success";
      helper.innerHTML = "\u5df2\u586b";
    } else {
      node.className = "form-group has-error";
      helper.innerHTML = "\u5fc5\u586b";
      $scope.activeSave = false;
    }
  };
  $scope.checkPasswordRepeat = function() {
    var node = document.getElementById("password_repeat_group");
    var helper = document.getElementById("password_repeat_helper");
    if (validParam($scope.chPassword.confirm_password)) {
      node.className = "form-group has-success";
      helper.innerHTML = "\u5df2\u586b";
      if (validParam($scope.chPassword.new_password) && $scope.chPassword.confirm_password == $scope.chPassword.new_password) {
        $scope.activeSave = true;
      }
    } else {
      node.className = "form-group has-error";
      helper.innerHTML = "\u5fc5\u586b";
      $scope.activeSave = false;
    }
    if ($scope.chPassword.confirm_password != $scope.chPassword.new_password) {
      node.className = "form-group has-error";
      helper.innerHTML = "\u5bc6\u7801\u4e0d\u4e00\u81f4";
      $scope.activeSave = false;
    }
  };
  $scope.saveNewPwd = function() {
    console.log("test");
    basic.change_password({old_password:md5.createHash($scope.chPassword.password), new_password:md5.createHash($scope.chPassword.new_password)}).then(function(res) {
      if (validParam(res.success_message)) {
        $scope.addAlert("success", "\u4fee\u6539\u5bc6\u7801\u6210\u529f\uff01");
        clearData();
      }
      if (validParam(res.error_message)) {
        $scope.addAlert("danger", res.error_message.faultstring);
      }
    }, function(error) {
      $scope.addAlert("danger", "\u4fee\u6539\u5bc6\u7801\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  var clearData = function() {
    $scope.chPassword.password = null;
    $scope.chPassword.new_password = null;
    $scope.chPassword.confirm_password = null;
    var helper1 = document.getElementById("user_name_helper");
    helper1.innerHTML = "\u5fc5\u586b";
    var helper2 = document.getElementById("password_helper");
    helper2.innerHTML = "\u5fc5\u586b";
    var helper3 = document.getElementById("password_repeat_helper");
    helper3.innerHTML = "\u5fc5\u586b";
  };
};
goog.provide("jxdctsec.main.user_center.password.module");
goog.require("jxdctsec.main.user_center.password.Ctrl");
jxdctsec.main.user_center.password.module = angular.module("main.user_center.password", ["ui.router", "angular-md5"]);
jxdctsec.main.user_center.password.module.configuration = function($stateProvider) {
  $stateProvider.state("main.user_center.password", {url:"/password", templateUrl:"states/main/user_center/password/password.html", controller:"PasswordCtrl as password"});
};
jxdctsec.main.user_center.password.module.config(jxdctsec.main.user_center.password.module.configuration).controller("PasswordCtrl", jxdctsec.main.user_center.password.Ctrl);
goog.provide("jxdctsec.main.user_center.Ctrl");
jxdctsec.main.user_center.Ctrl = function() {
  this.label = "some label from user center controller";
};
jxdctsec.main.user_center.Ctrl.prototype.log = function(text) {
  console.log(text);
};
goog.require("jxdctsec.main.user_center.Ctrl");
goog.provide("jxdctsec.main.user_center.basics.Ctrl");
jxdctsec.main.user_center.basics.Ctrl.$inject = ["$controller", "$scope", "$timeout", "$filter", "$q", "basic", "constants"];
jxdctsec.main.user_center.basics.Ctrl = function($controller, $scope, $timeout, $filter, $q, basic, constants) {
  this.label = "some other label from main.user_center.basics controller";
  this.parent = $controller(jxdctsec.main.user_center.Ctrl);
  $scope.dt = new Date;
  $scope.departments = constants.gotDEPARTMENTS();
  $scope.department = {selected:undefined};
  $scope.genders = constants.gotGENDERS();
  $scope.distrits = constants.gotDISTRICTS();
  $scope.distrit = {selected:undefined};
  $scope.doctor = {full_name:undefined, email:undefined, phone:undefined, gender:undefined, birthday:undefined, identification_number:undefined, department_id:undefined, district_id:undefined, profile:undefined, physician_certificate:"", practicing_certificate:""};
  $scope.getDoctorBasics = function() {
    basic.getDoctorBasics().then(function(data) {
      $scope.doctor = data.success_message;
      $scope.doctor.last_login = $filter("unixTodate")(data.success_message.last_login);
    }, function(error) {
      $scope.addAlert("danger", "\u6570\u636e\u52a0\u8f7d\u5f02\u5e38\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.getDoctorBasics();
  $scope.saveDoctorBasic = function() {
    var promise = [upLoadPhysicianCertificate(), upLoadPracticingCertificate()];
    return $q.all(promise).then(function() {
      $scope.doctor.birthday = $filter("date")($scope.doctor.birthday, "yyyy-MM-dd");
      basic.putDoctorBasic($scope.doctor).then(function(succ) {
        $scope.addAlert("success", "\u4fdd\u5b58\u6210\u529f\uff01");
      }, function(error) {
        console.log(error);
        $scope.addAlert("danger", "\u4fdd\u5b58\u5931\u8d25,\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      });
    });
  };
  $scope.physician_certificate = undefined;
  $scope.practicing_certificate = undefined;
  function upLoadPhysicianCertificate() {
    if ($scope.validParam($scope.physician_certificate)) {
      return basic.fileUpload($scope.physician_certificate).then(function(data) {
        $scope.doctor.physician_certificate = data.success_message[0];
        console.log("\u4e0a\u4f20physician_certificate\u6587\u4ef6\u6210\u529f\uff01");
      }, function(error) {
        console.log("\u4e0a\u4f20physician_certificate\u6587\u4ef6\u5931\u8d25\uff01");
      });
    } else {
      console.log("\u6587\u4ef6\u6ca1\u53d1\u751f\u66f4\u6539\uff0c\u6216\u6587\u4ef6\u4e3a\u7a7a");
    }
  }
  function upLoadPracticingCertificate() {
    if ($scope.validParam($scope.practicing_certificate)) {
      return basic.fileUpload($scope.practicing_certificate).then(function(data) {
        $scope.doctor.practicing_certificate = data.success_message[0];
        console.log("\u4e0a\u4f20practicing_certificate\u6587\u4ef6\u6210\u529f\uff01");
      }, function(error) {
        console.log("\u4e0a\u4f20practicing_certificate\u6587\u4ef6\u5931\u8d25\uff01");
      });
    } else {
      console.log("\u6587\u4ef6\u6ca1\u53d1\u751f\u66f4\u6539\uff0c\u6216\u6587\u4ef6\u4e3a\u7a7a");
    }
  }
  $scope.maxDate = new Date;
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.opened = false;
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
};
goog.provide("jxdctsec.main.user_center.basics.module");
goog.require("jxdctsec.main.user_center.basics.Ctrl");
jxdctsec.main.user_center.basics.module = angular.module("main.user_center.basics", ["ui.router"]);
jxdctsec.main.user_center.basics.module.configuration = function($stateProvider) {
  $stateProvider.state("main.user_center.basics", {url:"/basics", templateUrl:"states/main/user_center/basics/basics.html", controller:"BasicsCtrl as basics", resolve:{"GENDERSPromise":function(constants) {
    return constants.GENDERSPromise;
  }}});
};
jxdctsec.main.user_center.basics.module.config(jxdctsec.main.user_center.basics.module.configuration).controller("BasicsCtrl", jxdctsec.main.user_center.basics.Ctrl);
goog.provide("jxdctsec.main.user_center.module");
goog.require("jxdctsec.main.user_center.basics.module");
goog.require("jxdctsec.main.user_center.password.module");
goog.require("jxdctsec.main.user_center.avatar.module");
goog.require("jxdctsec.main.user_center.Ctrl");
jxdctsec.main.user_center.module = angular.module("main.user_center", ["ui.router", jxdctsec.main.user_center.basics.module.name, jxdctsec.main.user_center.password.module.name, jxdctsec.main.user_center.avatar.module.name]);
jxdctsec.main.user_center.module.configuration = function($stateProvider) {
  $stateProvider.state("main.user_center", {url:"/user_center", templateUrl:"states/main/user_center/user_center.html", controller:"UserCenterCtrl as userCenter"});
};
jxdctsec.main.user_center.module.config(jxdctsec.main.user_center.module.configuration).controller("UserCenterCtrl", jxdctsec.main.user_center.Ctrl);
goog.provide("jxdctsec.fileModel.Directive.factory");
jxdctsec.fileModel.Directive = function($parse) {
  this.parse = $parse;
  this.link = this.link.bind(this);
  this.scope;
  this.elem;
  this.attrs;
};
jxdctsec.fileModel.Directive.factory = function($parse) {
  var dir = new jxdctsec.fileModel.Directive($parse);
  return {link:dir.link};
};
jxdctsec.fileModel.Directive.prototype.link = function(scope, elem, attrs) {
  this.scope = scope;
  this.elem = elem;
  this.attrs = attrs;
  this.restrict = "A";
  var model = this.parse(attrs.fileModel);
  var modelSetter = model.assign;
  elem.bind("change", function() {
    scope.$apply(function() {
      modelSetter(scope, elem[0].files[0]);
    });
  });
};
goog.provide("jxdctsec.version.Directive.factory");
jxdctsec.version.Directive = function(version) {
  this.version = version;
  this.link = this.link.bind(this);
  this.scope;
  this.elem;
  this.attrs;
};
jxdctsec.version.Directive.factory = function(version) {
  var dir = new jxdctsec.version.Directive(version);
  return {link:dir.link};
};
jxdctsec.version.Directive.prototype.link = function(scope, elem, attrs) {
  this.scope = scope;
  this.elem = elem;
  this.attrs = attrs;
  this.elem.text(this.version.get());
};
goog.provide("jxdctsec.constants.Factory");
jxdctsec.constants.Factory.$inject = ["$rootScope", "$http", "$q"];
jxdctsec.constants.Factory = function($rootScope, $http, $q) {
  function getConstants(req) {
    req.url = $rootScope.endPoint + req.url;
    return $http(req).then(success).catch(fail);
    function success(response) {
      return response.data.success_message;
    }
    function fail(error) {
      return $q.reject("rejected");
    }
  }
  var DISTRICTS = [];
  var DISTRICTSPromise = getDistricts().then(function(data) {
    DISTRICTS = data.districts;
  }, function(data) {
    DISTRICTS = [];
  });
  function getDistricts() {
    var req = {method:"GET", url:"/common/constants/districts"};
    return getConstants(req);
  }
  function gotDISTRICTS() {
    return DISTRICTS;
  }
  var PROVINCES = [];
  var PROVINCESPromise = getProvinces().then(function(data) {
    PROVINCES = data.provinces;
  }, function(data) {
    PROVINCES = [];
  });
  function getProvinces() {
    var req = {method:"GET", url:"/common/constants/provinces"};
    return getConstants(req);
  }
  function gotPROVINCES() {
    return PROVINCES;
  }
  var CITIES = [];
  var CITIESPromise = getCities().then(function(data) {
    CITIES = data.cities;
  }, function(data) {
    CITIES = [];
  });
  function getCities() {
    var req = {method:"GET", url:"/common/constants/cities"};
    return getConstants(req);
  }
  function gotCITIES() {
    return CITIES;
  }
  var ZONES = [];
  var ZONESPromise = getZones().then(function(data) {
    ZONES = data.zones;
  }, function(data) {
    ZONES = [];
  });
  function getZones() {
    var req = {method:"GET", url:"/common/constants/zones"};
    return getConstants(req);
  }
  function gotZONES() {
    return ZONES;
  }
  var PRODUCTTYPES = [];
  var PRODUCTTYPESPromise = getProductTypes().then(function(data) {
    PRODUCTTYPES = data.product_types;
  }, function(data) {
    PRODUCTTYPES = [];
  });
  function getProductTypes() {
    var req = {method:"GET", url:"/common/constants/product_types"};
    return getConstants(req);
  }
  function gotPRODUCTTYPES() {
    return PRODUCTTYPES;
  }
  var DEVICETYPES = [];
  var DEVICETYPESPromise = getDeviceTypes().then(function(data) {
    DEVICETYPES = data.device_types;
  }, function(data) {
    DEVICETYPES = [];
  });
  function getDeviceTypes() {
    var req = {method:"GET", url:"/common/constants/device_types"};
    return getConstants(req);
  }
  function gotDEVICETYPES() {
    return DEVICETYPES;
  }
  var DATATYPES = [];
  var DATATYPESPromise = getDataTypes().then(function(data) {
    DATATYPES = data.data_types;
  }, function(data) {
    DATATYPES = [];
  });
  function getDataTypes() {
    var req = {method:"GET", url:"/common/constants/data_types"};
    return getConstants(req);
  }
  function gotDATATYPES() {
    return DATATYPES;
  }
  var FILETYPES = [];
  var FILETYPESPromise = getFileTypes().then(function(data) {
    FILETYPES = data.file_types;
  }, function(data) {
    FILETYPES = [];
  });
  function getFileTypes() {
    var req = {method:"GET", url:"/common/constants/file_types"};
    return getConstants(req);
  }
  function gotFILETYPES() {
    return FILETYPES;
  }
  var WRISTBANDCOLUMNS = [];
  var WRISTBANDCOLUMNSPromise = getWristbandColumns().then(function(data) {
    WRISTBANDCOLUMNS = data.columns;
  }, function(data) {
    WRISTBANDCOLUMNS = [];
  });
  function getWristbandColumns() {
    var req = {method:"GET", url:"/common/constants/wristband_columns"};
    return getConstants(req);
  }
  function gotWRISTBANDCOLUMNS() {
    return WRISTBANDCOLUMNS;
  }
  var SPHYGMOMANOMETERCOLUMNS = [];
  var SPHYGMOMANOMETERCOLUMNSPromise = getSphygmomanometerColumns().then(function(data) {
    SPHYGMOMANOMETERCOLUMNS = data.columns;
  }, function(data) {
    SPHYGMOMANOMETERCOLUMNS = [];
  });
  function getSphygmomanometerColumns() {
    var req = {method:"GET", url:"/common/constants/sphygmomanometer_columns"};
    return getConstants(req);
  }
  function gotSPHYGMOMANOMETERCOLUMNS() {
    return SPHYGMOMANOMETERCOLUMNS;
  }
  var GLUCOSEMETERCOLUMNS = [];
  var GLUCOSEMETERCOLUMNSPromise = getGlucosemeterColumns().then(function(data) {
    GLUCOSEMETERCOLUMNS = data.columns;
  }, function(data) {
    GLUCOSEMETERCOLUMNS = [];
  });
  function getGlucosemeterColumns() {
    var req = {method:"GET", url:"/common/constants/glucosemeter_columns"};
    return getConstants(req);
  }
  function gotGLUCOSEMETERCOLUMNS() {
    return GLUCOSEMETERCOLUMNS;
  }
  var THERMOMETERCOLUMNS = [];
  var THERMOMETERCOLUMNSPromise = getThermometerColumns().then(function(data) {
    THERMOMETERCOLUMNS = data.columns;
  }, function(data) {
    THERMOMETERCOLUMNS = [];
  });
  function getThermometerColumns() {
    var req = {method:"GET", url:"/common/constants/thermometer_columns"};
    return getConstants(req);
  }
  function gotTHERMOMETERCOLUMNS() {
    return THERMOMETERCOLUMNS;
  }
  var OXIMETERCOLUMNS = [];
  var OXIMETERCOLUMNSPromise = getOximeterColumns().then(function(data) {
    OXIMETERCOLUMNS = data.columns;
  }, function(data) {
    OXIMETERCOLUMNS = [];
  });
  function getOximeterColumns() {
    var req = {method:"GET", url:"/common/constants/oximeter_columns"};
    return getConstants(req);
  }
  function gotOXIMETERCOLUMNS() {
    return OXIMETERCOLUMNS;
  }
  var FATCOLUMNS = [];
  var FATCOLUMNSPromise = getFatColumns().then(function(data) {
    FATCOLUMNS = data.columns;
  }, function(data) {
    FATCOLUMNS = [];
  });
  function getFatColumns() {
    var req = {method:"GET", url:"/common/constants/fat_columns"};
    return getConstants(req);
  }
  function gotFATCOLUMNS() {
    return FATCOLUMNS;
  }
  var COMPARISONOPS = [];
  var COMPARISONOPSPromise = getComparisonOps().then(function(data) {
    COMPARISONOPS = data.ops;
  }, function(data) {
    COMPARISONOPS = [];
  });
  function getComparisonOps() {
    var req = {method:"GET", url:"/common/constants/comparison_ops"};
    return getConstants(req);
  }
  function gotCOMPARISONOPS() {
    return COMPARISONOPS;
  }
  var LOGICALOPS = [];
  var LOGICALOPSPromise = getLogicalOps().then(function(data) {
    LOGICALOPS = data.ops;
  }, function(data) {
    LOGICALOPS = [];
  });
  function getLogicalOps() {
    var req = {method:"GET", url:"/common/constants/logical_ops"};
    return getConstants(req);
  }
  function gotLOGICALOPS() {
    return LOGICALOPS;
  }
  var PERIODS = [];
  var PERIODSPromise = getPeriods().then(function(data) {
    PERIODS = data.periods;
  }, function(data) {
    PERIODS = [];
  });
  function getPeriods() {
    var req = {method:"GET", url:"/common/constants/periods"};
    return getConstants(req);
  }
  function gotPERIODS() {
    return PERIODS;
  }
  var USERSTATUS = [];
  var USERSTATUSPromise = getUserStatus().then(function(data) {
    USERSTATUS = data.user_status_list;
  }, function(data) {
    USERSTATUS = [];
  });
  function getUserStatus() {
    var req = {method:"GET", url:"/common/constants/user_status"};
    return getConstants(req);
  }
  function gotUSERSTATUS() {
    return USERSTATUS;
  }
  var MANUFACTORYSTATUS = [];
  var MANUFACTORYSTATUSPromise = getManufactoryStatus().then(function(data) {
    MANUFACTORYSTATUS = data.manufactory_status_list;
  }, function(data) {
    MANUFACTORYSTATUS = [];
  });
  function getManufactoryStatus() {
    var req = {method:"GET", url:"/common/constants/manufactory_status"};
    return getConstants(req);
  }
  function gotMANUFACTORYSTATUS() {
    return MANUFACTORYSTATUS;
  }
  var TERMINALSTATUS = [];
  var TERMINALSTATUSPromise = getTerminalStatus().then(function(data) {
    TERMINALSTATUS = data.terminal_status_list;
  }, function(data) {
    TERMINALSTATUS = [];
  });
  function getTerminalStatus() {
    var req = {method:"GET", url:"/common/constants/terminal_status"};
    return getConstants(req);
  }
  function gotTERMINALSTATUS() {
    return TERMINALSTATUS;
  }
  var DOCTORSTATUS = [];
  var DOCTORSTATUSPromise = getDoctorStatus().then(function(data) {
    DOCTORSTATUS = data.doctor_status_list;
  }, function(data) {
    DOCTORSTATUS = [];
  });
  function getDoctorStatus() {
    var req = {method:"GET", url:"/common/constants/doctor_status"};
    return getConstants(req);
  }
  function gotDOCTORSTATUS() {
    return DOCTORSTATUS;
  }
  var HEALTHCONSULTATIONSTATUS = [];
  var HEALTHCONSULTATIONSTATUSPromise = getHealthConsultationStatus().then(function(data) {
    HEALTHCONSULTATIONSTATUS = data.consultation_status_list;
  }, function(data) {
    HEALTHCONSULTATIONSTATUS = [];
  });
  function getHealthConsultationStatus() {
    var req = {method:"GET", url:"/common/constants/health_consultation_status"};
    return getConstants(req);
  }
  function gotHEALTHCONSULTATIONSTATUS() {
    return HEALTHCONSULTATIONSTATUS;
  }
  var HEALTHDATASTATUS = [];
  var HEALTHDATASTATUSPromise = getHealthDataStatus().then(function(data) {
    HEALTHDATASTATUS = data.data_status_list;
  }, function(data) {
    HEALTHDATASTATUS = [];
  });
  function getHealthDataStatus() {
    var req = {method:"GET", url:"/common/constants/health_data_status"};
    return getConstants(req);
  }
  function gotHEALTHDATASTATUS() {
    return HEALTHDATASTATUS;
  }
  var HEALTHFILESTATUS = [];
  var HEALTHFILESTATUSPromise = getHealthFileStatus().then(function(data) {
    HEALTHFILESTATUS = data.file_status_list;
  }, function(data) {
    HEALTHFILESTATUS = [];
  });
  function getHealthFileStatus() {
    var req = {method:"GET", url:"/common/constants/health_file_status"};
    return getConstants(req);
  }
  function gotHEALTHFILESTATUS() {
    return HEALTHFILESTATUS;
  }
  var COMPANYDEPARTMENTS = [];
  var COMPANYDEPARTMENTSPromise = getCompanyDepartments().then(function(data) {
    COMPANYDEPARTMENTS = data.departments;
  }, function(data) {
    COMPANYDEPARTMENTS = [];
  });
  function getCompanyDepartments() {
    var req = {method:"GET", url:"/common/constants/company_departments"};
    return getConstants(req);
  }
  function gotCOMPANYDEPARTMENTS() {
    return COMPANYDEPARTMENTS;
  }
  var COMPANYMEMBERS = [];
  var COMPANYMEMBERSPromise = getCompanyMembers().then(function(data) {
    COMPANYMEMBERS = data.members;
  }, function(data) {
    COMPANYMEMBERS = [];
  });
  function getCompanyMembers() {
    var req = {method:"GET", url:"/common/constants/company_members"};
    return getConstants(req);
  }
  function gotCOMPANYMEMBERS() {
    return COMPANYMEMBERS;
  }
  var COMPANYNATURES = [];
  var COMPANYNATURESPromise = getCompanyNatures().then(function(data) {
    COMPANYNATURES = data.natures;
  }, function(data) {
    COMPANYNATURES = [];
  });
  function getCompanyNatures() {
    var req = {method:"GET", url:"/common/constants/company_natures"};
    return getConstants(req);
  }
  function gotCOMPANYNATURES() {
    return COMPANYNATURES;
  }
  var COMPANYINDUSTRIES = [];
  var COMPANYINDUSTRIESPromise = getCompanyIndustries().then(function(data) {
    COMPANYINDUSTRIES = data.industries;
  }, function(data) {
    COMPANYINDUSTRIES = [];
  });
  function getCompanyIndustries() {
    var req = {method:"GET", url:"/common/constants/company_industries"};
    return getConstants(req);
  }
  function gotCOMPANYINDUSTRIES() {
    return COMPANYINDUSTRIES;
  }
  var DEPARTMENTS = [];
  var DEPARTMENTSPromise = getDepartments().then(function(data) {
    DEPARTMENTS = data.departments;
  }, function(data) {
    DEPARTMENTS = [];
  });
  function getDepartments() {
    var req = {method:"GET", url:"/common/constants/departments"};
    return getConstants(req);
  }
  function gotDEPARTMENTS() {
    return DEPARTMENTS;
  }
  var GENDERS = [];
  var GENDERSPromise = getGenders().then(function(data) {
    GENDERS = data.genders;
  }, function(data) {
    GENDERS = [];
  });
  function getGenders() {
    var req = {method:"GET", url:"/common/constants/genders"};
    return getConstants(req);
  }
  function gotGENDERS() {
    return GENDERS;
  }
  var service = {getConstants:getConstants, getDistricts:getDistricts, gotDISTRICTS:gotDISTRICTS, DISTRICTSPromise:DISTRICTSPromise, getProvinces:getProvinces, gotPROVINCES:gotPROVINCES, PROVINCESPromise:PROVINCESPromise, getCities:getCities, gotCITIES:gotCITIES, CITIESPromise:CITIESPromise, getZones:getZones, gotZONES:gotZONES, ZONESPromise:ZONESPromise, getProductTypes:getProductTypes, gotPRODUCTTYPES:gotPRODUCTTYPES, PRODUCTTYPESPromise:PRODUCTTYPESPromise, getDeviceTypes:getDeviceTypes, gotDEVICETYPES:gotDEVICETYPES, 
  DEVICETYPESPromise:DEVICETYPESPromise, getDataTypes:getDataTypes, gotDATATYPES:gotDATATYPES, DATATYPESPromise:DATATYPESPromise, getFileTypes:getFileTypes, gotFILETYPES:gotFILETYPES, FILETYPESPromise:FILETYPESPromise, getWristbandColumns:getWristbandColumns, gotWRISTBANDCOLUMNS:gotWRISTBANDCOLUMNS, WRISTBANDCOLUMNSPromise:WRISTBANDCOLUMNSPromise, getSphygmomanometerColumns:getSphygmomanometerColumns, gotSPHYGMOMANOMETERCOLUMNS:gotSPHYGMOMANOMETERCOLUMNS, SPHYGMOMANOMETERCOLUMNSPromise:SPHYGMOMANOMETERCOLUMNSPromise, 
  getGlucosemeterColumns:getGlucosemeterColumns, gotGLUCOSEMETERCOLUMNS:gotGLUCOSEMETERCOLUMNS, GLUCOSEMETERCOLUMNSPromise:GLUCOSEMETERCOLUMNSPromise, getThermometerColumns:getThermometerColumns, gotTHERMOMETERCOLUMNS:gotTHERMOMETERCOLUMNS, THERMOMETERCOLUMNSPromise:THERMOMETERCOLUMNSPromise, getOximeterColumns:getOximeterColumns, gotOXIMETERCOLUMNS:gotOXIMETERCOLUMNS, OXIMETERCOLUMNSPromise:OXIMETERCOLUMNSPromise, getFatColumns:getFatColumns, gotFATCOLUMNS:gotFATCOLUMNS, FATCOLUMNSPromise:FATCOLUMNSPromise, 
  getComparisonOps:getComparisonOps, gotCOMPARISONOPS:gotCOMPARISONOPS, COMPARISONOPSPromise:COMPARISONOPSPromise, getLogicalOps:getLogicalOps, gotLOGICALOPS:gotLOGICALOPS, LOGICALOPSPromise:LOGICALOPSPromise, getPeriods:getPeriods, gotPERIODS:gotPERIODS, PERIODSPromise:PERIODSPromise, getUserStatus:getUserStatus, gotUSERSTATUS:gotUSERSTATUS, USERSTATUSPromise:USERSTATUSPromise, getManufactoryStatus:getManufactoryStatus, gotMANUFACTORYSTATUS:gotMANUFACTORYSTATUS, MANUFACTORYSTATUSPromise:MANUFACTORYSTATUSPromise, 
  getTerminalStatus:getTerminalStatus, gotTERMINALSTATUS:gotTERMINALSTATUS, TERMINALSTATUSPromise:TERMINALSTATUSPromise, getDoctorStatus:getDoctorStatus, gotDOCTORSTATUS:gotDOCTORSTATUS, DOCTORSTATUSPromise:DOCTORSTATUSPromise, getHealthConsultationStatus:getHealthConsultationStatus, gotHEALTHCONSULTATIONSTATUS:gotHEALTHCONSULTATIONSTATUS, HEALTHCONSULTATIONSTATUSPromise:HEALTHCONSULTATIONSTATUSPromise, getHealthDataStatus:getHealthDataStatus, gotHEALTHDATASTATUS:gotHEALTHDATASTATUS, HEALTHDATASTATUSPromise:HEALTHDATASTATUSPromise, 
  getHealthFileStatus:getHealthFileStatus, gotHEALTHFILESTATUS:gotHEALTHFILESTATUS, HEALTHFILESTATUSPromise:HEALTHFILESTATUSPromise, getCompanyDepartments:getCompanyDepartments, gotCOMPANYDEPARTMENTS:gotCOMPANYDEPARTMENTS, COMPANYDEPARTMENTSPromise:COMPANYDEPARTMENTSPromise, getCompanyMembers:getCompanyMembers, gotCOMPANYMEMBERS:gotCOMPANYMEMBERS, COMPANYMEMBERSPromise:COMPANYMEMBERSPromise, getCompanyNatures:getCompanyNatures, gotCOMPANYNATURES:gotCOMPANYNATURES, COMPANYNATURESPromise:COMPANYNATURESPromise, 
  getCompanyIndustries:getCompanyIndustries, gotCOMPANYINDUSTRIES:gotCOMPANYINDUSTRIES, COMPANYINDUSTRIESPromise:COMPANYINDUSTRIESPromise, getDepartments:getDepartments, gotDEPARTMENTS:gotDEPARTMENTS, DEPARTMENTSPromise:DEPARTMENTSPromise, getGenders:getGenders, gotGENDERS:gotGENDERS, GENDERSPromise:GENDERSPromise};
  return service;
};
goog.provide("jxdctsec.company_department.Filter.factory");
jxdctsec.company_department.Filter = function(constants) {
  this.gotCOMPANYDEPARTMENTS = constants.gotCOMPANYDEPARTMENTS;
  this.convert = this.convert.bind(this);
};
jxdctsec.company_department.Filter.factory = function(constants) {
  var filter = new jxdctsec.company_department.Filter(constants);
  return filter.convert;
};
jxdctsec.company_department.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var company_departments = this.gotCOMPANYDEPARTMENTS();
    var company_department = company_departments.filter(function(item) {
      return input === item.department_id;
    });
    return company_department.length > 0 ? company_department[0].department_name : "";
  }
};
goog.provide("jxdctsec.company_member.Filter.factory");
jxdctsec.company_member.Filter = function(constants) {
  this.gotCOMPANYMEMBERS = constants.gotCOMPANYMEMBERS;
  this.convert = this.convert.bind(this);
};
jxdctsec.company_member.Filter.factory = function(constants) {
  var filter = new jxdctsec.company_member.Filter(constants);
  return filter.convert;
};
jxdctsec.company_member.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var company_members = this.gotCOMPANYMEMBERS();
    var company_member = company_members.filter(function(item) {
      return input === item.member_id;
    });
    return company_member.length > 0 ? company_member[0].member_name : "";
  }
};
goog.provide("jxdctsec.company_nature.Filter.factory");
jxdctsec.company_nature.Filter = function(constants) {
  this.gotCOMPANYNATURES = constants.gotCOMPANYNATURES;
  this.convert = this.convert.bind(this);
};
jxdctsec.company_nature.Filter.factory = function(constants) {
  var filter = new jxdctsec.company_nature.Filter(constants);
  return filter.convert;
};
jxdctsec.company_nature.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var company_natures = this.gotCOMPANYNATURES();
    var company_nature = company_natures.filter(function(item) {
      return input === item.nature_id;
    });
    return company_nature.length > 0 ? company_nature[0].nature_name : "";
  }
};
goog.provide("jxdctsec.company_industry.Filter.factory");
jxdctsec.company_industry.Filter = function(constants) {
  this.gotCOMPANYINDUSTRIES = constants.gotCOMPANYINDUSTRIES;
  this.convert = this.convert.bind(this);
};
jxdctsec.company_industry.Filter.factory = function(constants) {
  var filter = new jxdctsec.company_industry.Filter(constants);
  return filter.convert;
};
jxdctsec.company_industry.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var company_industries = this.gotCOMPANYINDUSTRIES();
    var company_industry = company_industries.filter(function(item) {
      return input === item.industry_id;
    });
    return company_industry.length > 0 ? company_industry[0].industry_name : "";
  }
};
goog.provide("jxdctsec.dateTounix.Filter.factory");
jxdctsec.dateTounix.Filter = function() {
  this.checkmark = "\u2714";
  this.cross = "\u2718";
  this.convert = this.convert.bind(this);
};
jxdctsec.dateTounix.Filter.factory = function() {
  var filter = new jxdctsec.dateTounix.Filter;
  return filter.convert;
};
jxdctsec.dateTounix.Filter.prototype.convert = function(input) {
  if (!input) {
    return "";
  } else {
    var tmp_datetime = input.toString().replace(/:/g, "-");
    tmp_datetime = tmp_datetime.toString().replace(/ /g, "-");
    var arr = tmp_datetime.split("-");
    var now = new Date(Date.UTC(arr[0], arr[1] - 1, arr[2], arr[3] - 8, arr[4], arr[5]));
    return parseInt(now.getTime() / 1E3);
  }
};
goog.provide("jxdctsec.gender.Filter.factory");
jxdctsec.gender.Filter = function(constants) {
  this.gotGENDERS = constants.gotGENDERS;
  this.convert = this.convert.bind(this);
};
jxdctsec.gender.Filter.factory = function(constants) {
  var filter = new jxdctsec.gender.Filter(constants);
  return filter.convert;
};
jxdctsec.gender.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var genders = this.gotGENDERS();
    var gender = genders.filter(function(item) {
      return input === item.gender_id;
    });
    return gender.length > 0 ? gender[0].gender_name : "";
  }
};
goog.provide("jxdctsec.district.Filter.factory");
jxdctsec.district.Filter = function(constants) {
  this.gotDISTRICTS = constants.gotDISTRICTS;
  this.convert = this.convert.bind(this);
};
jxdctsec.district.Filter.factory = function(constants) {
  var filter = new jxdctsec.district.Filter(constants);
  return filter.convert;
};
jxdctsec.district.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var districts = this.gotDISTRICTS();
    var district = districts.filter(function(item) {
      return input === item.district_id;
    });
    return district.length > 0 ? district[0].district_name : "";
  }
};
goog.provide("jxdctsec.province.Filter.factory");
jxdctsec.province.Filter = function(constants) {
  this.gotPROVINCES = constants.gotPROVINCES;
  this.convert = this.convert.bind(this);
};
jxdctsec.province.Filter.factory = function(constants) {
  var filter = new jxdctsec.province.Filter(constants);
  return filter.convert;
};
jxdctsec.province.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var provinces = this.gotPROVINCES();
    var province = provinces.filter(function(item) {
      return input === item.province_id;
    });
    return province.length > 0 ? province[0].province_name : "";
  }
};
goog.provide("jxdctsec.city.Filter.factory");
jxdctsec.city.Filter = function(constants) {
  this.gotCITIES = constants.gotCITIES;
  this.convert = this.convert.bind(this);
};
jxdctsec.city.Filter.factory = function(constants) {
  var filter = new jxdctsec.city.Filter(constants);
  return filter.convert;
};
jxdctsec.city.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var cities = this.gotCITIES();
    var city = cities.filter(function(item) {
      return input === item.city_id;
    });
    return city.length > 0 ? city[0].city_name : "";
  }
};
goog.provide("jxdctsec.zone.Filter.factory");
jxdctsec.zone.Filter = function(constants) {
  this.gotZONES = constants.gotZONES;
  this.convert = this.convert.bind(this);
};
jxdctsec.zone.Filter.factory = function(constants) {
  var filter = new jxdctsec.zone.Filter(constants);
  return filter.convert;
};
jxdctsec.zone.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var zones = this.gotZONES();
    var zone = zones.filter(function(item) {
      return input === item.zone_id;
    });
    return zone.length > 0 ? zone[0].zone_name : "";
  }
};
goog.provide("jxdctsec.data_type.Filter.factory");
jxdctsec.data_type.Filter = function(constants) {
  this.gotDATATYPES = constants.gotDATATYPES;
  this.convert = this.convert.bind(this);
};
jxdctsec.data_type.Filter.factory = function(constants) {
  var filter = new jxdctsec.data_type.Filter(constants);
  return filter.convert;
};
jxdctsec.data_type.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var data_types = this.gotDATATYPES();
    var data_type = data_types.filter(function(item) {
      return input === item.data_type_id;
    });
    return data_type.length > 0 ? data_type[0].data_type_name : "";
  }
};
goog.provide("jxdctsec.file_type.Filter.factory");
jxdctsec.file_type.Filter = function(constants) {
  this.gotFILETYPES = constants.gotFILETYPES;
  this.convert = this.convert.bind(this);
};
jxdctsec.file_type.Filter.factory = function(constants) {
  var filter = new jxdctsec.file_type.Filter(constants);
  return filter.convert;
};
jxdctsec.file_type.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var file_types = this.gotFILETYPES();
    var file_type = file_types.filter(function(item) {
      return input === item.file_type_id;
    });
    return file_type.length > 0 ? file_type[0].file_type_name : "";
  }
};
goog.provide("jxdctsec.wristband_column.Filter.factory");
jxdctsec.wristband_column.Filter = function(constants) {
  this.checkmark = "\u2714";
  this.cross = "\u2718";
  this.gotWRISTBANDCOLUMNS = constants.gotWRISTBANDCOLUMNS;
  this.convert = this.convert.bind(this);
};
jxdctsec.wristband_column.Filter.factory = function(constants) {
  var filter = new jxdctsec.wristband_column.Filter(constants);
  return filter.convert;
};
jxdctsec.wristband_column.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var wristband_columns = this.gotWRISTBANDCOLUMNS();
    var wristband_column = wristband_columns.filter(function(item) {
      return input === item.column_id;
    });
    return wristband_column.length > 0 ? wristband_column[0].column_name : "";
  }
};
goog.provide("jxdctsec.sphygmomanometer_column.Filter.factory");
jxdctsec.sphygmomanometer_column.Filter = function(constants) {
  this.gotSPHYGMOMANOMETERCOLUMNS = constants.gotSPHYGMOMANOMETERCOLUMNS;
  this.convert = this.convert.bind(this);
};
jxdctsec.sphygmomanometer_column.Filter.factory = function(constants) {
  var filter = new jxdctsec.sphygmomanometer_column.Filter(constants);
  return filter.convert;
};
jxdctsec.sphygmomanometer_column.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var sphygmomanometer_columns = this.gotSPHYGMOMANOMETERCOLUMNS();
    var sphygmomanometer_column = sphygmomanometer_columns.filter(function(item) {
      return input === item.column_id;
    });
    return sphygmomanometer_column.length > 0 ? sphygmomanometer_column[0].column_name : "";
  }
};
goog.provide("jxdctsec.glucosemeter_column.Filter.factory");
jxdctsec.glucosemeter_column.Filter = function(constants) {
  this.gotGLUCOSEMETERCOLUMNS = constants.gotGLUCOSEMETERCOLUMNS;
  this.convert = this.convert.bind(this);
};
jxdctsec.glucosemeter_column.Filter.factory = function(constants) {
  var filter = new jxdctsec.glucosemeter_column.Filter(constants);
  return filter.convert;
};
jxdctsec.glucosemeter_column.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var glucosemeter_columns = this.gotGLUCOSEMETERCOLUMNS();
    var glucosemeter_column = glucosemeter_columns.filter(function(item) {
      return input === item.column_id;
    });
    return glucosemeter_column.length > 0 ? glucosemeter_column[0].column_name : "";
  }
};
goog.provide("jxdctsec.thermometer_column.Filter.factory");
jxdctsec.thermometer_column.Filter = function(constants) {
  this.gotTHERMOMETERCOLUMNS = constants.gotTHERMOMETERCOLUMNS;
  this.convert = this.convert.bind(this);
};
jxdctsec.thermometer_column.Filter.factory = function(constants) {
  var filter = new jxdctsec.thermometer_column.Filter(constants);
  return filter.convert;
};
jxdctsec.thermometer_column.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var thermometer_columns = this.gotTHERMOMETERCOLUMNS();
    var thermometer_column = thermometer_columns.filter(function(item) {
      return input === item.column_id;
    });
    return thermometer_column.length > 0 ? thermometer_column[0].column_name : "";
  }
};
goog.provide("jxdctsec.oximeter_column.Filter.factory");
jxdctsec.oximeter_column.Filter = function(constants) {
  this.gotOXIMETERCOLUMNS = constants.gotOXIMETERCOLUMNS;
  this.convert = this.convert.bind(this);
};
jxdctsec.oximeter_column.Filter.factory = function(constants) {
  var filter = new jxdctsec.oximeter_column.Filter(constants);
  return filter.convert;
};
jxdctsec.oximeter_column.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var oximeter_columns = this.gotOXIMETERCOLUMNS();
    var oximeter_column = oximeter_columns.filter(function(item) {
      return input === item.column_id;
    });
    return oximeter_column.length > 0 ? oximeter_column[0].column_name : "";
  }
};
goog.provide("jxdctsec.fat_column.Filter.factory");
jxdctsec.fat_column.Filter = function(constants) {
  this.gotFATCOLUMNS = constants.gotFATCOLUMNS;
  this.convert = this.convert.bind(this);
};
jxdctsec.fat_column.Filter.factory = function(constants) {
  var filter = new jxdctsec.fat_column.Filter(constants);
  return filter.convert;
};
jxdctsec.fat_column.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var fat_columns = this.gotFATCOLUMNS();
    var fat_column = fat_columns.filter(function(item) {
      return input === item.column_id;
    });
    return fat_column.length > 0 ? fat_column[0].column_name : "";
  }
};
goog.provide("jxdctsec.comparison_ops.Filter.factory");
jxdctsec.comparison_ops.Filter = function(constants) {
  this.gotCOMPARISONOPS = constants.gotCOMPARISONOPS;
  this.convert = this.convert.bind(this);
};
jxdctsec.comparison_ops.Filter.factory = function(constants) {
  var filter = new jxdctsec.comparison_ops.Filter(constants);
  return filter.convert;
};
jxdctsec.comparison_ops.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var comparison_ops = this.gotCOMPARISONOPS();
    var comparison_op = comparison_ops.filter(function(item) {
      return input === item.op_id;
    });
    return comparison_op.length > 0 ? comparison_op[0].op_name : "";
  }
};
goog.provide("jxdctsec.logical_ops.Filter.factory");
jxdctsec.logical_ops.Filter = function(constants) {
  this.gotLOGICALOPS = constants.gotLOGICALOPS;
  this.convert = this.convert.bind(this);
};
jxdctsec.logical_ops.Filter.factory = function(constants) {
  var filter = new jxdctsec.logical_ops.Filter(constants);
  return filter.convert;
};
jxdctsec.logical_ops.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var logical_ops = this.gotLOGICALOPS();
    var logical_op = logical_ops.filter(function(item) {
      return input === item.op_id;
    });
    return logical_op.length > 0 ? logical_op[0].op_name : "";
  }
};
goog.provide("jxdctsec.periods.Filter.factory");
jxdctsec.periods.Filter = function(constants) {
  this.gotPERIODS = constants.gotPERIODS;
  this.convert = this.convert.bind(this);
};
jxdctsec.periods.Filter.factory = function(constants) {
  var filter = new jxdctsec.periods.Filter(constants);
  return filter.convert;
};
jxdctsec.periods.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var periods = this.gotPERIODS();
    var period = periods.filter(function(item) {
      return input === item.period_id;
    });
    return period.length > 0 ? period[0].period_name : "";
  }
};
goog.provide("jxdctsec.helath_consultation_status.Filter.factory");
jxdctsec.helath_consultation_status.Filter = function(constants) {
  this.gotHEALTHCONSULTATIONSTATUS = constants.gotHEALTHCONSULTATIONSTATUS;
  this.convert = this.convert.bind(this);
};
jxdctsec.helath_consultation_status.Filter.factory = function(constants) {
  var filter = new jxdctsec.helath_consultation_status.Filter(constants);
  return filter.convert;
};
jxdctsec.helath_consultation_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var helath_consultation_statuses = this.gotHEALTHCONSULTATIONSTATUS();
    var helath_consultation_status = helath_consultation_statuses.filter(function(item) {
      return input === item.consultation_status_id;
    });
    return helath_consultation_status.length > 0 ? helath_consultation_status[0].consultation_status_name : "";
  }
};
goog.provide("jxdctsec.health_data_status.Filter.factory");
jxdctsec.health_data_status.Filter = function(constants) {
  this.gotHEALTHDATASTATUS = constants.gotHEALTHDATASTATUS;
  this.convert = this.convert.bind(this);
};
jxdctsec.health_data_status.Filter.factory = function(constants) {
  var filter = new jxdctsec.health_data_status.Filter(constants);
  return filter.convert;
};
jxdctsec.health_data_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var health_data_statuses = this.gotHEALTHDATASTATUS();
    var health_data_status = health_data_statuses.filter(function(item) {
      return input === item.data_status_id;
    });
    return health_data_status.length > 0 ? health_data_status[0].data_status_name : "";
  }
};
goog.provide("jxdctsec.health_file_status.Filter.factory");
jxdctsec.health_file_status.Filter = function(constants) {
  this.gotHEALTHFILESTATUS = constants.gotHEALTHFILESTATUS;
  this.convert = this.convert.bind(this);
};
jxdctsec.health_file_status.Filter.factory = function(constants) {
  var filter = new jxdctsec.health_file_status.Filter(constants);
  return filter.convert;
};
jxdctsec.health_file_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var health_file_statuses = this.gotHEALTHFILESTATUS();
    var health_file_status = health_file_statuses.filter(function(item) {
      return input === item.file_status_id;
    });
    return health_file_status.length > 0 ? health_file_status[0].file_status_name : "";
  }
};
goog.provide("jxdctsec.department.Filter.factory");
jxdctsec.department.Filter = function(constants) {
  this.gotDEPARTMENTS = constants.gotDEPARTMENTS;
  this.convert = this.convert.bind(this);
};
jxdctsec.department.Filter.factory = function(constants) {
  var filter = new jxdctsec.department.Filter(constants);
  return filter.convert;
};
jxdctsec.department.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var departments = this.gotDEPARTMENTS();
    var department = departments.filter(function(item) {
      return input === item.department_id;
    });
    return department.length > 0 ? department[0].department_name : "";
  }
};
goog.provide("jxdctsec.user_status.Filter.factory");
jxdctsec.user_status.Filter = function(constants) {
  this.gotUSERSTATUS = constants.gotUSERSTATUS;
  this.convert = this.convert.bind(this);
};
jxdctsec.user_status.Filter.factory = function(constants) {
  var filter = new jxdctsec.user_status.Filter(constants);
  return filter.convert;
};
jxdctsec.user_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var user_statuses = this.gotUSERSTATUS();
    var user_status = user_statuses.filter(function(item) {
      return input === item.user_status_id;
    });
    return user_status.length > 0 ? user_status[0].user_status_name : "";
  }
};
goog.provide("jxdctsec.manufactory_status.Filter.factory");
jxdctsec.manufactory_status.Filter = function(constants) {
  this.gotMANUFACTORYSTATUS = constants.gotMANUFACTORYSTATUS;
  this.convert = this.convert.bind(this);
};
jxdctsec.manufactory_status.Filter.factory = function(constants) {
  var filter = new jxdctsec.manufactory_status.Filter(constants);
  return filter.convert;
};
jxdctsec.manufactory_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var manufactory_statuses = this.gotMANUFACTORYSTATUS();
    var manufactory_status = manufactory_statuses.filter(function(item) {
      return input === item.manufactory_status_id;
    });
    return manufactory_status.length > 0 ? manufactory_status[0].manufactory_status_name : "";
  }
};
goog.provide("jxdctsec.terminal_status.Filter.factory");
jxdctsec.terminal_status.Filter = function(constants) {
  this.gotTERMINALSTATUS = constants.gotTERMINALSTATUS;
  this.convert = this.convert.bind(this);
};
jxdctsec.terminal_status.Filter.factory = function(constants) {
  var filter = new jxdctsec.terminal_status.Filter(constants);
  return filter.convert;
};
jxdctsec.terminal_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var terminal_statuses = this.gotTERMINALSTATUS();
    var terminal_status = terminal_statuses.filter(function(item) {
      return input === item.terminal_status_id;
    });
    return terminal_status.length > 0 ? terminal_status[0].terminal_status_name : "";
  }
};
goog.provide("jxdctsec.doctor_status.Filter.factory");
jxdctsec.doctor_status.Filter = function(constants) {
  this.gotDOCTORSTATUS = constants.gotDOCTORSTATUS;
  this.convert = this.convert.bind(this);
};
jxdctsec.doctor_status.Filter.factory = function(constants) {
  var filter = new jxdctsec.doctor_status.Filter(constants);
  return filter.convert;
};
jxdctsec.doctor_status.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var doctor_statuses = this.gotDOCTORSTATUS();
    var doctor_status = doctor_statuses.filter(function(item) {
      return input === item.doctor_status_id;
    });
    return doctor_status.length > 0 ? doctor_status[0].doctor_status_name : "";
  }
};
goog.provide("jxdctsec.product_type.Filter.factory");
jxdctsec.product_type.Filter = function(constants) {
  this.gotPRODUCTTYPES = constants.gotPRODUCTTYPES;
  this.convert = this.convert.bind(this);
};
jxdctsec.product_type.Filter.factory = function(constants) {
  var filter = new jxdctsec.product_type.Filter(constants);
  return filter.convert;
};
jxdctsec.product_type.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var product_types = this.gotPRODUCTTYPES();
    var product_type = product_types.filter(function(item) {
      return input === item.product_type_id;
    });
    return product_type.length > 0 ? product_type[0].product_type_name : "";
  }
};
goog.provide("jxdctsec.device_type.Filter.factory");
jxdctsec.device_type.Filter = function(constants) {
  this.gotDEVICETYPES = constants.gotDEVICETYPES;
  this.convert = this.convert.bind(this);
};
jxdctsec.device_type.Filter.factory = function(constants) {
  var filter = new jxdctsec.device_type.Filter(constants);
  return filter.convert;
};
jxdctsec.device_type.Filter.prototype.convert = function(input) {
  if (isNaN(input)) {
    return "";
  } else {
    var device_types = this.gotDEVICETYPES();
    var device_type = device_types.filter(function(item) {
      return input === item.device_type_id;
    });
    return device_type.length > 0 ? device_type[0].device_type_name : "";
  }
};
goog.provide("jxdctsec.unixTodate.Filter.factory");
jxdctsec.unixTodate.Filter = function() {
  this.checkmark = "\u2714";
  this.cross = "\u2718";
  this.convert = this.convert.bind(this);
};
jxdctsec.unixTodate.Filter.factory = function() {
  var filter = new jxdctsec.unixTodate.Filter;
  return filter.convert;
};
Date.prototype.Format = function(fmt) {
  var o = {"M+":this.getMonth() + 1, "d+":this.getDate(), "h+":this.getHours(), "m+":this.getMinutes(), "s+":this.getSeconds(), "q+":Math.floor((this.getMonth() + 3) / 3), "S":this.getMilliseconds()};
  if (/(y+)/.test(fmt)) {
    fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
  }
  for (var k in o) {
    if ((new RegExp("(" + k + ")")).test(fmt)) {
      fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
    }
  }
  return fmt;
};
jxdctsec.unixTodate.Filter.prototype.convert = function(input) {
  if (!input) {
    return "";
  } else {
    var now = (new Date(parseInt(input) * 1E3)).Format("yyyy-MM-dd hh:mm:ss");
    return now.toLocaleString().replace(/\u5e74|\u6708/g, "-").replace(/\u65e5/g, " ");
  }
};
goog.provide("jxdctsec.basic.Service");
jxdctsec.basic.Service.$inject = ["$rootScope", "$http", "$q"];
jxdctsec.basic.Service = function($rootScope, $http, $q) {
  var basic = this;
  basic.signIn = function(rbody) {
    var defer = $q.defer();
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/sign_in", data:rbody};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.change_password = function(password) {
    var defer = $q.defer();
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/settings/password", data:password};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.fileUpload = function(file) {
    var defer = $q.defer();
    if (file == undefined || file == null || file == "") {
      return null;
    }
    var uploadUrl = $rootScope.endPoint + "/common/uploads";
    var fd = new FormData;
    fd.append("files", file);
    $http.post(uploadUrl, fd, {transformRequest:angular.identity, headers:{"Content-Type":undefined}}).success(function(succ) {
      defer.resolve(succ);
    }).error(function(error) {
      defer.resolve(error);
    });
    return defer.promise;
  };
  basic.signOut = function() {
    var defer = $q.defer();
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/sign_out"};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.getDoctorBasics = function() {
    var defer = $q.defer();
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/settings/basic"};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.putDoctorBasic = function(doctor) {
    var defer = $q.defer();
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/settings/basic", data:doctor};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  basic.updateDocAvatar = function(avatar_url) {
    var defer = $q.defer();
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/settings/avatar", data:avatar_url};
    $http(req).success(function(res) {
      defer.resolve(res);
    }).error(function(err, status) {
      defer.reject(err);
    });
    return defer.promise;
  };
  return basic;
};
goog.provide("jxdctsec.db_operation.Service");
jxdctsec.db_operation.Service.$inject = ["$rootScope", "$http", "$q"];
jxdctsec.db_operation.Service = function($rootScope, $http, $q) {
  var db_operation = this;
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  function sendRequest(req) {
    return $http(req).then(success).catch(fail);
    function success(response) {
      return response.data.success_message;
    }
    function fail(error) {
      return $q.reject("rejected");
    }
  }
  db_operation.getFiles = function(file) {
    if (file == undefined || file == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/patients/files", data:file};
    return sendRequest(req);
  };
  db_operation.getPatFiles = function(pid, file) {
    if (!validParam(pid)) {
      return null;
    }
    console.log("service");
    console.log(file);
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/files", params:file};
    return sendRequest(req);
  };
  db_operation.getPatWrist = function(pid, wid) {
    if (!validParam(pid) || !validParam(wid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/wristbands/" + wid};
    return sendRequest(req);
  };
  db_operation.putPatWrist = function(pid, wid, patwrist) {
    if (!validParam(pid) || !validParam(wid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/wristbands/" + wid, data:patwrist};
    return sendRequest(req);
  };
  db_operation.getPatSphyg = function(pid, sid) {
    if (!validParam(pid) || !validParam(sid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/sphygmomanometers/" + sid};
    return sendRequest(req);
  };
  db_operation.putPatSphyg = function(pid, sid, patsphy) {
    if (!validParam(pid) || !validParam(sid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/sphygmomanometers/" + sid, data:patsphy};
    return sendRequest(req);
  };
  db_operation.getPatOxi = function(pid, oid) {
    if (!validParam(pid) || !validParam(oid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/oximeters/" + oid};
    return sendRequest(req);
  };
  db_operation.putPatOxi = function(pid, oid, patoxi) {
    if (!validParam(pid) || !validParam(oid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/oximeters/" + oid, data:patoxi};
    return sendRequest(req);
  };
  db_operation.getPatGlucose = function(pid, gid) {
    if (!validParam(pid) || !validParam(gid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/glucosemeters/" + gid};
    return sendRequest(req);
  };
  db_operation.putPatGlucose = function(pid, gid, patglucose) {
    if (!validParam(pid) || !validParam(gid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/glucosemeters/" + gid, data:patglucose};
    return sendRequest(req);
  };
  db_operation.getPatThermome = function(pid, tid) {
    if (!validParam(pid) || !validParam(tid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/thermometers/" + tid};
    return sendRequest(req);
  };
  db_operation.putPatThermome = function(pid, tid, patthermome) {
    if (!validParam(pid) || !validParam(tid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/thermometers/" + tid, data:patthermome};
    return sendRequest(req);
  };
  db_operation.getPatFat = function(pid, fid) {
    if (!validParam(pid) || !validParam(fid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/fats/" + fid};
    return sendRequest(req);
  };
  db_operation.putPatFat = function(pid, fid, patfat) {
    if (!validParam(pid) || !validParam(fid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/fats/" + fid, data:patfat};
    return sendRequest(req);
  };
  db_operation.getPatOther = function(pid, otid) {
    if (!validParam(pid) || !validParam(otid)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/others/" + otid};
    return sendRequest(req);
  };
  db_operation.putPatOther = function(pid, otid, patother) {
    if (!validParam(pid) || !validParam(otid)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/others/" + otid, data:patother};
    return sendRequest(req);
  };
  return db_operation;
};
goog.provide("jxdctsec.health_con.Service");
jxdctsec.health_con.Service.$inject = ["$rootScope", "$http", "$q"];
jxdctsec.health_con.Service = function($rootScope, $http, $q) {
  var health_con = this;
  function sendRequest(req) {
    return $http(req).then(success).catch(fail);
    function success(response) {
      return response.data.success_message;
    }
    function fail(error) {
      return $q.reject("rejected");
    }
  }
  health_con.dealConsultation = function(consultation) {
    if (consultation == undefined || consultation == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/consultations", data:consultation};
    return sendRequest(req);
  };
  health_con.getQAandReply = function(cid) {
    if (cid == undefined || cid == "") {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/consultations/" + cid};
    return sendRequest(req);
  };
  health_con.sendReply = function(cid, content) {
    if (cid == undefined || cid == "") {
      return null;
    }
    if (content == undefined || content == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/consultations/" + cid, data:content};
    return sendRequest(req);
  };
  return health_con;
};
goog.provide("jxdctsec.health_data.Service");
jxdctsec.health_data.Service.$inject = ["$rootScope", "$http", "$q"];
jxdctsec.health_data.Service = function($rootScope, $http, $q) {
  var health_data = this;
  function sendRequest(req) {
    return $http(req).then(success).catch(fail);
    function success(response) {
      return response.data.success_message;
    }
    function fail(error) {
      console.log(error);
      return $q.reject("rejected");
    }
  }
  health_data.saveWristbands = function(wid, wristband) {
    if (wid == undefined || wid == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/common/measurements/wristbands/" + wid, data:wristband};
    return sendRequest(req);
  };
  health_data.saveSphygmomanometers = function(sid, sphygmomanometer) {
    if (sid == undefined || sid == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/common/measurements/sphygmomanometers/" + sid, data:sphygmomanometer};
    return sendRequest(req);
  };
  health_data.saveOximeters = function(oid, oximeter) {
    if (oid == undefined || oid == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/common/measurements/oximeter/" + oid, data:oximeter};
    return sendRequest(req);
  };
  health_data.saveGlucosemeters = function(gid, glucosemeter) {
    if (gid == undefined || gid == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/common/measurements/glucosemeters/" + gid, data:glucosemeter};
    return sendRequest(req);
  };
  health_data.saveThermometers = function(tid, thermometer) {
    if (tid == undefined || tid == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/common/measurements/thermometers/" + tid, data:thermometer};
    return sendRequest(req);
  };
  health_data.saveFats = function(fid, fat) {
    if (fid == undefined || fid == "") {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/common/measurements/fat/" + fid, data:fat};
    return sendRequest(req);
  };
  health_data.getPermissions = function(permission_list) {
    if (permission_list == undefined || permission_list == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/permissions", data:permission_list};
    return sendRequest(req);
  };
  health_data.getPermissionData = function(pid, page_params) {
    if (pid == undefined || pid == "") {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/permissions/" + pid + "/query", data:page_params};
    return sendRequest(req);
  };
  return health_data;
};
goog.provide("jxdctsec.health_file.Service");
jxdctsec.health_file.Service.$inject = ["$rootScope", "$http", "$q"];
jxdctsec.health_file.Service = function($rootScope, $http, $q) {
  var health_file = this;
  function sendRequest(req) {
    return $http(req).then(success).catch(fail);
    function success(response) {
      return response.data.success_message;
    }
    function fail(error) {
      return $q.reject(error.data);
    }
  }
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
  health_file.getHealthFile = function(params) {
    if (!validParam(params)) {
      return null;
    }
    var req = {method:"GET", url:$rootScope.endPoint + "/doctors/patients", params:params};
    return sendRequest(req);
  };
  health_file.addPatient = function(patient) {
    if (!validParam(patient)) {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/patients", data:patient};
    return sendRequest(req);
  };
  health_file.updatePatient = function(pid, patient) {
    if (!validParam(pid) || !validParam(patient)) {
      return null;
    }
    var req = {method:"PUT", url:$rootScope.endPoint + "/doctors/patients/" + pid, data:patient};
    return sendRequest(req);
  };
  health_file.addWristbandData = function(pid, wristbands) {
    if (!validParam(pid) || !validParam(wristbands)) {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/wristbands/new", data:wristbands};
    return sendRequest(req);
  };
  health_file.addSphygmomanometerData = function(pid, sphygmomanometers) {
    if (!validParam(pid) || !validParam(sphygmomanometers)) {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/sphygmomanometers/new", data:sphygmomanometers};
    return sendRequest(req);
  };
  health_file.addOximeterData = function(pid, oximeters) {
    if (!validParam(pid) || !validParam(oximeters)) {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/oximeters/new", data:oximeters};
    return sendRequest(req);
  };
  health_file.addGlucosemeterData = function(pid, glucosemeters) {
    if (!validParam(pid) || !validParam(glucosemeters)) {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/glucosemeters/new", data:glucosemeters};
    return sendRequest(req);
  };
  health_file.addThermometerData = function(pid, thermometers) {
    if (!validParam(pid) || !validParam(thermometers)) {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/thermometers/new", data:thermometers};
    return sendRequest(req);
  };
  health_file.addFatsData = function(pid, fats) {
    if (!validParam(pid) || !validParam(fats)) {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/fats/new", data:fats};
    return sendRequest(req);
  };
  health_file.addOthersData = function(pid, others) {
    if (!validParam(pid) || !validParam(others)) {
      return null;
    }
    var req = {method:"POST", url:$rootScope.endPoint + "/doctors/patients/" + pid + "/others/new", data:others};
    return sendRequest(req);
  };
  return health_file;
};
goog.provide("jxdctsec.version.Service");
jxdctsec.version.Service = function() {
  this.version = "0.0.1";
};
jxdctsec.version.Service.prototype.get = function() {
  return this.version;
};
goog.provide("jxdctsec.add_file_modal.add_file_modal.Ctrl");
jxdctsec.add_file_modal.add_file_modal.Ctrl.$inject = ["$scope", "$modalInstance", "$filter", "$q", "entity", "constants", "health_file"];
jxdctsec.add_file_modal.add_file_modal.Ctrl = function($scope, $modalInstance, $filter, $q, entity, constants, health_file) {
  $scope.wristbandFiles = {measured_at:$filter("date")(new Date, "yyyy-M-dd H:mm:ss"), step_count:undefined, walk_count:undefined, run_count:undefined, distance:undefined, walk_distance:undefined, run_distance:undefined, calories:undefined, walk_calories:undefined, run_calories:undefined, deep_duration:undefined, shallow_duration:undefined, heart_rate:undefined, symptom:undefined, proposal:undefined};
  $scope.saveWristband = function() {
    $scope.wristbandFiles.measured_at = $filter("dateTounix")($filter("date")(new Date, "yyyy-M-dd H:mm:ss"));
    health_file.addWristbandData(entity.patient_id, $scope.wristbandFiles).then(function(data) {
      console.log(data);
      $scope.cancel();
    }, function(error) {
      console.log(error);
      $scope.cancel();
    });
  };
  $scope.sphygFiles = {measured_at:$filter("date")(new Date, "yyyy-M-dd H:mm:ss"), systolic_pressure:undefined, diastolic_pressure:undefined, heart_rate:undefined, symptom:undefined, proposal:undefined};
  $scope.saveSphygmomanometer = function() {
    $scope.sphygFiles.measured_at = $filter("dateTounix")($filter("date")($scope.sphygFiles.measured_at, "yyyy-M-dd H:mm:ss"));
    health_file.addSphygmomanometerData(entity.patient_id, $scope.sphygFiles).then(function(data) {
      console.log(data);
      $scope.cancel();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.oximeterFiles = {measured_at:$filter("date")(new Date, "yyyy-M-dd H:mm:ss"), oximeter_value:undefined, symptom:undefined, proposal:undefined};
  $scope.saveOximeter = function() {
    $scope.oximeterFiles.measured_at = $filter("dateTounix")($filter("date")($scope.oximeterFiles.measured_at, "yyyy-M-dd H:mm:ss"));
    console.log($scope.oximeterFiles);
    health_file.addOximeterData(entity.patient_id, $scope.oximeterFiles).then(function(data) {
      console.log(data);
      $scope.cancel();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.glucosemeterFiles = {measured_at:$filter("date")(new Date, "yyyy-M-dd H:mm:ss"), period:2, glucosemeter_value:undefined, symptom:undefined, proposal:undefined};
  console.log("$scope.periods");
  $scope.periods = constants.gotPERIODS();
  $scope.saveGlucosemeter = function() {
    $scope.glucosemeterFiles.measured_at = $filter("dateTounix")($filter("date")($scope.glucosemeterFiles.measured_at, "yyyy-M-dd H:mm:ss"));
    health_file.addGlucosemeterData(entity.patient_id, $scope.glucosemeterFiles).then(function(data) {
      console.log(data);
      $scope.cancel();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.thermometerFiles = {measured_at:$filter("date")(new Date, "yyyy-M-dd H:mm:ss"), thermometer_value:undefined, symptom:undefined, proposal:undefined};
  $scope.saveThermometer = function() {
    $scope.thermometerFiles.measured_at = $filter("dateTounix")($filter("date")($scope.thermometerFiles.measured_at, "yyyy-M-dd H:mm:ss"));
    health_file.addThermometerData(entity.patient_id, $scope.thermometerFiles).then(function(data) {
      console.log(data);
      $scope.cancel();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.fatFiles = {measured_at:$filter("date")(new Date, "yyyy-M-dd H:mm:ss"), bmi_value:undefined, weight_value:undefined, fat_value:undefined, calorie_value:undefined, moisture_value:undefined, muscle_value:undefined, visceral_fat_value:undefined, bone_value:undefined, symptom:undefined, proposal:undefined};
  $scope.saveFat = function() {
    $scope.fatFiles.measured_at = $filter("dateTounix")($filter("date")($scope.fatFiles.measured_at, "yyyy-M-dd H:mm:ss"));
    health_file.addFatsData(entity.patient_id, $scope.fatFiles).then(function(data) {
      console.log(data);
      $scope.cancel();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.otherFiles = {measured_at:$filter("date")(new Date, "yyyy-M-dd H:mm:ss"), symptom:undefined, proposal:undefined};
  $scope.saveOthers = function() {
    $scope.otherFiles.measured_at = $filter("dateTounix")($filter("date")($scope.otherFiles.measured_at, "yyyy-M-dd H:mm:ss"));
    health_file.addOthersData(entity.patient_id, $scope.otherFiles).then(function(data) {
      console.log(data);
      $scope.cancel();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.today = function() {
    $scope.dt = new Date;
  };
  $scope.dt = $scope.today();
  $scope.clear = function() {
    $scope.dt = null;
  };
  $scope.disabled = function(date, mode) {
    return mode === "day" && (date.getDay() === 0 || date.getDay() === 6);
  };
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.fat_open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.fat_opened = true;
  };
  $scope.glucosemeter_open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.glucosemeter_opened = true;
  };
  $scope.oximeter_open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.oximeter_opened = true;
  };
  $scope.wristband_open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.wristband_opened = true;
  };
  $scope.sphygmomanometer_open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.sphygmomanometer_opened = true;
  };
  $scope.thermometer_open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.thermometer_opened = true;
  };
  $scope.other_open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.other_opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.file_types = constants.gotFILETYPES();
  $scope.file_type = {selected:$scope.file_types[0]};
  activate();
  function activate() {
  }
  $scope.hideAllPages = function() {
    $scope.fat = true;
    $scope.glucosemeter = true;
    $scope.oximeter = true;
    $scope.sphygmomanometer = true;
    $scope.thermometer = true;
    $scope.wristband = true;
    $scope.other = true;
  };
  $scope.hideAllPages();
  $scope.wristband = false;
  $scope.formName = "wristbandForm";
  $scope.changePage = function() {
    var type = $scope.file_type.selected.file_type_name;
    switch(type) {
      case "\u8102\u80aa":
        $scope.hideAllPages();
        $scope.fat = false;
        $scope.formName = "fatForm";
        break;
      case "\u8840\u7cd6":
        $scope.hideAllPages();
        $scope.glucosemeter = false;
        $scope.formName = "glucosemeterForm";
        break;
      case "\u8840\u6c27":
        $scope.hideAllPages();
        $scope.oximeter = false;
        $scope.formName = "oximeterForm";
        break;
      case "\u8840\u538b":
        $scope.hideAllPages();
        $scope.sphygmomanometer = false;
        $scope.formName = "sphygmomanometerForm";
        break;
      case "\u4f53\u6e29":
        $scope.hideAllPages();
        $scope.thermometer = false;
        $scope.formName = "thermometerForm";
        break;
      case "\u624b\u73af":
        $scope.hideAllPages();
        $scope.wristband = false;
        $scope.formName = "wristbandForm";
        break;
      case "\u5176\u4ed6":
        $scope.hideAllPages();
        $scope.other = false;
        $scope.formName = "otherForm";
        break;
      default:
        $scope.hideAllPages();
        break;
    }
  };
  $scope.clearSomeFields = function() {
    if ($scope.formName == "fatForm") {
      $scope.fatFiles = {measured_at:$scope.fatFiles.measured_at, bmi_value:undefined, weight_value:undefined, fat_value:undefined, calorie_value:undefined, moisture_value:undefined, muscle_value:undefined, visceral_fat_value:undefined, bone_value:undefined, symptom:undefined, proposal:undefined};
    } else {
      if ($scope.formName == "glucosemeterForm") {
        $scope.glucosemeterFiles = {measured_at:$scope.glucosemeterFiles.measured_at, period:2, glucosemeter_value:undefined, symptom:undefined, proposal:undefined};
      } else {
        if ($scope.formName == "oximeterForm") {
          $scope.oximeterFiles = {measured_at:$scope.oximeterFiles.measured_at, oximeter_value:undefined, symptom:undefined, proposal:undefined};
        } else {
          if ($scope.formName == "sphygmomanometerForm") {
            $scope.sphygFiles = {measured_at:$scope.sphygFiles.measured_at, systolic_pressure:undefined, diastolic_pressure:undefined, heart_rate:undefined, symptom:undefined, proposal:undefined};
          } else {
            if ($scope.formName == "thermometerForm") {
              $scope.thermometerFiles = {measured_at:$scope.thermometerFiles.measured_at, thermometer_value:undefined, symptom:undefined, proposal:undefined};
            } else {
              if ($scope.formName == "wristbandForm") {
                $scope.wristbandFiles = {measured_at:$scope.wristbandFiles.measured_at, step_count:undefined, walk_count:undefined, run_count:undefined, distance:undefined, walk_distance:undefined, run_distance:undefined, calories:undefined, walk_calories:undefined, run_calories:undefined, deep_duration:undefined, shallow_duration:undefined, heart_rate:undefined, symptom:undefined, proposal:undefined};
              } else {
                if ($scope.formName == "otherForm") {
                  $scope.otherFiles = {measured_at:$scope.otherFiles.measured_at, symptom:undefined, proposal:undefined};
                } else {
                }
              }
            }
          }
        }
      }
    }
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxdctsec.add_patient_modal.add_patient_modal.Ctrl");
jxdctsec.add_patient_modal.add_patient_modal.Ctrl.$inject = ["$scope", "$modalInstance", "$timeout", "entity", "$filter", "health_file", "constants"];
jxdctsec.add_patient_modal.add_patient_modal.Ctrl = function($scope, $modalInstance, health_file, constants, $filter, $timeout) {
  var ctrl = this;
  $scope.patient = {name:undefined, birthday:undefined, gender:1, phone:undefined, address:undefined, profile:undefined};
  $scope.buttonEnabled = false;
  $scope.addPatient = function() {
    if (!isMobileOrTell($scope.patient.phone)) {
      $scope.addAlert("warning", "\u624b\u673a\u53f7\u975e\u6cd5\uff01");
      return;
    }
    if (!validParam($scope.patient.birthday)) {
      $scope.addAlert("warning", "\u51fa\u751f\u65e5\u671f\u5fc5\u586b\uff01");
      return;
    }
    $scope.patient.birthday = $filter("date")($scope.patient.birthday, "yyyy-M-dd");
    $scope.buttonEnabled = true;
    return health_file.addPatient($scope.patient).then(function(data) {
      console.log(data);
      $scope.addAlert("success", "\u6dfb\u52a0\u60a3\u8005\u6210\u529f\uff01");
      $scope.buttonEnabled = false;
      $timeout(function() {
        $scope.cancel();
      }, 3E3);
    }, function(error) {
      console.log(error);
      if (validParam(error.error_message) && error.error_message.faultcode == 1002020) {
        $scope.addAlert("danger", error.error_message.faultstring);
      } else {
        if (validParam(error.success_message)) {
          $scope.addAlert("danger", "\u6dfb\u52a0\u60a3\u8005\u5931\u8d25\uff01");
        }
      }
      $scope.buttonEnabled = false;
    });
  };
  function getGenders() {
    return constants.getGenders().then(function(data) {
      $scope.genders = data.genders;
      $scope.gender = {selected:undefined};
      return $scope.genders;
    });
  }
  getGenders();
  $scope.dt = new Date;
  $scope.minDate = new Date("1900/01/01");
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  function isMobileOrTell(str) {
    var mobile = /^1\d{10}$/;
    var tel = /^0\d{2,3}-?\d{7,8}$/;
    if (mobile.test(str) || tel.test(str)) {
      return true;
    }
    return false;
  }
  $scope.alert_type = undefined;
  $scope.alert_msg = undefined;
  $scope.addAlert = function(type, msg) {
    $scope.alert_type = type;
    $scope.alert_msg = msg;
    $timeout(function() {
      $scope.closeAlert();
    }, 3E3);
  };
  $scope.closeAlert = function() {
    $scope.alert_type = undefined;
    $scope.alert_msg = undefined;
  };
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
};
goog.provide("jxdctsec.confirm_modal.Ctrl");
jxdctsec.confirm_modal.Ctrl.$inject = ["$modalInstance", "items"];
jxdctsec.confirm_modal.Ctrl = function($modalInstance, items) {
  var ctrl = this;
  this.label = "some label from custom modal controller";
  ctrl.items = items;
  ctrl.selected = {item:ctrl.items[0]};
  ctrl.ok = function() {
    $modalInstance.close(ctrl.selected.item);
  };
  ctrl.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxdctsec.custom_modal.Ctrl");
jxdctsec.custom_modal.Ctrl.$inject = ["close"];
jxdctsec.custom_modal.Ctrl = function(close) {
  var ctrl = this;
  this.label = "some label from custom modal controller";
  ctrl.display = true;
  ctrl.close = function() {
    ctrl.display = false;
    close();
  };
};
goog.provide("jxdctsec.edit_patient_modal.edit_patient_modal.Ctrl");
jxdctsec.edit_patient_modal.edit_patient_modal.Ctrl.$inject = ["$scope", "$modalInstance", "$timeout", "entity", "$filter", "health_file", "constants"];
jxdctsec.edit_patient_modal.edit_patient_modal.Ctrl = function($scope, $modalInstance, $timeout, health_file, constants, $filter, entity) {
  var ctrl = this;
  $scope.patient = entity;
  function getGenders() {
    return constants.getGenders().then(function(data) {
      $scope.genders = data.genders;
      $scope.gender = {selected:undefined};
      return $scope.genders;
    });
  }
  getGenders();
  $scope.updatePatient = function() {
    if (!validParam($scope.patient.birthday)) {
      $scope.addAlert("warning", "\u51fa\u751f\u5e74\u6708\u5b57\u6bb5\u5fc5\u586b\uff01");
      return;
    }
    $scope.patient.birthday = $filter("date")($scope.patient.birthday, "yyyy-MM-dd");
    return health_file.updatePatient($scope.patient.patient_id, $scope.patient).then(function(data) {
      $scope.addAlert("success", "\u4fee\u6539\u6210\u529f\uff01");
    }, function(error) {
      console.log(error);
      $scope.addAlert("danger", "\u4fee\u6539\u51fa\u9519\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
    });
  };
  $scope.dt = new Date;
  $scope.minDate = new Date("1949/01/01");
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  var validParam = function(param) {
    if (param != undefined && param != null && param != "") {
      return true;
    }
    return false;
  };
};
goog.provide("jxdctsec.main.health_file.module");
goog.require("jxdctsec.main.health_file.Ctrl");
goog.require("jxdctsec.add_patient_modal.add_patient_modal.Ctrl");
goog.require("jxdctsec.edit_patient_modal.edit_patient_modal.Ctrl");
goog.require("jxdctsec.add_file_modal.add_file_modal.Ctrl");
jxdctsec.main.health_file.module = angular.module("main.health_file", ["ui.router", "ui.grid", "ui.grid.pinning", "ui.grid.resizeColumns", "ui.grid.saveState", "ui.grid.edit", "ui.grid.pagination", "ui.select", "ui.bootstrap", "ngSanitize", "angularModalService"]);
jxdctsec.main.health_file.module.configuration = function($stateProvider) {
  $stateProvider.state("main.health_file", {url:"/health_file", templateUrl:"states/main/health_file/health_file.html", controller:"HealthFileCtrl as healthFile", resolve:{"GENDERSPromise":function(constants) {
    return constants.GENDERSPromise;
  }}});
};
jxdctsec.main.health_file.module.config(jxdctsec.main.health_file.module.configuration).controller("AddPatientModalCtrl", jxdctsec.add_patient_modal.add_patient_modal.Ctrl).controller("EditPatientModalCtrl", jxdctsec.edit_patient_modal.edit_patient_modal.Ctrl).controller("AddFileModalCtrl", jxdctsec.add_file_modal.add_file_modal.Ctrl).controller("HealthFileCtrl", jxdctsec.main.health_file.Ctrl);
goog.provide("jxdctsec.evaluation_fat_modal.Ctrl");
jxdctsec.evaluation_fat_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "entity", "health_data"];
jxdctsec.evaluation_fat_modal.Ctrl = function($scope, $filter, $modalInstance, entity, health_data) {
  this.label = "some label from custom modal controller";
  $scope.entity = entity;
  $scope.entity.measured_at = $filter("unixTodate")(entity.measured_at);
  console.log("$scope.entity");
  console.log($scope.entity);
  $scope.submitEvaluation = function() {
    $scope.entity.measured_at = $filter("dateTounix")($scope.entity.measured_at);
    health_data.saveFats($scope.entity.id, $scope.entity).then(function(data) {
      console.log(data);
      $scope.cancel();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxdctsec.main.health_data.fat_datas.module");
goog.require("jxdctsec.main.health_data.fat_datas.Ctrl");
goog.require("jxdctsec.evaluation_fat_modal.Ctrl");
jxdctsec.main.health_data.fat_datas.module = angular.module("main.health_data.fat_datas", ["ui.router", "ui.grid.grouping"]);
jxdctsec.main.health_data.fat_datas.module.configuration = function($stateProvider) {
  $stateProvider.state("main.health_data.fat_datas", {url:"/fat_datas/:permission_id/:permission_name", templateUrl:"states/main/health_data/fat_datas/fat_datas.html", controller:"FatDatasCtrl as fatDatas"});
};
jxdctsec.main.health_data.fat_datas.module.config(jxdctsec.main.health_data.fat_datas.module.configuration).controller("FatDatasCtrl", jxdctsec.main.health_data.fat_datas.Ctrl).controller("FatEvaluationCtrl", jxdctsec.evaluation_fat_modal.Ctrl);
goog.provide("jxdctsec.evaluation_glucosemeter_modal.Ctrl");
jxdctsec.evaluation_glucosemeter_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "entity", "health_data", "constants"];
jxdctsec.evaluation_glucosemeter_modal.Ctrl = function($scope, $filter, $modalInstance, entity, health_data, constants) {
  this.label = "some label from custom modal controller";
  var getPeriods = function() {
    constants.getPeriods().then(function(data) {
      $scope.periods = data.periods;
      console.log($scope.periods);
    });
  };
  getPeriods();
  $scope.entity = entity;
  $scope.entity.measured_at = $filter("unixTodate")(entity.measured_at);
  console.log("$scope.entity");
  console.log($scope.entity);
  $scope.submitEvaluation = function() {
    $scope.entity.measured_at = $filter("dateTounix")($scope.entity.measured_at);
    health_data.saveGlucosemeters($scope.entity.id, $scope.entity).then(function(data) {
      console.log(data);
      $scope.cancel();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxdctsec.main.health_data.glucosemeter_datas.module");
goog.require("jxdctsec.main.health_data.glucosemeter_datas.Ctrl");
goog.require("jxdctsec.evaluation_glucosemeter_modal.Ctrl");
jxdctsec.main.health_data.glucosemeter_datas.module = angular.module("main.health_data.glucosemeter_datas", ["ui.router", "ui.grid.grouping"]);
jxdctsec.main.health_data.glucosemeter_datas.module.configuration = function($stateProvider) {
  $stateProvider.state("main.health_data.glucosemeter_datas", {url:"/glucosemeter_datas/:permission_id/:permission_name", templateUrl:"states/main/health_data/glucosemeter_datas/glucosemeter_datas.html", controller:"GlucosemeterDatasCtrl as glucosemeterDatasCtrl"});
};
jxdctsec.main.health_data.glucosemeter_datas.module.config(jxdctsec.main.health_data.glucosemeter_datas.module.configuration).controller("GlucosemeterDatasCtrl", jxdctsec.main.health_data.glucosemeter_datas.Ctrl).controller("GlucosemeterEvaluationCtrl", jxdctsec.evaluation_glucosemeter_modal.Ctrl);
goog.provide("jxdctsec.evaluation_oximeter_modal.Ctrl");
jxdctsec.evaluation_oximeter_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "entity", "health_data"];
jxdctsec.evaluation_oximeter_modal.Ctrl = function($scope, $filter, $modalInstance, entity, health_data) {
  this.label = "some label from custom modal controller";
  $scope.entity = entity;
  $scope.entity.measured_at = $filter("unixTodate")(entity.measured_at);
  console.log("$scope.entity");
  console.log($scope.entity);
  $scope.submitEvaluation = function() {
    $scope.entity.measured_at = $filter("dateTounix")($scope.entity.measured_at);
    health_data.saveOximeters($scope.entity.id, $scope.entity).then(function(data) {
      console.log(data);
      $scope.cancel();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxdctsec.main.health_data.oximeter_datas.module");
goog.require("jxdctsec.main.health_data.oximeter_datas.Ctrl");
goog.require("jxdctsec.evaluation_oximeter_modal.Ctrl");
jxdctsec.main.health_data.oximeter_datas.module = angular.module("main.health_data.oximeter_datas", ["ui.router", "ui.grid.grouping"]);
jxdctsec.main.health_data.oximeter_datas.module.configuration = function($stateProvider) {
  $stateProvider.state("main.health_data.oximeter_datas", {url:"/oximeter_datas/:permission_id/:permission_name", templateUrl:"states/main/health_data/oximeter_datas/oximeter_datas.html", controller:"OximeterDatasCtrl as oximeterDatas"});
};
jxdctsec.main.health_data.oximeter_datas.module.config(jxdctsec.main.health_data.oximeter_datas.module.configuration).controller("OximeterDatasCtrl", jxdctsec.main.health_data.oximeter_datas.Ctrl).controller("OximeterEvaluationCtrl", jxdctsec.evaluation_oximeter_modal.Ctrl);
goog.provide("jxdctsec.evaluation_sphygmomanometer_modal.Ctrl");
jxdctsec.evaluation_sphygmomanometer_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "entity", "health_data"];
jxdctsec.evaluation_sphygmomanometer_modal.Ctrl = function($scope, $filter, $modalInstance, entity, health_data) {
  this.label = "some label from custom modal controller";
  $scope.entity = entity;
  $scope.entity.measured_at = $filter("unixTodate")(entity.measured_at);
  console.log("$scope.entity");
  console.log($scope.entity);
  $scope.submitEvaluation = function() {
    $scope.entity.measured_at = $filter("dateTounix")($scope.entity.measured_at);
    health_data.saveSphygmomanometers($scope.entity.id, $scope.entity).then(function(data) {
      console.log(data);
      $scope.cancel();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxdctsec.main.health_data.sphygmomanometer_datas.module");
goog.require("jxdctsec.main.health_data.sphygmomanometer_datas.Ctrl");
goog.require("jxdctsec.evaluation_sphygmomanometer_modal.Ctrl");
jxdctsec.main.health_data.sphygmomanometer_datas.module = angular.module("main.health_data.sphygmomanometer_datas", ["ui.router", "ui.grid.grouping"]);
jxdctsec.main.health_data.sphygmomanometer_datas.module.configuration = function($stateProvider) {
  $stateProvider.state("main.health_data.sphygmomanometer_datas", {url:"/sphygmomanometer_datas/:permission_id/:permission_name", templateUrl:"states/main/health_data/sphygmomanometer_datas/sphygmomanometer_datas.html", controller:"SphygmomanometerDatasCtrl as sphygmomanometerDatasCtrl"});
};
jxdctsec.main.health_data.sphygmomanometer_datas.module.config(jxdctsec.main.health_data.sphygmomanometer_datas.module.configuration).controller("SphygmomanometerDatasCtrl", jxdctsec.main.health_data.sphygmomanometer_datas.Ctrl).controller("sphygmomanometerEvaluationCtrl", jxdctsec.evaluation_sphygmomanometer_modal.Ctrl);
goog.provide("jxdctsec.evaluation_thermometer_modal.Ctrl");
jxdctsec.evaluation_thermometer_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "entity", "health_data"];
jxdctsec.evaluation_thermometer_modal.Ctrl = function($scope, $filter, $modalInstance, entity, health_data) {
  this.label = "some label from custom modal controller";
  $scope.entity = entity;
  $scope.entity.measured_at = $filter("unixTodate")(entity.measured_at);
  console.log("$scope.entity");
  console.log($scope.entity);
  $scope.submitEvaluation = function() {
    $scope.entity.measured_at = $filter("dateTounix")($scope.entity.measured_at);
    health_data.saveThermometers($scope.entity.id, $scope.entity).then(function(data) {
      console.log(data);
      $scope.cancel();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxdctsec.main.health_data.thermometer_datas.module");
goog.require("jxdctsec.main.health_data.thermometer_datas.Ctrl");
goog.require("jxdctsec.evaluation_thermometer_modal.Ctrl");
jxdctsec.main.health_data.thermometer_datas.module = angular.module("main.health_data.thermometer_datas", ["ui.router", "ui.grid.grouping"]);
jxdctsec.main.health_data.thermometer_datas.module.configuration = function($stateProvider) {
  $stateProvider.state("main.health_data.thermometer_datas", {url:"/thermometer_datas/:permission_id/:permission_name", templateUrl:"states/main/health_data/thermometer_datas/thermometer_datas.html", controller:"ThermometerDatasCtrl as thermometerDatasCtrl"});
};
jxdctsec.main.health_data.thermometer_datas.module.config(jxdctsec.main.health_data.thermometer_datas.module.configuration).controller("ThermometerDatasCtrl", jxdctsec.main.health_data.thermometer_datas.Ctrl).controller("ThermometerEvaluationCtrl", jxdctsec.evaluation_thermometer_modal.Ctrl);
goog.provide("jxdctsec.evaluation_wristband_modal.Ctrl");
jxdctsec.evaluation_wristband_modal.Ctrl.$inject = ["$scope", "$filter", "$modalInstance", "entity", "health_data"];
jxdctsec.evaluation_wristband_modal.Ctrl = function($scope, $filter, $modalInstance, entity, health_data) {
  this.label = "some label from custom modal controller";
  $scope.entity = entity;
  $scope.entity.measured_at = $filter("unixTodate")(entity.measured_at);
  console.log("$scope.entity");
  console.log($scope.entity);
  $scope.submitEvaluation = function() {
    $scope.entity.measured_at = $filter("dateTounix")($scope.entity.measured_at);
    health_data.saveWristbands($scope.entity.id, $scope.entity).then(function(data) {
      console.log(data);
      $scope.cancel();
    }, function(error) {
      console.log(error);
    });
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxdctsec.main.health_data.wristband_datas.module");
goog.require("jxdctsec.main.health_data.wristband_datas.Ctrl");
goog.require("jxdctsec.evaluation_wristband_modal.Ctrl");
jxdctsec.main.health_data.wristband_datas.module = angular.module("main.health_data.wristband_datas", ["ui.router", "ui.grid.pinning", "ui.grid", "ui.grid.pagination", "ui.grid.grouping"]);
jxdctsec.main.health_data.wristband_datas.module.configuration = function($stateProvider) {
  $stateProvider.state("main.health_data.wristband_datas", {url:"/wristband_datas/:permission_id/:permission_name", templateUrl:"states/main/health_data/wristband_datas/wristband_datas.html", controller:"WristbandDatasCtrl as wristbandDatasCtrl"});
};
jxdctsec.main.health_data.wristband_datas.module.config(jxdctsec.main.health_data.wristband_datas.module.configuration).controller("WristbandEvaluationCtrl", jxdctsec.evaluation_wristband_modal.Ctrl).controller("WristbandDatasCtrl", jxdctsec.main.health_data.wristband_datas.Ctrl);
goog.provide("jxdctsec.health_report.fat_modal.Ctrl");
jxdctsec.health_report.fat_modal.Ctrl.$inject = ["$scope", "$modalInstance", "$timeout", "entity", "db_operation", "$filter"];
jxdctsec.health_report.fat_modal.Ctrl = function($scope, $modalInstance, $timeout, $filter, entity, db_operation) {
  var ctrl = this;
  this.label = "some label from custom modal controller";
  $scope.entity = entity;
  $scope.patFat = {measured_at:undefined, bmi_value:undefined, weight_value:undefined, fat_value:undefined, calorie_value:undefined, moisture_value:undefined, muscle_value:undefined, visceral_fat_value:undefined, bone_value:undefined, symptom:undefined, proposal:undefined};
  $scope.getPatFat = function() {
    db_operation.getPatFat($scope.entity.patient_id, $scope.entity.file_id).then(function(data) {
      console.log(data);
      $scope.patFat = data;
      $scope.patFat.measured_at = $filter("unixTodate")(data.measured_at);
    }, function(error) {
      console.log(data);
    });
  };
  var timer = undefined;
  $scope.getPatFat();
  $scope.disabledBtn = false;
  $scope.savePatFat = function() {
    $scope.disabledBtn = true;
    $scope.patFat.measured_at = $filter("dateTounix")($filter("date")($scope.patFat.measured_at, "yyyy-M-dd H:mm:ss"));
    db_operation.putPatFat($scope.entity.patient_id, $scope.entity.file_id, $scope.patFat).then(function(data) {
      $scope.patFat.measured_at = $filter("unixTodate")($scope.patFat.measured_at);
      $scope.addAlert("success", "\u63a8\u9001\u6210\u529f\uff0c3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
      timer = $timeout(function() {
        $scope.disabledBtn = false;
        $scope.cancel();
      }, 3E3);
    }, function(error) {
      $scope.addAlert("danger", "\u63a8\u9001\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      $scope.disabledBtn = false;
    });
  };
  $scope.$on("$destroy", function() {
    console.log("modal destroy!");
    if (timer) {
      $timeout.cancel(timer);
    }
  });
  $scope.today = function() {
    $scope.dt = new Date;
  };
  $scope.clear = function() {
    $scope.dt = null;
  };
  $scope.disabled = function(date, mode) {
    return mode === "day" && (date.getDay() === 0 || date.getDay() === 6);
  };
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxdctsec.health_report.glucosemeter_modal.Ctrl");
jxdctsec.health_report.glucosemeter_modal.Ctrl.$inject = ["$scope", "$modalInstance", "$timeout", "entity", "db_operation", "$filter", "constants"];
jxdctsec.health_report.glucosemeter_modal.Ctrl = function($scope, $modalInstance, $filter, $timeout, entity, constants, db_operation) {
  this.label = "some label from custom modal controller";
  $scope.entity = entity;
  console.log($scope.entity);
  $scope.patGlucose = {measured_at:undefined, period:undefined, glucosemeter_value:undefined, symptom:undefined, proposal:undefined};
  $scope.periods = constants.gotPERIODS();
  $scope.getPatGlucose = function() {
    db_operation.getPatGlucose($scope.entity.patient_id, $scope.entity.file_id).then(function(data) {
      console.log(data);
      $scope.patGlucose = data;
      $scope.patGlucose.measured_at = $filter("unixTodate")(data.measured_at);
    }, function(error) {
      console.log(error);
    });
  };
  $scope.getPatGlucose();
  var timer = undefined;
  $scope.disabledBtn = false;
  $scope.savePatGlucose = function() {
    $scope.disabledBtn = true;
    $scope.patGlucose.measured_at = $filter("dateTounix")($filter("date")($scope.patGlucose.measured_at, "yyyy-M-dd H:mm:ss"));
    db_operation.putPatGlucose($scope.entity.patient_id, $scope.entity.file_id, $scope.patGlucose).then(function(data) {
      $scope.patGlucose.measured_at = $filter("unixTodate")($scope.patGlucose.measured_at);
      $scope.addAlert("success", "\u63a8\u9001\u6210\u529f\uff0c3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
      timer = $timeout(function() {
        $scope.disabledBtn = false;
        $scope.cancel();
      }, 3E3);
    }, function(error) {
      $scope.addAlert("danger", "\u63a8\u9001\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      $scope.disabledBtn = false;
    });
  };
  $scope.$on("$destroy", function() {
    console.log("modal destroy!");
    if (timer) {
      $timeout.cancel(timer);
    }
  });
  $scope.today = function() {
    $scope.dt = new Date;
  };
  $scope.dt = entity.measured_at_date;
  $scope.clear = function() {
    $scope.dt = null;
  };
  $scope.disabled = function(date, mode) {
    return mode === "day" && (date.getDay() === 0 || date.getDay() === 6);
  };
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.time_section = {selected:"1"};
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxdctsec.health_report.health_con_modal.Ctrl");
jxdctsec.health_report.health_con_modal.Ctrl.$inject = ["$scope", "$modalInstance", "$sce", "$timeout", "entity", "health_con"];
jxdctsec.health_report.health_con_modal.Ctrl = function($scope, $modalInstance, $sce, $timeout, entity, health_con, ngAudio) {
  var ctrl = this;
  this.label = "some label from custom modal controller";
  $scope.entity = entity;
  $scope.currentMessage = undefined;
  $scope.currentAudio = undefined;
  $scope.playAudio = function(message) {
    if ($scope.currentMessage === undefined || $scope.currentMessage != message) {
      if ($scope.currentAudio != undefined) {
        $scope.currentAudio.stop();
        console.log("\u505c\u6b62");
      }
      if ($scope.currentMessage != undefined) {
        $scope.currentMessage.speakBtn = "../../img/speak.png";
      }
      $scope.currentMessage = message;
      $scope.currentAudio = ngAudio.load($scope.currentMessage.audio_url);
      $scope.currentAudio.play();
      $scope.currentMessage.speakBtn = "../../img/speak.gif";
      console.log("\u64ad\u653e");
      $scope.$watch("currentAudio.paused", function(newValue, oldValue) {
        if (newValue) {
          $scope.currentMessage.speakBtn = "../../img/speak.png";
        }
      });
    } else {
      if ($scope.currentAudio.paused) {
        if ($scope.currentAudio.remaining > 0) {
          $scope.currentAudio.play();
          $scope.currentMessage.speakBtn = "../../img/speak.gif";
          console.log("\u7ee7\u7eed");
        } else {
          $scope.currentAudio.play();
          $scope.currentMessage.speakBtn = "../../img/speak.gif";
          console.log("\u91cd\u64ad");
        }
      } else {
        $scope.currentAudio.pause();
        $scope.currentMessage.speakBtn = "../../img/speak.png";
        console.log("\u6682\u505c");
      }
    }
  };
  $scope.queryQAandReply = function() {
    health_con.getQAandReply($scope.entity.consultation_id).then(function(res) {
      if (res != undefined && res != null) {
        $scope.messages = res.qas;
        for (var i = $scope.messages.length - 1;i >= 0;i--) {
          if ($scope.messages[i].audio_url != undefined) {
            $scope.messages[i].speakBtn = "../../img/speak.png";
          }
        }
      }
    }, function(error) {
      console.log("error!");
    });
  };
  $scope.queryQAandReply();
  var onTimeout = function() {
    $scope.queryQAandReply();
    timer = $timeout(onTimeout, 3E3);
  };
  var timer = $timeout(onTimeout, 3E3);
  $scope.$on("$destroy", function() {
    if (timer) {
      $timeout.cancel(timer);
    }
  });
  $scope.clear = function() {
    $scope.dt = null;
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.replyer = {content:"", qa_type:1};
  $scope.sendReply = function() {
    var reply = angular.copy($scope.replyer);
    if (reply.content != undefined && reply.content != "") {
      console.log(reply);
      $scope.messages.push(reply);
      console.log($scope.messages);
    }
    health_con.sendReply($scope.entity.consultation_id, $scope.replyer).then(function(res) {
      console.log(res);
      if (res != undefined && res != null && res == $scope.entity.consultation_id) {
        console.log("\u4fdd\u5b58\u6210\u529f");
      } else {
      }
      $scope.replyer.content = "";
    }, function(error) {
      console.log("error!");
    });
  };
};
goog.provide("jxdctsec.main.health_consultation.module");
goog.require("jxdctsec.main.health_consultation.Ctrl");
goog.require("jxdctsec.health_report.health_con_modal.Ctrl");
jxdctsec.main.health_consultation.module = angular.module("main.health_consultation", ["ui.router", "ui.select", "ui.bootstrap", "ngSanitize", "irontec.simpleChat", "com.2fdevs.videogular", "com.2fdevs.videogular.plugins.controls", "ngAudio"]);
jxdctsec.main.health_consultation.module.configuration = function($stateProvider) {
  $stateProvider.state("main.health_consultation", {url:"/health_consultation", templateUrl:"states/main/health_consultation/health_consultation.html", controller:"HealthConsultationCtrl as healthconsultation", resolve:{"DISTRICTSPromise":function(constants) {
    return constants.DISTRICTSPromise;
  }, "HEALTHCONSULTATIONSTATUSPromise":function(constants) {
    return constants.HEALTHCONSULTATIONSTATUSPromise;
  }, "DEPARTMENTSPromise":function(constants) {
    return constants.DEPARTMENTSPromise;
  }}});
};
jxdctsec.main.health_consultation.module.config(jxdctsec.main.health_consultation.module.configuration).controller("HealthConsultationCtrl", jxdctsec.main.health_consultation.Ctrl).controller("HealthConModalCtrl", jxdctsec.health_report.health_con_modal.Ctrl);
goog.provide("jxdctsec.health_report.other_modal.Ctrl");
jxdctsec.health_report.other_modal.Ctrl.$inject = ["$scope", "$modalInstance", "$timeout", "entity", "db_operation", "$filter"];
jxdctsec.health_report.other_modal.Ctrl = function($scope, $filter, $modalInstance, $timeout, entity, db_operation) {
  this.label = "some label from custom modal controller";
  $scope.entity = entity;
  $scope.patOther = {measured_at:undefined, symptom:undefined, proposal:undefined};
  $scope.getPatOther = function() {
    db_operation.getPatOther($scope.entity.patient_id, $scope.entity.file_id).then(function(data) {
      $scope.patOther = data;
      $scope.patOther.measured_at = $filter("unixTodate")(data.measured_at);
    }, function(error) {
      console.log(error);
    });
  };
  $scope.getPatOther();
  var timer = undefined;
  $scope.disabledBtn = false;
  $scope.savePatOther = function() {
    $scope.disabledBtn = true;
    $scope.patOther.measured_at = $filter("dateTounix")($filter("date")($scope.patOther.measured_at, "yyyy-M-dd H:mm:ss"));
    db_operation.putPatOther($scope.entity.patient_id, $scope.entity.file_id, $scope.patOther).then(function(data) {
      $scope.patOther.measured_at = $filter("unixTodate")($scope.patOther.measured_at);
      $scope.addAlert("success", "\u63a8\u9001\u6210\u529f\uff0c3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
      timer = $timeout(function() {
        $scope.disabledBtn = false;
        $scope.cancel();
      }, 3E3);
    }, function(error) {
      $scope.addAlert("danger", "\u63a8\u9001\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      $scope.disabledBtn = false;
    });
  };
  $scope.$on("$destroy", function() {
    console.log("modal destroy!");
    if (timer) {
      $timeout.cancel(timer);
    }
  });
  $scope.today = function() {
    $scope.dt = new Date;
  };
  $scope.dt = entity.measured_at_date;
  $scope.clear = function() {
    $scope.dt = null;
  };
  $scope.disabled = function(date, mode) {
    return mode === "day" && (date.getDay() === 0 || date.getDay() === 6);
  };
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxdctsec.health_report.oximeter_modal.Ctrl");
jxdctsec.health_report.oximeter_modal.Ctrl.$inject = ["$scope", "$modalInstance", "$timeout", "entity", "db_operation", "$filter"];
jxdctsec.health_report.oximeter_modal.Ctrl = function($scope, $filter, $modalInstance, $timeout, entity, db_operation) {
  this.label = "some label from custom modal controller";
  $scope.entity = entity;
  console.log($scope.entity);
  $scope.patOxi = {measured_at:undefined, oximeter_value:undefined, symptom:undefined, proposal:undefined};
  $scope.getPatOxi = function() {
    db_operation.getPatOxi($scope.entity.patient_id, $scope.entity.file_id).then(function(data) {
      $scope.patOxi = data;
      $scope.patOxi.measured_at = $filter("unixTodate")(data.measured_at);
      console.log(data);
    }, function(error) {
      console.log(error);
    });
  };
  $scope.getPatOxi();
  var timer = undefined;
  $scope.disabledBtn = false;
  $scope.savePatOxi = function() {
    $scope.disabledBtn = true;
    $scope.patOxi.measured_at = $filter("dateTounix")($filter("date")($scope.patOxi.measured_at, "yyyy-M-dd H:mm:ss"));
    db_operation.putPatOxi($scope.entity.patient_id, $scope.entity.file_id, $scope.patOxi).then(function(data) {
      $scope.patOxi.measured_at = $filter("unixTodate")($scope.patOxi.measured_at);
      $scope.addAlert("success", "\u63a8\u9001\u6210\u529f\uff0c3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
      timer = $timeout(function() {
        $scope.disabledBtn = false;
        $scope.cancel();
      }, 3E3);
    }, function(error) {
      $scope.addAlert("danger", "\u63a8\u9001\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      $scope.disabledBtn = false;
    });
  };
  $scope.$on("$destroy", function() {
    console.log("modal destroy!");
    if (timer) {
      $timeout.cancel(timer);
    }
  });
  $scope.today = function() {
    $scope.dt = new Date;
  };
  $scope.dt = entity.measured_at_date;
  $scope.clear = function() {
    $scope.dt = null;
  };
  $scope.disabled = function(date, mode) {
    return mode === "day" && (date.getDay() === 0 || date.getDay() === 6);
  };
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxdctsec.health_report.permission_list_modal.Ctrl");
jxdctsec.health_report.permission_list_modal.Ctrl.$inject = ["$scope", "$modalInstance", "$sce", "entity"];
jxdctsec.health_report.permission_list_modal.Ctrl = function($scope, $modalInstance, entity) {
  var ctrl = this;
  this.label = "some label from custom modal controller";
  $scope.filters = entity.filters;
  $scope.type = entity.data_type;
  $scope.clear = function() {
    $scope.dt = null;
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
};
goog.provide("jxdctsec.main.health_data.permission_list.module");
goog.require("jxdctsec.main.health_data.permission_list.Ctrl");
goog.require("jxdctsec.health_report.permission_list_modal.Ctrl");
jxdctsec.main.health_data.permission_list.module = angular.module("main.health_data.permission_list", ["ui.router", "ui.grid", "ui.grid.pinning", "ui.grid.resizeColumns", "ui.grid.saveState", "ui.grid.edit", "ui.grid.pagination"]);
jxdctsec.main.health_data.permission_list.module.configuration = function($stateProvider) {
  $stateProvider.state("main.health_data.permission_list", {url:"/permission_list", templateUrl:"states/main/health_data/permission_list/permission_list.html", controller:"PermissionListCtrl as permissionList", resolve:{"DATATYPESPromise":function(constants) {
    return constants.DATATYPESPromise;
  }, "DISTRICTSPromise":function(constants) {
    return constants.DISTRICTSPromise;
  }, "PROVINCESPromise":function(constants) {
    return constants.PROVINCESPromise;
  }, "CITIESPromise":function(constants) {
    return constants.CITIESPromise;
  }, "ZONESPromise":function(constants) {
    return constants.ZONESPromise;
  }}});
};
jxdctsec.main.health_data.permission_list.module.config(jxdctsec.main.health_data.permission_list.module.configuration).controller("PermissionListCtrl", jxdctsec.main.health_data.permission_list.Ctrl).controller("PermissionListModalCtrl", jxdctsec.health_report.permission_list_modal.Ctrl);
goog.provide("jxdctsec.main.health_data.module");
goog.require("jxdctsec.main.health_data.permission_list.module");
goog.require("jxdctsec.main.health_data.fat_datas.module");
goog.require("jxdctsec.main.health_data.glucosemeter_datas.module");
goog.require("jxdctsec.main.health_data.oximeter_datas.module");
goog.require("jxdctsec.main.health_data.sphygmomanometer_datas.module");
goog.require("jxdctsec.main.health_data.wristband_datas.module");
goog.require("jxdctsec.main.health_data.thermometer_datas.module");
goog.require("jxdctsec.main.health_data.Ctrl");
jxdctsec.main.health_data.module = angular.module("main.health_data", ["ui.router", jxdctsec.main.health_data.permission_list.module.name, jxdctsec.main.health_data.fat_datas.module.name, jxdctsec.main.health_data.glucosemeter_datas.module.name, jxdctsec.main.health_data.oximeter_datas.module.name, jxdctsec.main.health_data.sphygmomanometer_datas.module.name, jxdctsec.main.health_data.wristband_datas.module.name, jxdctsec.main.health_data.thermometer_datas.module.name]);
jxdctsec.main.health_data.module.configuration = function($stateProvider) {
  $stateProvider.state("main.health_data", {url:"/health_data", templateUrl:"states/main/health_data/health_data.html", controller:"HealthDataCtrl as healthData"});
};
jxdctsec.main.health_data.module.config(jxdctsec.main.health_data.module.configuration).controller("HealthDataCtrl", jxdctsec.main.health_data.Ctrl);
goog.provide("jxdctsec.health_report.sphygmomanometer_modal.Ctrl");
jxdctsec.health_report.sphygmomanometer_modal.Ctrl.$inject = ["$scope", "$modalInstance", "$timeout", "entity", "db_operation", "$filter"];
jxdctsec.health_report.sphygmomanometer_modal.Ctrl = function($scope, $modalInstance, $timeout, $filter, entity, db_operation) {
  this.label = "some label from custom modal controller";
  $scope.entity = entity;
  console.log("$scope.entity");
  console.log($scope.entity);
  $scope.patSphy = {measured_at:undefined, systolic_pressure:undefined, diastolic_pressure:undefined, heart_rate:undefined, symptom:undefined, proposal:undefined};
  $scope.getPatSphy = function() {
    db_operation.getPatSphyg($scope.entity.patient_id, $scope.entity.file_id).then(function(data) {
      $scope.patSphy = data;
      $scope.patSphy.measured_at = $filter("unixTodate")(data.measured_at);
      console.log(data);
    }, function(error) {
      console.log(error);
    });
  };
  $scope.getPatSphy();
  var timer = undefined;
  $scope.disabledBtn = false;
  $scope.savePatSphy = function() {
    $scope.disabledBtn = true;
    $scope.patSphy.measured_at = $filter("dateTounix")($filter("date")($scope.patSphy.measured_at, "yyyy-M-dd H:mm:ss"));
    db_operation.putPatSphyg($scope.entity.patient_id, $scope.entity.file_id, $scope.patSphy).then(function(data) {
      $scope.patSphy.measured_at = $filter("unixTodate")($scope.patSphy.measured_at);
      $scope.addAlert("success", "\u63a8\u9001\u6210\u529f\uff0c3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
      timer = $timeout(function() {
        $scope.disabledBtn = false;
        $scope.cancel();
      }, 3E3);
    }, function(error) {
      $scope.addAlert("danger", "\u63a8\u9001\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      $scope.disabledBtn = false;
    });
  };
  $scope.$on("$destroy", function() {
    console.log("modal destroy!");
    if (timer) {
      $timeout.cancel(timer);
    }
  });
  $scope.today = function() {
    $scope.dt = new Date;
  };
  $scope.dt = entity.measured_at_date;
  $scope.clear = function() {
    $scope.dt = null;
  };
  $scope.disabled = function(date, mode) {
    return mode === "day" && (date.getDay() === 0 || date.getDay() === 6);
  };
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxdctsec.health_report.thermometer_modal.Ctrl");
jxdctsec.health_report.thermometer_modal.Ctrl.$inject = ["$scope", "$modalInstance", "$timeout", "entity", "db_operation", "$filter"];
jxdctsec.health_report.thermometer_modal.Ctrl = function($scope, $modalInstance, $timeout, $filter, entity, db_operation) {
  this.label = "some label from custom modal controller";
  $scope.entity = entity;
  console.log(entity);
  $scope.patThermome = {measured_at:undefined, thermometer_value:undefined, symptom:undefined, proposal:undefined};
  $scope.getPatThermome = function() {
    db_operation.getPatThermome($scope.entity.patient_id, $scope.entity.file_id).then(function(data) {
      $scope.patThermome = data;
      $scope.patThermome.measured_at = $filter("unixTodate")(data.measured_at);
    }, function(error) {
      console.log(error);
    });
  };
  var timer = undefined;
  $scope.getPatThermome();
  $scope.disabledBtn = false;
  $scope.savePatThermome = function() {
    $scope.disabledBtn = true;
    $scope.patThermome.measured_at = $filter("dateTounix")($filter("date")($scope.patThermome.measured_at, "yyyy-M-dd H:mm:ss"));
    db_operation.putPatThermome($scope.entity.patient_id, $scope.entity.file_id, $scope.patThermome).then(function(data) {
      $scope.patThermome.measured_at = $filter("unixTodate")($scope.patThermome.measured_at);
      $scope.addAlert("success", "\u63a8\u9001\u6210\u529f\uff0c3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
      timer = $timeout(function() {
        $scope.disabledBtn = false;
        $scope.cancel();
      }, 3E3);
    }, function(error) {
      $scope.addAlert("danger", "\u63a8\u9001\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      $scope.disabledBtn = false;
    });
  };
  $scope.$on("$destroy", function() {
    console.log("modal destroy!");
    if (timer) {
      $timeout.cancel(timer);
    }
  });
  $scope.today = function() {
    $scope.dt = new Date;
  };
  $scope.dt = entity.measured_at_date;
  $scope.clear = function() {
    $scope.dt = null;
  };
  $scope.disabled = function(date, mode) {
    return mode === "day" && (date.getDay() === 0 || date.getDay() === 6);
  };
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxdctsec.health_report.wristband_modal.Ctrl");
jxdctsec.health_report.wristband_modal.Ctrl.$inject = ["$scope", "$modalInstance", "$timeout", "entity", "db_operation", "$filter"];
jxdctsec.health_report.wristband_modal.Ctrl = function($scope, $filter, $timeout, $modalInstance, entity, db_operation) {
  this.label = "some label from custom modal controller";
  $scope.entity = entity;
  $scope.patWrist = {step_count:undefined, distance:undefined, calories:undefined, walk_count:undefined, walk_distance:undefined, walk_calories:undefined, run_count:undefined, run_distance:undefined, run_calories:undefined, deep_duration:undefined, shallow_duration:undefined, heart_rate:undefined, symptom:undefined, proposal:undefined, measured_at:undefined};
  $scope.getPatWrist = function() {
    db_operation.getPatWrist($scope.entity.patient_id, $scope.entity.file_id).then(function(data) {
      console.log(data);
      $scope.patWrist = data;
      $scope.patWrist.measured_at = $filter("unixTodate")(data.measured_at);
    }, function(error) {
      console.log(data);
    });
  };
  $scope.getPatWrist();
  var timer = undefined;
  $scope.disabledBtn = false;
  $scope.savePatWrist = function() {
    $scope.disabledBtn = true;
    $scope.patWrist.measured_at = $filter("dateTounix")($filter("date")($scope.patWrist.measured_at, "yyyy-M-dd H:mm:ss"));
    db_operation.putPatWrist($scope.entity.patient_id, $scope.entity.file_id, $scope.patWrist).then(function(data) {
      $scope.patWrist.measured_at = $filter("unixTodate")($scope.patWrist.measured_at);
      $scope.addAlert("success", "\u63a8\u9001\u6210\u529f\uff0c3\u79d2\u540e\u81ea\u52a8\u5173\u95ed\uff01");
      timer = $timeout(function() {
        $scope.disabledBtn = false;
        $scope.cancel();
      }, 3E3);
    }, function(error) {
      $scope.addAlert("danger", "\u63a8\u9001\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01");
      $scope.disabledBtn = false;
    });
  };
  $scope.$on("$destroy", function() {
    console.log("modal destroy!");
    if (timer) {
      $timeout.cancel(timer);
    }
  });
  $scope.reset = function() {
    $scope.patWrist = {};
  };
  $scope.today = function() {
    $scope.dt = new Date;
  };
  $scope.dt = entity.measured_at_date;
  $scope.clear = function() {
    $scope.dt = null;
  };
  $scope.disabled = function(date, mode) {
    return mode === "day" && (date.getDay() === 0 || date.getDay() === 6);
  };
  $scope.toggleMin = function() {
    $scope.minDate = $scope.minDate ? null : new Date;
  };
  $scope.toggleMin();
  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();
    $scope.opened = true;
  };
  $scope.dateOptions = {startingDay:1};
  $scope.formats = ["yyyy-MM-dd", "dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"];
  $scope.format = $scope.formats[0];
  var tomorrow = new Date;
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date;
  afterTomorrow.setDate(tomorrow.getDate() + 2);
  $scope.events = [{date:tomorrow, status:"full"}, {date:afterTomorrow, status:"partially"}];
  $scope.getDayClass = function(date, mode) {
    if (mode === "day") {
      var dayToCheck = (new Date(date)).setHours(0, 0, 0, 0);
      for (var i = 0;i < $scope.events.length;i++) {
        var currentDay = (new Date($scope.events[i].date)).setHours(0, 0, 0, 0);
        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }
    return "";
  };
  $scope.ok = function() {
    $modalInstance.close();
  };
  $scope.cancel = function() {
    $modalInstance.dismiss("cancel");
  };
  $scope.alerts = [];
  $scope.addAlert = function(type, msg) {
    var alert = {"type":type, "msg":msg};
    $scope.alerts.push(alert);
    $timeout(function() {
      $scope.closeAlert($scope.alerts.indexOf(alert));
    }, 3E3);
  };
  $scope.closeAlert = function(index) {
    $scope.alerts.splice(index, 1);
  };
  $scope.clearAlerts = function() {
    $scope.alerts = [];
  };
};
goog.provide("jxdctsec.main.db_operation.file_list.module");
goog.require("jxdctsec.main.db_operation.file_list.Ctrl");
goog.require("jxdctsec.health_report.fat_modal.Ctrl");
goog.require("jxdctsec.health_report.glucosemeter_modal.Ctrl");
goog.require("jxdctsec.health_report.oximeter_modal.Ctrl");
goog.require("jxdctsec.health_report.sphygmomanometer_modal.Ctrl");
goog.require("jxdctsec.health_report.thermometer_modal.Ctrl");
goog.require("jxdctsec.health_report.wristband_modal.Ctrl");
goog.require("jxdctsec.health_report.other_modal.Ctrl");
jxdctsec.main.db_operation.file_list.module = angular.module("main.db_operation.file_list", ["ui.router", "ngResource", "ui.select", "ngSanitize", "ui.bootstrap", "angularModalService", "ui.grid.grouping"]);
jxdctsec.main.db_operation.file_list.module.configuration = function($stateProvider) {
  $stateProvider.state("main.db_operation.file_list", {url:"/file_list", templateUrl:"states/main/db_operation/file_list/file_list.html", controller:"FileListCtrl as fileList", resolve:{"DATATYPESPromise":function(constants) {
    return constants.DATATYPESPromise;
  }, "GENDERSPromise":function(constants) {
    return constants.GENDERSPromise;
  }, "PERIODSPromise":function(constants) {
    return constants.PERIODSPromise;
  }}});
};
jxdctsec.main.db_operation.file_list.module.config(jxdctsec.main.db_operation.file_list.module.configuration).controller("FileListCtrl", jxdctsec.main.db_operation.file_list.Ctrl).controller("FatModalCtrl", jxdctsec.health_report.fat_modal.Ctrl).controller("GlucosemeterModalCtrl", jxdctsec.health_report.glucosemeter_modal.Ctrl).controller("OximeterModalCtrl", jxdctsec.health_report.oximeter_modal.Ctrl).controller("SphygmomanometerModalCtrl", jxdctsec.health_report.sphygmomanometer_modal.Ctrl).controller("ThermometerModalCtrl", 
jxdctsec.health_report.thermometer_modal.Ctrl).controller("WristbandModalCtrl", jxdctsec.health_report.wristband_modal.Ctrl).controller("OtherModalCtrl", jxdctsec.health_report.other_modal.Ctrl);
goog.provide("jxdctsec.main.db_operation.module");
goog.require("jxdctsec.main.db_operation.file_list.module");
goog.require("jxdctsec.main.db_operation.glucosemeter_files.module");
goog.require("jxdctsec.main.db_operation.fat_files.module");
goog.require("jxdctsec.main.db_operation.oximeter_files.module");
goog.require("jxdctsec.main.db_operation.sphygmomanometer_files.module");
goog.require("jxdctsec.main.db_operation.thermometer_files.module");
goog.require("jxdctsec.main.db_operation.wristband_files.module");
goog.require("jxdctsec.main.db_operation.other_files.module");
goog.require("jxdctsec.main.db_operation.Ctrl");
goog.require("jxdctsec.confirm_modal.Ctrl");
goog.require("jxdctsec.custom_modal.Ctrl");
jxdctsec.main.db_operation.module = angular.module("main.db_operation", ["ui.router", "ui.grid", "ui.grid.pinning", "ui.grid.resizeColumns", "ui.grid.saveState", "ui.grid.edit", "ui.grid.pagination", jxdctsec.main.db_operation.file_list.module.name, jxdctsec.main.db_operation.fat_files.module.name, jxdctsec.main.db_operation.glucosemeter_files.module.name, jxdctsec.main.db_operation.oximeter_files.module.name, jxdctsec.main.db_operation.sphygmomanometer_files.module.name, jxdctsec.main.db_operation.thermometer_files.module.name, 
jxdctsec.main.db_operation.wristband_files.module.name, jxdctsec.main.db_operation.other_files.module.name]);
jxdctsec.main.db_operation.module.configuration = function($stateProvider) {
  $stateProvider.state("main.db_operation", {url:"/db_operation", templateUrl:"states/main/db_operation/db_operation.html", controller:"DbOperationCtrl as dbOperation"});
};
jxdctsec.main.db_operation.module.config(jxdctsec.main.db_operation.module.configuration).controller("DbOperationCtrl", jxdctsec.main.db_operation.Ctrl);
goog.provide("jxdctsec.main.module");
goog.require("jxdctsec.main.db_operation.module");
goog.require("jxdctsec.main.health_file.module");
goog.require("jxdctsec.main.health_data.module");
goog.require("jxdctsec.main.health_consultation.module");
goog.require("jxdctsec.main.user_center.module");
goog.require("jxdctsec.main.Ctrl");
goog.require("jxdctsec.confirm_modal.Ctrl");
goog.require("jxdctsec.custom_modal.Ctrl");
jxdctsec.main.module = angular.module("main", ["ui.router", "ui.bootstrap", "ui.navbar", "angularModalService", jxdctsec.main.db_operation.module.name, jxdctsec.main.health_file.module.name, jxdctsec.main.health_data.module.name, jxdctsec.main.health_consultation.module.name, jxdctsec.main.user_center.module.name]);
jxdctsec.main.module.configuration = function($stateProvider) {
  $stateProvider.state("main", {url:"/main", templateUrl:"states/main/main.html", controller:"MainCtrl as main"});
};
jxdctsec.main.module.config(jxdctsec.main.module.configuration).controller("MainCtrl", jxdctsec.main.Ctrl).controller("ConfirmModalCtrl", jxdctsec.confirm_modal.Ctrl).controller("CustomModalCtrl", jxdctsec.custom_modal.Ctrl);
goog.require("jxdctsec.main.module");
goog.require("jxdctsec.version.Directive.factory");
goog.require("jxdctsec.fileModel.Directive.factory");
goog.require("jxdctsec.version.Service");
goog.require("jxdctsec.district.Filter.factory");
goog.require("jxdctsec.province.Filter.factory");
goog.require("jxdctsec.city.Filter.factory");
goog.require("jxdctsec.zone.Filter.factory");
goog.require("jxdctsec.product_type.Filter.factory");
goog.require("jxdctsec.device_type.Filter.factory");
goog.require("jxdctsec.data_type.Filter.factory");
goog.require("jxdctsec.file_type.Filter.factory");
goog.require("jxdctsec.wristband_column.Filter.factory");
goog.require("jxdctsec.sphygmomanometer_column.Filter.factory");
goog.require("jxdctsec.glucosemeter_column.Filter.factory");
goog.require("jxdctsec.thermometer_column.Filter.factory");
goog.require("jxdctsec.oximeter_column.Filter.factory");
goog.require("jxdctsec.fat_column.Filter.factory");
goog.require("jxdctsec.comparison_ops.Filter.factory");
goog.require("jxdctsec.logical_ops.Filter.factory");
goog.require("jxdctsec.periods.Filter.factory");
goog.require("jxdctsec.user_status.Filter.factory");
goog.require("jxdctsec.manufactory_status.Filter.factory");
goog.require("jxdctsec.terminal_status.Filter.factory");
goog.require("jxdctsec.doctor_status.Filter.factory");
goog.require("jxdctsec.helath_consultation_status.Filter.factory");
goog.require("jxdctsec.health_data_status.Filter.factory");
goog.require("jxdctsec.health_file_status.Filter.factory");
goog.require("jxdctsec.company_department.Filter.factory");
goog.require("jxdctsec.company_member.Filter.factory");
goog.require("jxdctsec.company_nature.Filter.factory");
goog.require("jxdctsec.company_industry.Filter.factory");
goog.require("jxdctsec.department.Filter.factory");
goog.require("jxdctsec.gender.Filter.factory");
goog.require("jxdctsec.unixTodate.Filter.factory");
goog.require("jxdctsec.dateTounix.Filter.factory");
goog.require("jxdctsec.basic.Service");
goog.require("jxdctsec.constants.Factory");
goog.require("jxdctsec.health_con.Service");
goog.require("jxdctsec.health_data.Service");
goog.require("jxdctsec.db_operation.Service");
goog.require("jxdctsec.health_file.Service");
function config($stateProvider, $urlRouterProvider, $locationProvider, $httpProvider) {
  $urlRouterProvider.otherwise("/main/db_operation/file_list");
  $httpProvider.defaults.withCredentials = true;
  if (!$httpProvider.defaults.headers.get) {
    $httpProvider.defaults.headers.get = {};
  }
  $httpProvider.defaults.headers.get["If-Modified-Since"] = "Mon, 26 Jul 1997 05:00:00 GMT";
  $httpProvider.defaults.headers.get["Cache-Control"] = "no-cache";
  $httpProvider.defaults.headers.get["Pragma"] = "no-cache";
  $httpProvider.interceptors.push(function($q, $window) {
    return {response:function(response) {
      return response;
    }, responseError:function(response) {
      if (response.status === 401) {
        $window.location.href = "/doctor/open";
      }
      if (response.status === 403) {
        if (response.data.role === "doctor") {
          alert("\u60a8\u65e0\u64cd\u4f5c\u6743\u9650\uff01");
        } else {
          $window.location.href = "/doctor/open";
        }
      }
      return $q.reject(response);
    }};
  });
}
var onChangeConfig = ["$rootScope", "$state", function($rootScope, $state) {
  $rootScope.$on("$stateChangeStart", function(event, toState) {
    if (toState.name === "main.user_center") {
      event.preventDefault();
      $state.go("main.user_center.basics", {});
    } else {
      if (toState.name === "main.db_operation") {
        event.preventDefault();
        $state.go("main.db_operation.file_list", {});
      }
    }
  });
}];
var endPointConfig = ["$rootScope", function($rootScope, $state) {
  $rootScope.endPoint = "";
}];
angular.module("app", ["ui.router", "ngResource", jxdctsec.main.module.name]).config(config).run(onChangeConfig).run(endPointConfig).directive("version", jxdctsec.version.Directive.factory).directive("fileModel", jxdctsec.fileModel.Directive.factory).service("version", jxdctsec.version.Service).filter("mapDistrict", jxdctsec.district.Filter.factory).filter("mapProvince", jxdctsec.province.Filter.factory).filter("mapCity", jxdctsec.city.Filter.factory).filter("mapZone", jxdctsec.zone.Filter.factory).filter("mapProductType", 
jxdctsec.product_type.Filter.factory).filter("mapDeviceType", jxdctsec.device_type.Filter.factory).filter("mapDataType", jxdctsec.data_type.Filter.factory).filter("mapFileType", jxdctsec.file_type.Filter.factory).filter("mapWristbandColumn", jxdctsec.wristband_column.Filter.factory).filter("mapSphygmomanometerColumn", jxdctsec.sphygmomanometer_column.Filter.factory).filter("mapGlucosemeterColumn", jxdctsec.glucosemeter_column.Filter.factory).filter("mapThermometerColumn", jxdctsec.thermometer_column.Filter.factory).filter("mapOximeterColumn", 
jxdctsec.oximeter_column.Filter.factory).filter("mapFatColumn", jxdctsec.fat_column.Filter.factory).filter("mapComparisonOps", jxdctsec.comparison_ops.Filter.factory).filter("mapLogicalOps", jxdctsec.logical_ops.Filter.factory).filter("mapPeriods", jxdctsec.periods.Filter.factory).filter("mapUserStatus", jxdctsec.user_status.Filter.factory).filter("mapManufactoryStatus", jxdctsec.manufactory_status.Filter.factory).filter("mapTerminalStatus", jxdctsec.terminal_status.Filter.factory).filter("mapDoctorStatus", 
jxdctsec.doctor_status.Filter.factory).filter("mapHelathConsultationStatus", jxdctsec.helath_consultation_status.Filter.factory).filter("mapHalthDataStatus", jxdctsec.health_data_status.Filter.factory).filter("mapHealthFileStatus", jxdctsec.health_file_status.Filter.factory).filter("mapCompanyDepartment", jxdctsec.company_department.Filter.factory).filter("mapCompanyMember", jxdctsec.company_member.Filter.factory).filter("mapCompanyNature", jxdctsec.company_nature.Filter.factory).filter("mapCompanyIndustry", 
jxdctsec.company_industry.Filter.factory).filter("mapDepartment", jxdctsec.department.Filter.factory).filter("mapGender", jxdctsec.gender.Filter.factory).filter("unixTodate", jxdctsec.unixTodate.Filter.factory).filter("dateTounix", jxdctsec.dateTounix.Filter.factory).service("basic", jxdctsec.basic.Service).service("health_con", jxdctsec.health_con.Service).factory("constants", jxdctsec.constants.Factory).service("health_file", jxdctsec.health_file.Service).service("health_data", jxdctsec.health_data.Service).service("db_operation", 
jxdctsec.db_operation.Service);

